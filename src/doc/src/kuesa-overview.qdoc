/*
    kuesa-overview.qdoc

    This file is part of Kuesa.

    Copyright (C) 2018-2020 Klarälvdalens Datakonsult AB, a KDAB Group company, info@kdab.com
    Author: Paul Lemire <paul.lemire@kdab.com>

    Licensees holding valid proprietary KDAB Kuesa licenses may use this file in
    accordance with the Kuesa Enterprise License Agreement provided with the Software in the
    LICENSE.KUESA.ENTERPRISE file.

    Contact info@kdab.com if any conditions of this licensing are not clear to you.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/*!
    \page kuesa-overview.html
    \title Kuesa Overview

    \brief Kuesa is a solution that provides an integrated and unified workflow
    for designers and developers to create, optimize and integrate real time 3D
    content in a 3D or hybrid 2D/3D software user interface. Kuesa is available
    for both embedded or desktop applications.

    \section1 Kuesa's workflow

    There are traditionally two main workflows to integrate real-time 3D
    content into an application:

    \list
    \li Hand-made workflow: the designers create mockups of the scenes and the
    developers recreate them in code, leading to lots of communication
    overhead, misunderstandings and suboptimal results.
    \li External tool workflow: the designers and developers work on a common
    tool for editing the scene for integrating into the application limiting
    both to the constraints of the tool and creating a black box which provides
    little control.
    \endlist

    Kuesa provides an easy, integrated and unified workflow without any
    compromises for designers and developers with:

    \list
    \li Great performances, from desktops to embedded boards
    \li Great quality of the real-time 3D scenes
    \li Full expressiveness for the designers, using professional 3D design tools
    \li Full control of the integration by the developers
    \li A reduced time to market
    \endlist

    The workflow is based on the glTF™ (GL Transmission Format) format designed
    by the \l {https://www.khronos.org/} {Khronos Group}, a royalty-free
    specification for the efficient transmission and loading of 3D scenes and
    models by applications supporting vendor extension.


    \section1 Kuesa's strengths

    \list
    \li Uses professional 3D design tools for scene creation: 3ds Max®, Blender…
    \li Provides tools for previewing, optimizing, checking and optimizing assets
    \li Provides a seamless integration in Qt and Qt3D applications
    \li Gives full control of the scene from the code, for complex interaction
    \endlist


    \section1 Kuesa components

    \image pipeline-diagram.png

    \include kuesa-components.qdocinc

    Checkout out our \l {https://www.youtube.com/watch?v=dIdrQMkGVPI} {video
    tutorial} on creating an interactive 3D application with Kuesa.

    \section1 Kuesa Runtime Features

    \section2 glTF 2 Importer

    The class \l [CPP] {Kuesa::GLTF2Importer} {GLTF2Importer} is a
    Qt3DCore::QNode based class that allows loading glTF 2 files. glTF 2 files
    from any exporter should work, note however that the Kuesa specific
    exporter allow the use of additional features, namely:

    \list
    \li Qt 3D compatible \l [CPP] {Kuesa::MetallicRoughnessMaterial} {PBR Material} support
    \li glTF 2.0 Extensions
        \list
        \li \l {https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit} {KHR_materials_unlit}
        \li \l {https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual} {KHR_lights_punctual}
        \li \l {https://github.com/KhronosGroup/glTF/pull/1301/files/c72ffabee4b801ce30c77277bba37fa4179185bd} {EXT_property_animation}
        \li \l {https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md} {KHR_draco_mesh_compression}
        \li KDAB_custom_material for \l {Kuesa Iro Materials} {Iro Materials} export
        \li KDAB_kuesa_layers for \l {Kuesa Layers} {Qt 3D layer} export
        \li KDAB_kuesa_reflection_planes for \l {Kuesa Reflection Planes} {Reflection Planes} export
        \endlist
    \endlist

    \section3 Asset Collections
    Once a file has been loaded through the use of the glTF 2 importer, name based
    collections are populated. Kuesa provides the following collections for:
    \list
    \li \l [CPP]{Kuesa::EntityCollection} {Entities}
    \li \l [CPP]{Kuesa::TransformCollection} {Transforms}
    \li \l [CPP]{Kuesa::AnimationClipCollection} {Animation Clips}
    \li \l [CPP]{Kuesa::AnimationMappingCollection} {Animation Mappings}
    \li \l [CPP]{Kuesa::CameraCollection} {Cameras}
    \li \l [CPP]{Kuesa::EffectCollection} {Effects}
    \li \l [CPP]{Kuesa::MaterialCollection} {Materials}
    \li \l [CPP]{Kuesa::MeshCollection} {Meshes}
    \li \l [CPP]{Kuesa::SkeletonCollection} {Skeletons}
    \li \l [CPP]{Kuesa::TextureCollection} {Textures}
    \li \l [CPP]{Kuesa::TextureImageCollection} {Images}
    \li \l [CPP]{Kuesa::ReflectionPlaneCollection} {Reflection Planes}
    \endlist

    \section2 Kuesa Optimized Frame Graph

    Kuesa provides the \l [CPP] {Kuesa::ForwardRenderer} {ForwardRenderer}
    Frame Graph which is optimized for the rendering of glTF2 scenes with the
    addition of post processing effects.

    \section2 Full Screen Post Processing Effects

    Final screen composition can be customized through the use of post
    processing effects. The effects work along with the default provided
    Kuesa FrameGraph \l [CPP]{Kuesa::ForwardRenderer} {ForwardRenderer}.

    Currently Kuesa provides the following effects:
    \list
    \li \l [CPP]{Kuesa::BloomEffect} {Bloom}
    \li \l [CPP]{Kuesa::GaussianBlurEffect} {Gaussian Blur}
    \li \l [CPP]{Kuesa::OpacityMask} {Opacity Masking}
    \li \l [CPP]{Kuesa::ThresholdEffect} {Thresholding}
    \li \l [CPP]{Kuesa::DepthOfFieldEffect} {Depth Of Field}
    \endlist

    More information about post-processing effects is provided here: \l {Kuesa post-processing effects}.
*/
