/*
    kuesa-index.qdoc

    This file is part of Kuesa.

    Copyright (C) 2018-2019 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com
    Author: Paul Lemire <paul.lemire@kdab.com>

    Licensees holding valid proprietary KDAB Kuesa licenses may use this file in
    accordance with the Kuesa Enterprise License Agreement provided with the Software in the
    LICENSE.KUESA.ENTERPRISE file.

    Contact info@kdab.com if any conditions of this licensing are not clear to you.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/*!
    \page index.html

    \e{Kuesa Runtime} is a module for Qt 3D which provides:
    \list
    \li Support for glTF 2 importing
    \li Helpers for accessing and manipulating loaded content
    \li PBR and custom material support
    \li Custom forward renderer for adding effects
    \li A Qt Creator template for quickly creating new Kuesa based projects
    \endlist

    It is the developer facing part of the Kuesa 3D design and integration workflow.

    \annotatedlist kuesa-module


    \section1 Getting Started

    For a C++ applications and C++/QML applications that performs 2D or 3D
    rendering leveraging the Kuesa and Qt 3D modules:

    \badcode
    QT += 3dcore 3drender 3dinput 3dlogic 3dextras 3danimation kuesa
    \endcode

    To include the definitions of the module's classes, use the following
    directives:

    C++:
    \badcode
    #include <Kuesa>
    \endcode

    QML:
    \badcode
    import Kuesa 1.2
    \endcode

    \section1 Quick Overview

    Kuesa aims at making it easier for both Artist and Developers to preview and
    integrate 3D scenes into a Qt based application.

    Kuesa provides an easy, integrated and unified workflow without any
    compromises for designers and developers based on the glTF 2 format.

    It is composed of 2 components:

    \include kuesa-components.qdocinc

    \l {Kuesa Overview} {Read More}

    \section1 Requirements

    Kuesa relies on the Qt framework:
    \list
    \li Kuesa requires the base \l {https://doc.qt.io/qt-5.12/supported-platforms.html} {Qt 5.12 requirements} and OpenGL supports.
    \li Kuesa requires Qt 3D from Qt 5.12.8 or Qt 5.15
    \endlist

    \note Earlier Qt 3D versions can still be used but might be suffering from bugs
    that have been identified and fixed since.

    \warning not all features are working with Qt 5.12.8.

    Qt 3D suffers from a regression that prevents optional aspects (animations, logic) from running
    A \l {https://codereview.qt-project.org/c/qt/qt3d/+/297123} {patch} fixes this

    It can be installed by doing the following:
    \list
    \li Download and install Qt 5.12.8
    \li clone Qt3D: git clone git@github.com:qt/qt3d.git
    \li go to 5.12 branch: git checkout -t origin/5.12
    \li open a console with Qt setup (should be installed with Qt)
    \li go to the Qt3D directory, and type: qmake && make - j4 && make install (or qmake; jom; jom install on Windows)
    \endlist

    \section2 OpenGL requirements
    \list
    \li Desktop OpenGL 3+
    \li OpenGL ES 3.2
    \li OpenGL ES 3.1 or lower is supported but with a limited feature set depending on available OpenGL extensions:
        \list
        \li For HDR support, GL_OES_texture_half_float is required
        \li For anti aliasing, ARB_texture_multisample and GL_EXT_color_buffer_half_float are required
        \endlist
    \endlist

    \section2 Optional Dependencies

    Kuesa can optionnally use the \l {https://github.com/google/draco} {Draco}
    mesh compression library, either through an embedded version, or a version
    present on the system. Draco can be used to dramatically decrease the size
    of glTF files.

    Kuesa supports the \c {KHR_draco_mesh_compression} glTF extension as defined \l {    https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_draco_mesh_compression/} {here}.

    By default, Kuesa will build with its own embedded version of the Draco library.
    This can be enforced with:

    \badcode
        qmake kuesa.pro -- --draco=qt
    \endcode

    To build Kuesa without any support for Draco, run qmake like this:

    \badcode
        qmake kuesa.pro -- --draco=no
    \endcode

    To build Kuesa with an external version of Draco, run qmake like this:

    \badcode
        qmake kuesa.pro -- --draco=system
    \endcode

    If Draco is not installed in the default location on your system, you can
    set the \c {DRACOSDK} environment variable to point to where Draco is
    installed. Use the \c {DRACOSDK_LIBS} environment variable to point to the
    folder containing the Draco libraries.

    Note that Kuesa has last been tested with Draco at commit
    8833cf878e6fd43c5a3fd6e4231212e25e25e632.

    \section1 Installation

    Kuesa builds as a Qt module and will be installed alongside Qt. The main
    advantage is that once installed, using Kuesa in your projects is as easy
    as adding

    \badcode
    QT += kuesa
    \endcode

    to your project file. The down side is that building Kuesa from source can
    be a little more complicated if you're not used to building Qt itself
    already.

    \note you DO NOT have to build Qt from source, building Kuesa against a
    pre-installed version of Qt should work fine.

    But building a module means that Kuesa has dependencies that are similar to
    those that apply when building Qt from source (Instructions on how to build
    Qt from source can be found
    \l {https://wiki.qt.io/Building_Qt_5_from_Git} {here}.

    In particular:
    \list
    \li perl must be installed and included in the PATH
    \li if you have downloaded Kuesa as an archive from github, you must create an empty ``.git`` folder at the
    root of the kuesa source directory.
    \endlist

    Once these are installed, `syncqt` will be able to generate the module headers at
    build time. Simply run:

    \badcode
        qmake
        make
        make install
    \endcode

    Should examples not be built, try:

    \badcode
        make sub-examples
        cd examples
        make install
    \endcode

    To install the Qt Creator template, copy the entire kuesa folder
    from \c {tools/qtc_templates} to the \c {templates/wizards} folder inside
    the Qt Creator install location.


    \section1 Reference
    \list
        \li \l {Kuesa Overview}
        \li \l {Kuesa C++ Classes}
        \li \l {Kuesa QML Types}
        \li \l {Kuesa Examples}
        \li \l {Kuesa Tools}
    \endlist

    \section1 Kuesa Platform Support

    Kuesa has the following support for platforms:

    \list
        \li Microsoft Windows (win32) - Supported
        \li Linux X11 - Supported
        \li \macos - Supported although there may be some retina scaling issues
        \li Android - Supported
        \li Embedded Linux - Supported
        \li iOS - Supported
        \li WinRT - Not supported yet
    \endlist

    \section1 Licenses and Attributions

    Kuesa is available under commercial licenses from \l {https://www.kdab.com}
    {KDAB}. In addition, it is also available under the \l
    {https://www.gnu.org/licenses/agpl-3.0.en.html} {GNU Affero General Public
    License, version 3}

    \section2 Licenses for 3rd-parties used in Kuesa-Runtime
    \generatelist{groupsbymodule attributions-kuesa}

    \section2 Licenses for 3rd-parties used in Kuesa Examples
    \generatelist{groupsbymodule attributions-examples}

    \section2 Licenses for 3rd-parties used in Kuesa Tools
    \generatelist{groupsbymodule attributions-tools}
*/
