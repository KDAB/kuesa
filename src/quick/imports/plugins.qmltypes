import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Kuesa 1.2 -output plugins.qmltypes'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Kuesa::AbstractAssetCollection"
        prototype: "Qt3DCore::QNode"
        exports: ["Kuesa/AbstractAssetCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "names"; type: "QStringList"; isReadonly: true }
        Property { name: "size"; type: "int"; isReadonly: true }
    }
    Component {
        name: "Kuesa::AbstractPostProcessingEffect"
        prototype: "Qt3DCore::QNode"
        exports: [
            "Kuesa.Effects/AbstractPostProcessingEffect 1.0",
            "Kuesa.Effects/AbstractPostProcessingEffect 1.2"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [0, 0]
    }
    Component {
        name: "Kuesa::AnimationClipCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/AnimationClipCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DAnimation::QAbstractAnimationClip*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::AnimationMappingCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/AnimationMappingCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DAnimation::QChannelMapper*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::AnimationPlayer"
        prototype: "Qt3DCore::QNode"
        exports: ["Kuesa/AnimationPlayer 1.0"]
        exportMetaObjectRevisions: [100]
        Enum {
            name: "Loops"
            values: {
                "Infinite": -1
            }
        }
        Enum {
            name: "Status"
            values: {
                "None": 0,
                "Ready": 1,
                "Error": 2
            }
        }
        Property { name: "sceneEntity"; type: "Kuesa::SceneEntity"; isPointer: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "clip"; type: "string" }
        Property { name: "mapper"; type: "string" }
        Property { name: "running"; type: "bool" }
        Property { name: "loops"; type: "int" }
        Property { name: "clock"; type: "Qt3DAnimation::QClock"; isPointer: true }
        Property { name: "normalizedTime"; type: "float" }
        Property { name: "duration"; revision: 1; type: "float"; isReadonly: true }
        Signal {
            name: "sceneEntityChanged"
            Parameter { name: "sceneEntity"; type: "const Kuesa::SceneEntity"; isPointer: true }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "Kuesa::AnimationPlayer::Status" }
        }
        Signal {
            name: "clipChanged"
            Parameter { name: "clip"; type: "string" }
        }
        Signal {
            name: "mapperChanged"
            Parameter { name: "mapper"; type: "string" }
        }
        Signal {
            name: "runningChanged"
            Parameter { name: "running"; type: "bool" }
        }
        Signal {
            name: "loopCountChanged"
            Parameter { name: "loops"; type: "int" }
        }
        Signal {
            name: "clockChanged"
            Parameter { name: "clock"; type: "Qt3DAnimation::QClock"; isPointer: true }
        }
        Signal {
            name: "normalizedTimeChanged"
            Parameter { name: "index"; type: "float" }
        }
        Signal {
            name: "durationChanged"
            Parameter { name: "duration"; type: "float" }
        }
        Method {
            name: "setSceneEntity"
            Parameter { name: "sceneEntity"; type: "Kuesa::SceneEntity"; isPointer: true }
        }
        Method {
            name: "setClip"
            Parameter { name: "clip"; type: "string" }
        }
        Method {
            name: "setMapper"
            Parameter { name: "mapper"; type: "string" }
        }
        Method {
            name: "setRunning"
            Parameter { name: "running"; type: "bool" }
        }
        Method {
            name: "setLoopCount"
            Parameter { name: "loops"; type: "int" }
        }
        Method {
            name: "setClock"
            Parameter { name: "clock"; type: "Qt3DAnimation::QClock"; isPointer: true }
        }
        Method {
            name: "setNormalizedTime"
            Parameter { name: "timeFraction"; type: "float" }
        }
        Method { name: "start" }
        Method { name: "stop" }
        Property { name: "targets"; revision: 100; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Kuesa::ArmatureCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/ArmatureCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DCore::QArmature*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::Asset"
        prototype: "Qt3DCore::QNode"
        exports: ["Kuesa/Asset 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sceneEntity"; type: "Kuesa::SceneEntity"; isPointer: true }
        Property { name: "collection"; type: "Kuesa::AbstractAssetCollection"; isPointer: true }
        Property { name: "name"; type: "string" }
        Property { name: "node"; type: "Qt3DCore::QNode"; isReadonly: true; isPointer: true }
        Signal {
            name: "sceneEntityChanged"
            Parameter { name: "sceneEntity"; type: "Kuesa::SceneEntity"; isPointer: true }
        }
        Signal {
            name: "collectionChanged"
            Parameter { name: "collection"; type: "Kuesa::AbstractAssetCollection"; isPointer: true }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "nodeChanged"
            Parameter { name: "node"; type: "Qt3DCore::QNode"; isPointer: true }
        }
        Method {
            name: "setSceneEntity"
            Parameter { name: "sceneEntity"; type: "Kuesa::SceneEntity"; isPointer: true }
        }
        Method {
            name: "setCollection"
            Parameter { name: "collection"; type: "Kuesa::AbstractAssetCollection"; isPointer: true }
        }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::BloomEffect"
        prototype: "Kuesa::AbstractPostProcessingEffect"
        exports: ["Kuesa.Effects/BloomEffect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "threshold"; type: "float" }
        Property { name: "blurPassCount"; type: "int" }
        Signal {
            name: "thresholdChanged"
            Parameter { name: "threshold"; type: "float" }
        }
        Signal {
            name: "blurPassCountChanged"
            Parameter { name: "blurPassCount"; type: "int" }
        }
        Method {
            name: "setThreshold"
            Parameter { name: "threshold"; type: "float" }
        }
        Method {
            name: "setBlurPassCount"
            Parameter { name: "blurPassCount"; type: "int" }
        }
    }
    Component {
        name: "Kuesa::CameraCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/CameraCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DRender::QCamera*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::DepthOfFieldEffect"
        prototype: "Kuesa::AbstractPostProcessingEffect"
        exports: ["Kuesa.Effects/DepthOfFieldEffect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "focusRange"; type: "float" }
        Property { name: "focusDistance"; type: "float" }
        Property { name: "radius"; type: "float" }
        Signal {
            name: "focusRangeChanged"
            Parameter { name: "focusRange"; type: "float" }
        }
        Signal {
            name: "radiusChanged"
            Parameter { name: "radius"; type: "float" }
        }
        Signal {
            name: "focusDistanceChanged"
            Parameter { name: "focusDistance"; type: "float" }
        }
        Method {
            name: "setFocusRange"
            Parameter { name: "focusRange"; type: "float" }
        }
        Method {
            name: "setRadius"
            Parameter { name: "radius"; type: "float" }
        }
        Method {
            name: "setFocusDistance"
            Parameter { name: "focusDistance"; type: "float" }
        }
    }
    Component {
        name: "Kuesa::DirectionalLight"
        prototype: "Qt3DRender::QAbstractLight"
        exports: ["Kuesa/DirectionalLight 1.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DirectionMode"
            values: {
                "World": 0,
                "Local": 1
            }
        }
        Property { name: "direction"; type: "QVector3D" }
        Property { name: "directionMode"; type: "Kuesa::DirectionalLight::DirectionMode" }
        Signal {
            name: "directionChanged"
            Parameter { name: "direction"; type: "QVector3D" }
        }
        Signal {
            name: "directionModeChanged"
            Parameter { name: "directionMode"; type: "Kuesa::DirectionalLight::DirectionMode" }
        }
        Method {
            name: "setDirection"
            Parameter { name: "direction"; type: "QVector3D" }
        }
        Method {
            name: "setDirectionMode"
            Parameter { name: "directionMode"; type: "Kuesa::DirectionalLight::DirectionMode" }
        }
    }
    Component {
        name: "Kuesa::EffectProperties"
        exports: ["Kuesa/EffectProperties 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Properties"
            values: {
                "MetallicRoughness": 2,
                "Unlit": 4,
                "Custom": 8,
                "BaseColorMap": 16,
                "MetalRoughnessMap": 32,
                "NormalMap": 64,
                "AOMap": 128,
                "EmissiveMap": 256,
                "Blend": 1024,
                "Mask": 2048,
                "DoubleSided": 4096,
                "VertexColor": 8192,
                "Skinning": 16384
            }
        }
    }
    Component {
        name: "Kuesa::EntityCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/EntityCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DCore::QEntity*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::ForwardRenderer"
        prototype: "Qt3DRender::QRenderSurfaceSelector"
        exports: ["Kuesa/ForwardRenderer 1.0"]
        exportMetaObjectRevisions: [100]
        Property { name: "renderSurface"; type: "QObject"; isPointer: true }
        Property { name: "viewportRect"; type: "QRectF" }
        Property { name: "camera"; type: "Qt3DCore::QEntity"; isPointer: true }
        Property { name: "clearColor"; type: "QColor" }
        Property { name: "clearBuffers"; type: "Qt3DRender::QClearBuffers::BufferType" }
        Property { name: "frustumCulling"; type: "bool" }
        Property { name: "backToFrontSorting"; type: "bool" }
        Property { name: "zFilling"; type: "bool" }
        Property {
            name: "toneMappingAlgorithm"
            revision: 1
            type: "ToneMappingAndGammaCorrectionEffect::ToneMapping"
        }
        Property { name: "exposure"; revision: 1; type: "float" }
        Property { name: "gamma"; revision: 1; type: "float" }
        Property { name: "showDebugOverlay"; revision: 2; type: "bool" }
        Signal {
            name: "renderSurfaceChanged"
            Parameter { name: "renderSurface"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "viewportRectChanged"
            Parameter { name: "viewportRect"; type: "QRectF" }
        }
        Signal {
            name: "cameraChanged"
            Parameter { name: "camera"; type: "Qt3DCore::QEntity"; isPointer: true }
        }
        Signal {
            name: "clearColorChanged"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Signal {
            name: "clearBuffersChanged"
            Parameter { name: "clearBuffers"; type: "Qt3DRender::QClearBuffers::BufferType" }
        }
        Signal {
            name: "frustumCullingChanged"
            Parameter { name: "frustumCulling"; type: "bool" }
        }
        Signal {
            name: "backToFrontSortingChanged"
            Parameter { name: "backToFrontSorting"; type: "bool" }
        }
        Signal {
            name: "zFillingChanged"
            Parameter { name: "zFilling"; type: "bool" }
        }
        Signal { name: "frameGraphTreeReconfigured" }
        Signal {
            name: "gammaChanged"
            Parameter { name: "gamma"; type: "float" }
        }
        Signal {
            name: "exposureChanged"
            Parameter { name: "exposure"; type: "float" }
        }
        Signal {
            name: "toneMappingAlgorithmChanged"
            Parameter {
                name: "toneMappingAlgorithm"
                type: "ToneMappingAndGammaCorrectionEffect::ToneMapping"
            }
        }
        Signal {
            name: "showDebugOverlayChanged"
            Parameter { name: "showDebugOverlay"; type: "bool" }
        }
        Method {
            name: "setRenderSurface"
            Parameter { name: "renderSurface"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "setViewportRect"
            Parameter { name: "viewportRect"; type: "QRectF" }
        }
        Method {
            name: "setCamera"
            Parameter { name: "camera"; type: "Qt3DCore::QEntity"; isPointer: true }
        }
        Method {
            name: "setClearColor"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Method {
            name: "setClearBuffers"
            Parameter { name: "clearBuffers"; type: "Qt3DRender::QClearBuffers::BufferType" }
        }
        Method {
            name: "setFrustumCulling"
            Parameter { name: "frustumCulling"; type: "bool" }
        }
        Method {
            name: "setBackToFrontSorting"
            Parameter { name: "backToFrontSorting"; type: "bool" }
        }
        Method {
            name: "setZFilling"
            Parameter { name: "zfilling"; type: "bool" }
        }
        Method {
            name: "setGamma"
            Parameter { name: "gamma"; type: "float" }
        }
        Method {
            name: "setExposure"
            Parameter { name: "exposure"; type: "float" }
        }
        Method {
            name: "setToneMappingAlgorithm"
            Parameter {
                name: "toneMappingAlgorithm"
                type: "ToneMappingAndGammaCorrectionEffect::ToneMapping"
            }
        }
        Method {
            name: "setShowDebugOverlay"
            Parameter { name: "showDebugOverlay"; type: "bool" }
        }
        Method {
            name: "addLayer"
            Parameter { name: "layer"; type: "Qt3DRender::QLayer"; isPointer: true }
        }
        Method {
            name: "removeLayer"
            Parameter { name: "layer"; type: "Qt3DRender::QLayer"; isPointer: true }
        }
        Method { name: "layers"; type: "QVector<Qt3DRender::QLayer*>" }
        Method {
            name: "addPostProcessingEffect"
            Parameter { name: "effect"; type: "Kuesa::AbstractPostProcessingEffect"; isPointer: true }
        }
        Method {
            name: "removePostProcessingEffect"
            Parameter { name: "effect"; type: "Kuesa::AbstractPostProcessingEffect"; isPointer: true }
        }
        Property {
            name: "postProcessingEffects"
            revision: 100
            type: "Kuesa::AbstractPostProcessingEffect"
            isList: true
            isReadonly: true
        }
        Property {
            name: "layers"
            revision: 100
            type: "Qt3DRender::QLayer"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "Kuesa::GLTF2Import::GLTF2Options"
        prototype: "QObject"
        exports: ["Kuesa/GLTF2Options 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "generateTangents"; type: "bool" }
        Property { name: "generateNormals"; type: "bool" }
        Signal {
            name: "generateTangentsChanged"
            Parameter { name: "generateTangents"; type: "bool" }
        }
        Signal {
            name: "generateNormalsChanged"
            Parameter { name: "generateNormals"; type: "bool" }
        }
        Method {
            name: "setGenerateTangents"
            Parameter { name: "generateTangents"; type: "bool" }
        }
        Method {
            name: "setGenerateNormals"
            Parameter { name: "generateNormals"; type: "bool" }
        }
    }
    Component {
        name: "Kuesa::GLTF2Importer"
        prototype: "Qt3DCore::QNode"
        exports: ["Kuesa/GLTF2Importer 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "None": 0,
                "Loading": 1,
                "Ready": 2,
                "Error": 3
            }
        }
        Enum {
            name: "ActiveScene"
            values: {
                "DefaultScene": -2,
                "EmptyScene": -1
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "Kuesa::GLTF2Importer::Status"; isReadonly: true }
        Property { name: "sceneEntity"; type: "Kuesa::SceneEntity"; isPointer: true }
        Property { name: "assignNames"; type: "bool" }
        Property {
            name: "options"
            type: "Kuesa::GLTF2Import::GLTF2Options"
            isReadonly: true
            isPointer: true
        }
        Property { name: "activeSceneIndex"; type: "int" }
        Property { name: "availableScenes"; type: "QStringList"; isReadonly: true }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "Kuesa::GLTF2Importer::Status" }
        }
        Signal {
            name: "sceneEntityChanged"
            Parameter { name: "sceneEntity"; type: "Kuesa::SceneEntity"; isPointer: true }
        }
        Signal {
            name: "assignNamesChanged"
            Parameter { name: "assignNames"; type: "bool" }
        }
        Signal {
            name: "activeSceneIndexChanged"
            Parameter { name: "activeSceneIndex"; type: "int" }
        }
        Signal {
            name: "availableScenesChanged"
            Parameter { name: "availableScenes"; type: "QStringList" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSceneEntity"
            Parameter { name: "sceneEntity"; type: "Kuesa::SceneEntity"; isPointer: true }
        }
        Method {
            name: "setAssignNames"
            Parameter { name: "assignNames"; type: "bool" }
        }
        Method {
            name: "setOptions"
            Parameter { name: "options"; type: "Kuesa::GLTF2Import::GLTF2Options" }
        }
        Method {
            name: "setActiveSceneIndex"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "Kuesa::GLTF2Material"
        prototype: "Qt3DRender::QMaterial"
        exports: ["Kuesa/GLTF2Material 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property {
            name: "morphController"
            type: "Kuesa::MorphController"
            isReadonly: true
            isPointer: true
        }
        Signal {
            name: "morphControllerChanged"
            Parameter { name: "morphController"; type: "Kuesa::MorphController"; isPointer: true }
        }
        Method {
            name: "setMorphController"
            Parameter { name: "morphController"; type: "Kuesa::MorphController"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::GLTF2MaterialEffect"
        prototype: "Qt3DRender::QEffect"
        Property { name: "doubleSided"; type: "bool" }
        Property { name: "useSkinning"; type: "bool" }
        Property { name: "opaque"; type: "bool" }
        Property { name: "alphaCutoffEnabled"; type: "bool" }
        Signal {
            name: "doubleSidedChanged"
            Parameter { name: "doubleSided"; type: "bool" }
        }
        Signal {
            name: "useSkinningChanged"
            Parameter { name: "useSkinning"; type: "bool" }
        }
        Signal {
            name: "opaqueChanged"
            Parameter { name: "opaque"; type: "bool" }
        }
        Signal {
            name: "alphaCutoffEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setDoubleSided"
            Parameter { name: "doubleSided"; type: "bool" }
        }
        Method {
            name: "setUseSkinning"
            Parameter { name: "useSkinning"; type: "bool" }
        }
        Method {
            name: "setOpaque"
            Parameter { name: "opaque"; type: "bool" }
        }
        Method {
            name: "setAlphaCutoffEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
    }
    Component {
        name: "Kuesa::GLTF2MaterialProperties"
        prototype: "Qt3DCore::QNode"
        exports: ["Kuesa/GLTF2MaterialProperties 1.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "textureTransform"; type: "QMatrix3x3" }
        Property { name: "baseColorUsesTexCoord1"; type: "bool" }
        Property { name: "baseColorFactor"; type: "QColor" }
        Property { name: "baseColorMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "alphaCutoff"; type: "float" }
        Signal {
            name: "baseColorUsesTexCoord1Changed"
            Parameter { type: "bool" }
        }
        Signal {
            name: "baseColorFactorChanged"
            Parameter { name: "baseColorFactor"; type: "QColor" }
        }
        Signal {
            name: "baseColorMapChanged"
            Parameter { name: "baseColorMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "alphaCutoffChanged"
            Parameter { name: "alphaCutoff"; type: "float" }
        }
        Signal {
            name: "textureTransformChanged"
            Parameter { name: "textureTransform"; type: "QMatrix3x3" }
        }
        Method {
            name: "setBaseColorUsesTexCoord1"
            Parameter { name: "baseColorUsesTexCoord1"; type: "bool" }
        }
        Method {
            name: "setBaseColorFactor"
            Parameter { name: "baseColorFactor"; type: "QColor" }
        }
        Method {
            name: "setBaseColorMap"
            Parameter { name: "baseColorMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setAlphaCutoff"
            Parameter { name: "alphaCutoff"; type: "float" }
        }
        Method {
            name: "setTextureTransform"
            Parameter { name: "textureTransform"; type: "QMatrix3x3" }
        }
    }
    Component {
        name: "Kuesa::GaussianBlurEffect"
        prototype: "Kuesa::AbstractPostProcessingEffect"
        exports: ["Kuesa.Effects/BlurEffect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "blurPassCount"; type: "int" }
        Signal {
            name: "blurPassCountChanged"
            Parameter { name: "blurPassCount"; type: "int" }
        }
        Method {
            name: "setBlurPassCount"
            Parameter { name: "blurPassCount"; type: "int" }
        }
    }
    Component {
        name: "Kuesa::IroDiffuseAlphaEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroDiffuseAlphaEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroDiffuseAlphaMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroDiffuseAlphaMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "materialProperties"
            type: "Kuesa::IroDiffuseAlphaProperties"
            isPointer: true
        }
        Signal {
            name: "materialPropertiesChanged"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroDiffuseAlphaProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroDiffuseAlphaProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroDiffuseAlphaProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroDiffuseAlphaProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "normalScaling"; type: "QVector3D" }
        Property { name: "normalDisturb"; type: "QVector2D" }
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "reflectionGain"; type: "float" }
        Property { name: "reflectionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "reflectionInnerFilter"; type: "QVector3D" }
        Property { name: "reflectionOuterFilter"; type: "QVector3D" }
        Property { name: "usesReflectionMap"; type: "bool" }
        Property { name: "projectReflectionMap"; type: "bool" }
        Property { name: "reflectionInnerAlpha"; type: "float" }
        Property { name: "reflectionOuterAlpha"; type: "float" }
        Property { name: "alphaGain"; type: "float" }
        Signal {
            name: "normalScalingChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "normalDisturbChanged"
            Parameter { type: "QVector2D" }
        }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "reflectionInnerFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "reflectionOuterFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "usesReflectionMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "projectReflectionMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "reflectionInnerAlphaChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionOuterAlphaChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "alphaGainChanged"
            Parameter { type: "float" }
        }
        Method {
            name: "setNormalScaling"
            Parameter { name: "normalScaling"; type: "QVector3D" }
        }
        Method {
            name: "setNormalDisturb"
            Parameter { name: "normalDisturb"; type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setReflectionGain"
            Parameter { name: "reflectionGain"; type: "float" }
        }
        Method {
            name: "setReflectionMap"
            Parameter { name: "reflectionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setReflectionInnerFilter"
            Parameter { name: "reflectionInnerFilter"; type: "QVector3D" }
        }
        Method {
            name: "setReflectionOuterFilter"
            Parameter { name: "reflectionOuterFilter"; type: "QVector3D" }
        }
        Method {
            name: "setUsesReflectionMap"
            Parameter { name: "usesReflectionMap"; type: "bool" }
        }
        Method {
            name: "setProjectReflectionMap"
            Parameter { name: "projectReflectionMap"; type: "bool" }
        }
        Method {
            name: "setReflectionInnerAlpha"
            Parameter { name: "reflectionInnerAlpha"; type: "float" }
        }
        Method {
            name: "setReflectionOuterAlpha"
            Parameter { name: "reflectionOuterAlpha"; type: "float" }
        }
        Method {
            name: "setAlphaGain"
            Parameter { name: "alphaGain"; type: "float" }
        }
    }
    Component {
        name: "Kuesa::IroDiffuseEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroDiffuseEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroDiffuseHemiEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroDiffuseHemiEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroDiffuseHemiMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroDiffuseHemiMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "materialProperties"
            type: "Kuesa::IroDiffuseHemiProperties"
            isPointer: true
        }
        Signal {
            name: "materialPropertiesChanged"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroDiffuseHemiProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroDiffuseHemiProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroDiffuseHemiProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroDiffuseHemiProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "normalScaling"; type: "QVector3D" }
        Property { name: "normalDisturb"; type: "QVector2D" }
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postHemiFilter"; type: "QVector3D" }
        Property { name: "postGain"; type: "float" }
        Property { name: "reflectionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "reflectionGain"; type: "float" }
        Property { name: "reflectionInnerFilter"; type: "QVector3D" }
        Property { name: "reflectionOuterFilter"; type: "QVector3D" }
        Property { name: "usesReflectionMap"; type: "bool" }
        Property { name: "projectReflectionMap"; type: "bool" }
        Property { name: "diffuseInnerFilter"; type: "QVector3D" }
        Property { name: "diffuseOuterFilter"; type: "QVector3D" }
        Property { name: "diffuseMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "diffuseGain"; type: "float" }
        Property { name: "usesDiffuseMap"; type: "bool" }
        Property { name: "gltfYUp"; type: "bool" }
        Signal {
            name: "normalScalingChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "normalDisturbChanged"
            Parameter { type: "QVector2D" }
        }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postHemiFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "reflectionGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionInnerFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "reflectionOuterFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "usesReflectionMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "projectReflectionMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "diffuseInnerFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "diffuseOuterFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "diffuseMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "diffuseGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "usesDiffuseMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "gltfYUpChanged"
            Parameter { type: "bool" }
        }
        Method {
            name: "setNormalScaling"
            Parameter { name: "normalScaling"; type: "QVector3D" }
        }
        Method {
            name: "setNormalDisturb"
            Parameter { name: "normalDisturb"; type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostHemiFilter"
            Parameter { name: "postHemiFilter"; type: "QVector3D" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setReflectionMap"
            Parameter { name: "reflectionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setReflectionGain"
            Parameter { name: "reflectionGain"; type: "float" }
        }
        Method {
            name: "setReflectionInnerFilter"
            Parameter { name: "reflectionInnerFilter"; type: "QVector3D" }
        }
        Method {
            name: "setReflectionOuterFilter"
            Parameter { name: "reflectionOuterFilter"; type: "QVector3D" }
        }
        Method {
            name: "setUsesReflectionMap"
            Parameter { name: "usesReflectionMap"; type: "bool" }
        }
        Method {
            name: "setProjectReflectionMap"
            Parameter { name: "projectReflectionMap"; type: "bool" }
        }
        Method {
            name: "setDiffuseInnerFilter"
            Parameter { name: "diffuseInnerFilter"; type: "QVector3D" }
        }
        Method {
            name: "setDiffuseOuterFilter"
            Parameter { name: "diffuseOuterFilter"; type: "QVector3D" }
        }
        Method {
            name: "setDiffuseMap"
            Parameter { name: "diffuseMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setDiffuseGain"
            Parameter { name: "diffuseGain"; type: "float" }
        }
        Method {
            name: "setUsesDiffuseMap"
            Parameter { name: "usesDiffuseMap"; type: "bool" }
        }
        Method {
            name: "setGltfYUp"
            Parameter { name: "gltfYUp"; type: "bool" }
        }
    }
    Component {
        name: "Kuesa::IroDiffuseMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroDiffuseMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "materialProperties"; type: "Kuesa::IroDiffuseProperties"; isPointer: true }
        Signal {
            name: "materialPropertiesChanged"
            Parameter { name: "materialProperties"; type: "Kuesa::IroDiffuseProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::IroDiffuseProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroDiffuseProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroDiffuseProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "normalScaling"; type: "QVector3D" }
        Property { name: "normalDisturb"; type: "QVector2D" }
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "reflectionGain"; type: "float" }
        Property { name: "reflectionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "reflectionInnerFilter"; type: "QVector3D" }
        Property { name: "reflectionOuterFilter"; type: "QVector3D" }
        Property { name: "usesReflectionMap"; type: "bool" }
        Property { name: "projectReflectionMap"; type: "bool" }
        Property { name: "diffuseInnerFilter"; type: "QVector3D" }
        Property { name: "diffuseOuterFilter"; type: "QVector3D" }
        Property { name: "diffuseMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "diffuseGain"; type: "float" }
        Property { name: "usesDiffuseMap"; type: "bool" }
        Signal {
            name: "normalScalingChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "normalDisturbChanged"
            Parameter { type: "QVector2D" }
        }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "reflectionInnerFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "reflectionOuterFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "usesReflectionMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "projectReflectionMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "diffuseInnerFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "diffuseOuterFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "diffuseMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "diffuseGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "usesDiffuseMapChanged"
            Parameter { type: "bool" }
        }
        Method {
            name: "setNormalScaling"
            Parameter { name: "normalScaling"; type: "QVector3D" }
        }
        Method {
            name: "setNormalDisturb"
            Parameter { name: "normalDisturb"; type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setReflectionGain"
            Parameter { name: "reflectionGain"; type: "float" }
        }
        Method {
            name: "setReflectionMap"
            Parameter { name: "reflectionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setReflectionInnerFilter"
            Parameter { name: "reflectionInnerFilter"; type: "QVector3D" }
        }
        Method {
            name: "setReflectionOuterFilter"
            Parameter { name: "reflectionOuterFilter"; type: "QVector3D" }
        }
        Method {
            name: "setUsesReflectionMap"
            Parameter { name: "usesReflectionMap"; type: "bool" }
        }
        Method {
            name: "setProjectReflectionMap"
            Parameter { name: "projectReflectionMap"; type: "bool" }
        }
        Method {
            name: "setDiffuseInnerFilter"
            Parameter { name: "diffuseInnerFilter"; type: "QVector3D" }
        }
        Method {
            name: "setDiffuseOuterFilter"
            Parameter { name: "diffuseOuterFilter"; type: "QVector3D" }
        }
        Method {
            name: "setDiffuseMap"
            Parameter { name: "diffuseMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setDiffuseGain"
            Parameter { name: "diffuseGain"; type: "float" }
        }
        Method {
            name: "setUsesDiffuseMap"
            Parameter { name: "usesDiffuseMap"; type: "bool" }
        }
    }
    Component {
        name: "Kuesa::IroGlassAddEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroGlassAddEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroGlassAddMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroGlassAddMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "materialProperties"; type: "Kuesa::IroGlassAddProperties"; isPointer: true }
        Signal {
            name: "materialPropertiesChanged"
            Parameter { name: "materialProperties"; type: "Kuesa::IroGlassAddProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::IroGlassAddProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroGlassAddProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroGlassAddProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "normalScaling"; type: "QVector3D" }
        Property { name: "normalDisturb"; type: "QVector2D" }
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "reflectionGain"; type: "float" }
        Property { name: "reflectionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "reflectionInnerFilter"; type: "QVector3D" }
        Property { name: "reflectionOuterFilter"; type: "QVector3D" }
        Property { name: "usesReflectionMap"; type: "bool" }
        Property { name: "projectReflectionMap"; type: "bool" }
        Property { name: "glassInnerFilter"; type: "QVector3D" }
        Property { name: "glassOuterFilter"; type: "QVector3D" }
        Property { name: "diffuseInnerFilter"; type: "QVector3D" }
        Property { name: "diffuseOuterFilter"; type: "QVector3D" }
        Signal {
            name: "normalScalingChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "normalDisturbChanged"
            Parameter { type: "QVector2D" }
        }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "reflectionMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "reflectionInnerFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "reflectionOuterFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "usesReflectionMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "projectReflectionMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "glassInnerFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "glassOuterFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "diffuseInnerFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "diffuseOuterFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Method {
            name: "setNormalScaling"
            Parameter { name: "normalScaling"; type: "QVector3D" }
        }
        Method {
            name: "setNormalDisturb"
            Parameter { name: "normalDisturb"; type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setReflectionGain"
            Parameter { name: "reflectionGain"; type: "float" }
        }
        Method {
            name: "setReflectionMap"
            Parameter { name: "reflectionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setReflectionInnerFilter"
            Parameter { name: "reflectionInnerFilter"; type: "QVector3D" }
        }
        Method {
            name: "setReflectionOuterFilter"
            Parameter { name: "reflectionOuterFilter"; type: "QVector3D" }
        }
        Method {
            name: "setUsesReflectionMap"
            Parameter { name: "usesReflectionMap"; type: "bool" }
        }
        Method {
            name: "setProjectReflectionMap"
            Parameter { name: "projectReflectionMap"; type: "bool" }
        }
        Method {
            name: "setGlassInnerFilter"
            Parameter { name: "glassInnerFilter"; type: "QVector3D" }
        }
        Method {
            name: "setGlassOuterFilter"
            Parameter { name: "glassOuterFilter"; type: "QVector3D" }
        }
        Method {
            name: "setDiffuseInnerFilter"
            Parameter { name: "diffuseInnerFilter"; type: "QVector3D" }
        }
        Method {
            name: "setDiffuseOuterFilter"
            Parameter { name: "diffuseOuterFilter"; type: "QVector3D" }
        }
    }
    Component {
        name: "Kuesa::IroMatteAddEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroMatteAddEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroMatteAddMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroMatteAddMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "materialProperties"; type: "Kuesa::IroMatteAddProperties"; isPointer: true }
        Signal {
            name: "materialPropertiesChanged"
            Parameter { name: "materialProperties"; type: "Kuesa::IroMatteAddProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::IroMatteAddProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroMatteAddProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroMatteAddProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "usesMatteMap"; type: "bool" }
        Property { name: "matteFilter"; type: "QVector3D" }
        Property { name: "matteGain"; type: "float" }
        Property { name: "uvOffset"; type: "QVector2D" }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "matteMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "usesMatteMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "matteFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "matteGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "uvOffsetChanged"
            Parameter { type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setMatteMap"
            Parameter { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setUsesMatteMap"
            Parameter { name: "usesMatteMap"; type: "bool" }
        }
        Method {
            name: "setMatteFilter"
            Parameter { name: "matteFilter"; type: "QVector3D" }
        }
        Method {
            name: "setMatteGain"
            Parameter { name: "matteGain"; type: "float" }
        }
        Method {
            name: "setUvOffset"
            Parameter { name: "uvOffset"; type: "QVector2D" }
        }
    }
    Component {
        name: "Kuesa::IroMatteAlphaEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroMatteAlphaEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroMatteAlphaMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroMatteAlphaMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "materialProperties"; type: "Kuesa::IroMatteAlphaProperties"; isPointer: true }
        Signal {
            name: "materialPropertiesChanged"
            Parameter { name: "materialProperties"; type: "Kuesa::IroMatteAlphaProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::IroMatteAlphaProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroMatteAlphaProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroMatteAlphaProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "usesMatteMap"; type: "bool" }
        Property { name: "matteFilter"; type: "QVector3D" }
        Property { name: "matteGain"; type: "float" }
        Property { name: "matteAlphaGain"; type: "float" }
        Property { name: "uvOffset"; type: "QVector2D" }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "matteMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "usesMatteMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "matteFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "matteGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "matteAlphaGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "uvOffsetChanged"
            Parameter { type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setMatteMap"
            Parameter { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setUsesMatteMap"
            Parameter { name: "usesMatteMap"; type: "bool" }
        }
        Method {
            name: "setMatteFilter"
            Parameter { name: "matteFilter"; type: "QVector3D" }
        }
        Method {
            name: "setMatteGain"
            Parameter { name: "matteGain"; type: "float" }
        }
        Method {
            name: "setMatteAlphaGain"
            Parameter { name: "matteAlphaGain"; type: "float" }
        }
        Method {
            name: "setUvOffset"
            Parameter { name: "uvOffset"; type: "QVector2D" }
        }
    }
    Component {
        name: "Kuesa::IroMatteBackgroundEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroMatteBackgroundEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroMatteBackgroundMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroMatteBackgroundMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "materialProperties"
            type: "Kuesa::IroMatteBackgroundProperties"
            isPointer: true
        }
        Signal {
            name: "materialPropertiesChanged"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroMatteBackgroundProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroMatteBackgroundProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroMatteBackgroundProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroMatteBackgroundProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "usesMatteMap"; type: "bool" }
        Property { name: "matteFilter"; type: "QVector3D" }
        Property { name: "matteGain"; type: "float" }
        Property { name: "uvOffset"; type: "QVector2D" }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "matteMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "usesMatteMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "matteFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "matteGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "uvOffsetChanged"
            Parameter { type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setMatteMap"
            Parameter { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setUsesMatteMap"
            Parameter { name: "usesMatteMap"; type: "bool" }
        }
        Method {
            name: "setMatteFilter"
            Parameter { name: "matteFilter"; type: "QVector3D" }
        }
        Method {
            name: "setMatteGain"
            Parameter { name: "matteGain"; type: "float" }
        }
        Method {
            name: "setUvOffset"
            Parameter { name: "uvOffset"; type: "QVector2D" }
        }
    }
    Component {
        name: "Kuesa::IroMatteMultEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroMatteMultEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroMatteMultMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroMatteMultMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "materialProperties"; type: "Kuesa::IroMatteMultProperties"; isPointer: true }
        Signal {
            name: "materialPropertiesChanged"
            Parameter { name: "materialProperties"; type: "Kuesa::IroMatteMultProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::IroMatteMultProperties"; isPointer: true }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroMatteMultProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroMatteMultProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "usesMatteMap"; type: "bool" }
        Property { name: "matteFilter"; type: "QVector3D" }
        Property { name: "matteGain"; type: "float" }
        Property { name: "uvOffset"; type: "QVector2D" }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "matteMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "usesMatteMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "matteFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "matteGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "uvOffsetChanged"
            Parameter { type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setMatteMap"
            Parameter { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setUsesMatteMap"
            Parameter { name: "usesMatteMap"; type: "bool" }
        }
        Method {
            name: "setMatteFilter"
            Parameter { name: "matteFilter"; type: "QVector3D" }
        }
        Method {
            name: "setMatteGain"
            Parameter { name: "matteGain"; type: "float" }
        }
        Method {
            name: "setUvOffset"
            Parameter { name: "uvOffset"; type: "QVector2D" }
        }
    }
    Component {
        name: "Kuesa::IroMatteOpaqueEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroMatteOpaqueEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroMatteOpaqueMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroMatteOpaqueMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "materialProperties"
            type: "Kuesa::IroMatteOpaqueProperties"
            isPointer: true
        }
        Signal {
            name: "materialPropertiesChanged"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroMatteOpaqueProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroMatteOpaqueProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroMatteOpaqueProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroMatteOpaqueProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "usesMatteMap"; type: "bool" }
        Property { name: "matteFilter"; type: "QVector3D" }
        Property { name: "matteGain"; type: "float" }
        Property { name: "uvOffset"; type: "QVector2D" }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "matteMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "usesMatteMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "matteFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "matteGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "uvOffsetChanged"
            Parameter { type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setMatteMap"
            Parameter { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setUsesMatteMap"
            Parameter { name: "usesMatteMap"; type: "bool" }
        }
        Method {
            name: "setMatteFilter"
            Parameter { name: "matteFilter"; type: "QVector3D" }
        }
        Method {
            name: "setMatteGain"
            Parameter { name: "matteGain"; type: "float" }
        }
        Method {
            name: "setUvOffset"
            Parameter { name: "uvOffset"; type: "QVector2D" }
        }
    }
    Component {
        name: "Kuesa::IroMatteSkyboxEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa.Iro/IroMatteSkyboxEffect 1.2"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Kuesa::IroMatteSkyboxMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa.Iro/IroMatteSkyboxMaterial 1.2"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "materialProperties"
            type: "Kuesa::IroMatteSkyboxProperties"
            isPointer: true
        }
        Signal {
            name: "materialPropertiesChanged"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroMatteSkyboxProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::IroMatteSkyboxProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter { name: "materialProperties"; type: "Kuesa::GLTF2MaterialProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::IroMatteSkyboxProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa.Iro/IroMatteSkyboxProperties 1.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "postVertexColor"; type: "float" }
        Property { name: "postGain"; type: "float" }
        Property { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "usesMatteMap"; type: "bool" }
        Property { name: "matteFilter"; type: "QVector3D" }
        Property { name: "matteGain"; type: "float" }
        Property { name: "uvOffset"; type: "QVector2D" }
        Signal {
            name: "postVertexColorChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "postGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "matteMapChanged"
            Parameter { type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "usesMatteMapChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "matteFilterChanged"
            Parameter { type: "QVector3D" }
        }
        Signal {
            name: "matteGainChanged"
            Parameter { type: "float" }
        }
        Signal {
            name: "uvOffsetChanged"
            Parameter { type: "QVector2D" }
        }
        Method {
            name: "setPostVertexColor"
            Parameter { name: "postVertexColor"; type: "float" }
        }
        Method {
            name: "setPostGain"
            Parameter { name: "postGain"; type: "float" }
        }
        Method {
            name: "setMatteMap"
            Parameter { name: "matteMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setUsesMatteMap"
            Parameter { name: "usesMatteMap"; type: "bool" }
        }
        Method {
            name: "setMatteFilter"
            Parameter { name: "matteFilter"; type: "QVector3D" }
        }
        Method {
            name: "setMatteGain"
            Parameter { name: "matteGain"; type: "float" }
        }
        Method {
            name: "setUvOffset"
            Parameter { name: "uvOffset"; type: "QVector2D" }
        }
    }
    Component {
        name: "Kuesa::LayerCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/LayerCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DRender::QLayer*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::MaterialCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/MaterialCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Kuesa::GLTF2MaterialProperties*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::MeshCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/MeshCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DRender::QGeometryRenderer*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::MetallicRoughnessEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: [
            "Kuesa/MetallicRoughnessEffect 1.0",
            "Kuesa/MetallicRoughnessEffect 1.1"
        ]
        exportMetaObjectRevisions: [0, 1]
        Property { name: "baseColorMapEnabled"; type: "bool" }
        Property { name: "metalRoughMapEnabled"; type: "bool" }
        Property { name: "normalMapEnabled"; type: "bool" }
        Property { name: "ambientOcclusionMapEnabled"; type: "bool" }
        Property { name: "emissiveMapEnabled"; type: "bool" }
        Property { name: "usingColorAttribute"; type: "bool" }
        Property { name: "brdfLUT"; revision: 1; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Signal {
            name: "baseColorMapEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "metalRoughMapEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "normalMapEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "ambientOcclusionMapEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "emissiveMapEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "usingColorAttributeChanged"
            Parameter { name: "usingColorAttribute"; type: "bool" }
        }
        Signal {
            name: "brdfLUTChanged"
            Parameter { name: "brdfLUT"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setBaseColorMapEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setMetalRoughMapEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setNormalMapEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setAmbientOcclusionMapEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setEmissiveMapEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setUsingColorAttribute"
            Parameter { name: "usingColorAttribute"; type: "bool" }
        }
        Method {
            name: "setBrdfLUT"
            Parameter { name: "brdfLUT"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::MetallicRoughnessMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: [
            "Kuesa/MetallicRoughnessMaterial 1.0",
            "Kuesa/MetallicRoughnessMaterial 1.1"
        ]
        exportMetaObjectRevisions: [0, 1]
        Property {
            name: "materialProperties"
            type: "Kuesa::MetallicRoughnessProperties"
            isPointer: true
        }
        Signal {
            name: "materialPropertiesChanged"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::MetallicRoughnessProperties"
                isPointer: true
            }
        }
        Method {
            name: "setMaterialProperties"
            Parameter {
                name: "materialProperties"
                type: "Kuesa::MetallicRoughnessProperties"
                isPointer: true
            }
        }
    }
    Component {
        name: "Kuesa::MetallicRoughnessProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa/MetallicRoughnessProperties 1.1"]
        exportMetaObjectRevisions: [1]
        Property { name: "metallicRoughnessUsesTexCoord1"; type: "bool" }
        Property { name: "normalUsesTexCoord1"; type: "bool" }
        Property { name: "aoUsesTexCoord1"; type: "bool" }
        Property { name: "emissiveUsesTexCoord1"; type: "bool" }
        Property { name: "metallicFactor"; type: "float" }
        Property { name: "roughnessFactor"; type: "float" }
        Property { name: "metalRoughMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "normalScale"; type: "float" }
        Property { name: "normalMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "ambientOcclusionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "emissiveFactor"; type: "QColor" }
        Property { name: "emissiveMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Signal {
            name: "metallicRoughnessUsesTexCoord1Changed"
            Parameter { type: "bool" }
        }
        Signal {
            name: "normalUsesTexCoord1Changed"
            Parameter { type: "bool" }
        }
        Signal {
            name: "aoUsesTexCoord1Changed"
            Parameter { type: "bool" }
        }
        Signal {
            name: "emissiveUsesTexCoord1Changed"
            Parameter { type: "bool" }
        }
        Signal {
            name: "metallicFactorChanged"
            Parameter { name: "metallicFactor"; type: "float" }
        }
        Signal {
            name: "roughnessFactorChanged"
            Parameter { name: "roughnessFactor"; type: "float" }
        }
        Signal {
            name: "metalRoughMapChanged"
            Parameter { name: "metalRoughMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "normalScaleChanged"
            Parameter { name: "normalScale"; type: "float" }
        }
        Signal {
            name: "normalMapChanged"
            Parameter { name: "normalMapChanged"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "ambientOcclusionMapChanged"
            Parameter { name: "ambientOcclusionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveFactorChanged"
            Parameter { name: "emissiveFactor"; type: "QColor" }
        }
        Signal {
            name: "emissiveMapChanged"
            Parameter { name: "emissiveMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setMetallicRoughnessUsesTexCoord1"
            Parameter { name: "metallicRoughnessUsesTexCoord1"; type: "bool" }
        }
        Method {
            name: "setNormalUsesTexCoord1"
            Parameter { name: "normalUsesTexCoord1"; type: "bool" }
        }
        Method {
            name: "setAOUsesTexCoord1"
            Parameter { name: "aoUsesTexCoord1"; type: "bool" }
        }
        Method {
            name: "setEmissiveUsesTexCoord1"
            Parameter { name: "emissiveUsesTexCoord1"; type: "bool" }
        }
        Method {
            name: "setMetallicFactor"
            Parameter { name: "metallicFactor"; type: "float" }
        }
        Method {
            name: "setRoughnessFactor"
            Parameter { name: "roughnessFactor"; type: "float" }
        }
        Method {
            name: "setMetalRoughMap"
            Parameter { name: "metalRoughMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setNormalScale"
            Parameter { name: "normalScale"; type: "float" }
        }
        Method {
            name: "setNormalMap"
            Parameter { name: "normalMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setAmbientOcclusionMap"
            Parameter { name: "ambientOcclusionMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveFactor"
            Parameter { name: "emissiveFactor"; type: "QColor" }
        }
        Method {
            name: "setEmissiveMap"
            Parameter { name: "emissiveMap"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::OpacityMask"
        prototype: "Kuesa::AbstractPostProcessingEffect"
        exports: ["Kuesa.Effects/OpacityMask 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "mask"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        Property { name: "premultipliedAlpha"; type: "bool" }
        Signal {
            name: "maskChanged"
            Parameter { name: "mask"; type: "Qt3DRender::QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "premultipliedAlphaChanged"
            Parameter { name: "premultipliedAlpha"; type: "bool" }
        }
    }
    Component {
        name: "Kuesa::PointLight"
        prototype: "Qt3DRender::QAbstractLight"
        exports: ["Kuesa/PointLight 1.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "range"; type: "float" }
        Signal {
            name: "rangeChanged"
            Parameter { name: "range"; type: "float" }
        }
        Method {
            name: "setRange"
            Parameter { name: "range"; type: "float" }
        }
    }
    Component {
        name: "Kuesa::SceneEntity"
        prototype: "Qt3DCore::QEntity"
        exports: ["Kuesa/SceneEntity 1.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "animationClips"
            type: "Kuesa::AnimationClipCollection"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "armatures"
            type: "Kuesa::ArmatureCollection"
            isReadonly: true
            isPointer: true
        }
        Property { name: "layers"; type: "Kuesa::LayerCollection"; isReadonly: true; isPointer: true }
        Property {
            name: "materials"
            type: "Kuesa::MaterialCollection"
            isReadonly: true
            isPointer: true
        }
        Property { name: "meshes"; type: "Kuesa::MeshCollection"; isReadonly: true; isPointer: true }
        Property {
            name: "skeletons"
            type: "Kuesa::SkeletonCollection"
            isReadonly: true
            isPointer: true
        }
        Property { name: "textures"; type: "Kuesa::TextureCollection"; isReadonly: true; isPointer: true }
        Property { name: "cameras"; type: "Kuesa::CameraCollection"; isReadonly: true; isPointer: true }
        Property { name: "entities"; type: "Kuesa::EntityCollection"; isReadonly: true; isPointer: true }
        Property {
            name: "textureImages"
            type: "Kuesa::TextureImageCollection"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "animationMappings"
            type: "Kuesa::AnimationMappingCollection"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "brdfLut"
            type: "Qt3DRender::QAbstractTexture"
            isReadonly: true
            isPointer: true
        }
        Property { name: "lights"; type: "Kuesa::LightCollection"; isReadonly: true; isPointer: true }
        Property {
            name: "transforms"
            revision: 2
            type: "Kuesa::TransformCollection"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "loadingDone" }
        Method {
            name: "animationClip"
            type: "Qt3DAnimation::QAbstractAnimationClip*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "armature"
            type: "Qt3DCore::QArmature*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "effect"
            type: "Qt3DRender::QEffect*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "effect"
            type: "Qt3DRender::QEffect*"
            Parameter { name: "effectPropertyFlags"; type: "int" }
        }
        Method {
            name: "layer"
            type: "Qt3DRender::QLayer*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "material"
            type: "Kuesa::GLTF2MaterialProperties*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "mesh"
            type: "Qt3DRender::QGeometryRenderer*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "skeleton"
            type: "Qt3DCore::QAbstractSkeleton*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "texture"
            type: "Qt3DRender::QAbstractTexture*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "camera"
            type: "Qt3DRender::QCamera*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "entity"
            type: "Qt3DCore::QEntity*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "transform"
            revision: 2
            type: "Qt3DCore::QTransform*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "textureImage"
            type: "Qt3DRender::QAbstractTextureImage*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "animationMapping"
            type: "Qt3DAnimation::QChannelMapper*"
            Parameter { name: "name"; type: "string" }
        }
        Method { name: "clearCollections" }
        Method {
            name: "transformForEntity"
            type: "Qt3DCore::QNode*"
            Parameter { name: "name"; type: "string" }
        }
        Method { name: "brdfLut"; type: "Qt3DRender::QAbstractTexture*" }
        Method {
            name: "findParentSceneEntity"
            type: "Kuesa::SceneEntity*"
            Parameter { name: "entity"; type: "Qt3DCore::QEntity"; isPointer: true }
        }
        Method {
            name: "light"
            type: "Qt3DRender::QAbstractLight*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::SkeletonCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/SkeletonCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DCore::QAbstractSkeleton*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::Skybox"
        prototype: "Qt3DCore::QEntity"
        exports: ["Kuesa/Skybox 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "baseName"; type: "string" }
        Property { name: "extension"; type: "string" }
        Signal {
            name: "baseNameChanged"
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "extensionChanged"
            Parameter { name: "extension"; type: "string" }
        }
        Method {
            name: "setBaseName"
            Parameter { name: "baseName"; type: "string" }
        }
        Method {
            name: "setExtension"
            Parameter { name: "extension"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::SpotLight"
        prototype: "Qt3DRender::QAbstractLight"
        exports: ["Kuesa/SpotLight 1.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "localDirection"; type: "QVector3D" }
        Property { name: "innerConeAngle"; type: "float" }
        Property { name: "outerConeAngle"; type: "float" }
        Property { name: "range"; type: "float" }
        Signal {
            name: "localDirectionChanged"
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Signal {
            name: "innerConeAngleChanged"
            Parameter { name: "innerConeAngle"; type: "float" }
        }
        Signal {
            name: "outerConeAngleChanged"
            Parameter { name: "outerConeAngle"; type: "float" }
        }
        Signal {
            name: "rangeChanged"
            Parameter { name: "range"; type: "float" }
        }
        Method {
            name: "setLocalDirection"
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Method {
            name: "setInnerConeAngle"
            Parameter { name: "innerConeAngle"; type: "float" }
        }
        Method {
            name: "setOuterConeAngle"
            Parameter { name: "outerConeAngle"; type: "float" }
        }
        Method {
            name: "setRange"
            Parameter { name: "range"; type: "float" }
        }
    }
    Component {
        name: "Kuesa::TextureCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/TextureCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DRender::QAbstractTexture*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::TextureImageCollection"
        prototype: "Kuesa::AbstractAssetCollection"
        exports: ["Kuesa/TextureImageCollection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "find"
            type: "Qt3DRender::QAbstractTextureImage*"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "Kuesa::ThresholdEffect"
        prototype: "Kuesa::AbstractPostProcessingEffect"
        exports: ["Kuesa.Effects/ThresholdEffect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "threshold"; type: "float" }
        Signal {
            name: "thresholdChanged"
            Parameter { name: "threshold"; type: "float" }
        }
        Method {
            name: "setThreshold"
            Parameter { name: "threshold"; type: "float" }
        }
    }
    Component {
        name: "Kuesa::ToneMappingAndGammaCorrectionEffect"
        prototype: "Kuesa::AbstractPostProcessingEffect"
        exports: ["Kuesa.Effects/ToneMappingAndGammaCorrectionEffect 1.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ToneMapping"
            values: {
                "None": 0,
                "Reinhard": 1,
                "Filmic": 2,
                "Uncharted": 3
            }
        }
        Property { name: "exposure"; type: "float" }
        Property { name: "gamma"; type: "float" }
        Property {
            name: "toneMappingAlgorithm"
            revision: 1
            type: "Kuesa::ToneMappingAndGammaCorrectionEffect::ToneMapping"
        }
        Signal {
            name: "exposureChanged"
            Parameter { name: "exposure"; type: "float" }
        }
        Signal {
            name: "gammaChanged"
            Parameter { name: "gamma"; type: "float" }
        }
        Signal {
            name: "toneMappingAlgorithmChanged"
            Parameter {
                name: "toneMappingAlgorithm"
                type: "Kuesa::ToneMappingAndGammaCorrectionEffect::ToneMapping"
            }
        }
        Method {
            name: "setExposure"
            Parameter { name: "exposure"; type: "float" }
        }
        Method {
            name: "setGamma"
            Parameter { name: "gamma"; type: "float" }
        }
        Method {
            name: "setToneMappingAlgorithm"
            Parameter {
                name: "toneMappingAlgorithm"
                type: "Kuesa::ToneMappingAndGammaCorrectionEffect::ToneMapping"
            }
        }
    }
    Component {
        name: "Kuesa::UnlitEffect"
        prototype: "Kuesa::GLTF2MaterialEffect"
        exports: ["Kuesa/UnlitEffect 1.1"]
        exportMetaObjectRevisions: [1]
        Property { name: "baseColorMapEnabled"; type: "bool" }
        Property { name: "usingColorAttribute"; type: "bool" }
        Signal {
            name: "baseColorMapEnabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "usingColorAttributeChanged"
            Parameter { name: "usingColorAttribute"; type: "bool" }
        }
        Method {
            name: "setBaseColorMapEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setUsingColorAttribute"
            Parameter { name: "usingColorAttribute"; type: "bool" }
        }
    }
    Component {
        name: "Kuesa::UnlitMaterial"
        prototype: "Kuesa::GLTF2Material"
        exports: ["Kuesa/UnlitMaterial 1.1"]
        exportMetaObjectRevisions: [1]
        Property { name: "materialProperties"; type: "Kuesa::UnlitProperties"; isPointer: true }
        Signal {
            name: "materialPropertiesChanged"
            Parameter { name: "properties"; type: "Kuesa::UnlitProperties"; isPointer: true }
        }
    }
    Component {
        name: "Kuesa::UnlitProperties"
        prototype: "Kuesa::GLTF2MaterialProperties"
        exports: ["Kuesa/UnlitProperties 1.1"]
        exportMetaObjectRevisions: [1]
    }
    Component {
        name: "Qt3DCore::QComponent"
        prototype: "Qt3DCore::QNode"
        Property { name: "isShareable"; type: "bool" }
        Signal {
            name: "shareableChanged"
            Parameter { name: "isShareable"; type: "bool" }
        }
        Signal {
            name: "addedToEntity"
            Parameter { name: "entity"; type: "QEntity"; isPointer: true }
        }
        Signal {
            name: "removedFromEntity"
            Parameter { name: "entity"; type: "QEntity"; isPointer: true }
        }
        Method {
            name: "setShareable"
            Parameter { name: "isShareable"; type: "bool" }
        }
    }
    Component { name: "Qt3DCore::QEntity"; prototype: "Qt3DCore::QNode" }
    Component {
        name: "Qt3DCore::QNode"
        prototype: "QObject"
        Enum {
            name: "PropertyTrackingMode"
            values: {
                "TrackFinalValues": 0,
                "DontTrackValues": 1,
                "TrackAllValues": 2
            }
        }
        Property { name: "parent"; type: "Qt3DCore::QNode"; isPointer: true }
        Property { name: "enabled"; type: "bool" }
        Property { name: "defaultPropertyTrackingMode"; revision: 9; type: "PropertyTrackingMode" }
        Signal {
            name: "parentChanged"
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "enabledChanged"
            Parameter { name: "enabled"; type: "bool" }
        }
        Signal {
            name: "defaultPropertyTrackingModeChanged"
            Parameter { name: "mode"; type: "PropertyTrackingMode" }
        }
        Signal { name: "nodeDestroyed" }
        Method {
            name: "setParent"
            Parameter { name: "parent"; type: "QNode"; isPointer: true }
        }
        Method {
            name: "setEnabled"
            Parameter { name: "isEnabled"; type: "bool" }
        }
        Method {
            name: "setDefaultPropertyTrackingMode"
            Parameter { name: "mode"; type: "PropertyTrackingMode" }
        }
    }
    Component {
        name: "Qt3DRender::QAbstractLight"
        prototype: "Qt3DCore::QComponent"
        Enum {
            name: "Type"
            values: {
                "PointLight": 0,
                "DirectionalLight": 1,
                "SpotLight": 2
            }
        }
        Property { name: "type"; type: "Type"; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "intensity"; type: "float" }
        Signal {
            name: "colorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "intensityChanged"
            Parameter { name: "intensity"; type: "float" }
        }
        Method {
            name: "setColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "setIntensity"
            Parameter { name: "intensity"; type: "float" }
        }
    }
    Component { name: "Qt3DRender::QEffect"; prototype: "Qt3DCore::QNode" }
    Component { name: "Qt3DRender::QFrameGraphNode"; prototype: "Qt3DCore::QNode" }
    Component {
        name: "Qt3DRender::QMaterial"
        prototype: "Qt3DCore::QComponent"
        Property { name: "effect"; type: "Qt3DRender::QEffect"; isPointer: true }
        Signal {
            name: "effectChanged"
            Parameter { name: "effect"; type: "QEffect"; isPointer: true }
        }
        Method {
            name: "setEffect"
            Parameter { name: "effect"; type: "QEffect"; isPointer: true }
        }
    }
    Component {
        name: "Qt3DRender::QRenderSurfaceSelector"
        prototype: "Qt3DRender::QFrameGraphNode"
        Property { name: "surface"; type: "QObject"; isPointer: true }
        Property { name: "externalRenderTargetSize"; type: "QSize" }
        Property { name: "surfacePixelRatio"; type: "float" }
        Signal {
            name: "surfaceChanged"
            Parameter { name: "surface"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "externalRenderTargetSizeChanged"
            Parameter { name: "size"; type: "QSize" }
        }
        Signal {
            name: "surfacePixelRatioChanged"
            Parameter { name: "ratio"; type: "float" }
        }
        Method {
            name: "setSurface"
            Parameter { name: "surfaceObject"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "setSurfacePixelRatio"
            Parameter { name: "ratio"; type: "float" }
        }
        Method {
            name: "setExternalRenderTargetSize"
            Parameter { name: "size"; type: "QSize" }
        }
    }
}
