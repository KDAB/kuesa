{
    "type": "Iro2PlanarReflectionEquiRect",
    "doc": "is a material dedicated to rendering reflection textures generated by \\l ReflectionPlane defined on either a \\l {ForwardRenderer} or \\l View. This variant uses a real normal map and equi-rectangular projection.",
    "properties": [
        { "name": "reflectionMap", "type": "texture2d", "doc": "Specifies the planar reflection texture to render." },
        { "name": "reflectionPlane", "type": "vec4", "doc": "Specifies the equation of the reflection plane."},

        { "name": "reflectionGain", "type": "float", "doc": "Specifies the gain factor to be applied to the spherical environment map lookup." },
        { "name": "reflectionInnerFilter", "type": "vec3", "doc": "Specifies the inner color filter to be applied based on fresnel on the spherical environment map lookup." },
        { "name": "reflectionOuterFilter", "type": "vec3", "doc": "Specifies the outer color filter to be applied based on fresnel on the spherical environment map lookup." },

        { "name": "innerAlpha", "type": "float", "doc": "Specifies the inner alpha factor to be applied." },
        { "name": "outerAlpha", "type": "float", "doc": "Specifies the outer alpha factor to be applied." },
        { "name": "alphaGain", "type": "float", "doc": "Specifies the overall gain factor to apply to the alpha channel." },

        { "name": "usesNormalMap", "type": "bool", "doc": "Specifies whether we use a normal map or not." },
        { "name": "normalMap", "type": "texture2d", "doc": "Specifies the normal map to use." },
        { "name": "normalMapGain", "type": "float", "doc": "Specifies the strength of the normal map." },

        { "name": "normalScaling", "type": "vec3", "doc": "Specifies a factor to be applied to the normal." },
        { "name": "normalDisturb", "type": "vec2", "doc": "Specifies a disturbance factor that will be added to the normal" },

        { "name": "postVertexColor", "type": "float", "doc": "Specifies the factor which controls how much of the per vertex color we want to transmit." },
        { "name": "postGain", "type": "float", "doc": "Specifies the gain factor to be applied to the final result." },

        { "name": "gltfYUp", "type": "bool", "doc": "Specifies whether this material should consider the Y and Z axis as being inverted." }
    ],
    "passes": [
        {
            "type": "Transparent",
            "blending": {
                "function": "Add",
                "sourceRGB": "SourceAlpha",
                "sourceAlpha": "SourceAlpha",
                "destinationRGB": "OneMinusSourceAlpha",
                "destinationAlpha": "One"
            },
            "shaders": [
                {
                    "format": { "api": "OpenGLES", "major": 2, "minor": 0 },
                    "type": "Vertex",
                    "graph": "qrc:/kuesa/shaders/graphs/metallicroughness.vert.json"
                },
                {
                    "format": { "api": "OpenGLES", "major": 3, "minor": 0 },
                    "type": "Vertex",
                    "graph": "qrc:/kuesa/shaders/graphs/metallicroughness.vert.json"
                },
                {
                    "format": { "api": "OpenGL", "major": 3, "minor": 2 },
                    "type": "Vertex",
                    "graph": "qrc:/kuesa/shaders/graphs/metallicroughness.vert.json"
                },
                {
                    "format": { "api": "RHI", "major": 1, "minor": 0 },
                    "type": "Vertex",
                    "graph": "qrc:/kuesa/shaders/graphs/metallicroughness.vert.json"
                },
                {
                    "format": { "api": "OpenGLES", "major": 2, "minor": 0 },
                    "type": "Fragment",
                    "graph": "qrc:/kuesa/shaders/graphs/iro2planarreflectionequirect.frag.json"
                },
                {
                    "format": { "api": "OpenGLES", "major": 3, "minor": 0 },
                    "type": "Fragment",
                    "graph": "qrc:/kuesa/shaders/graphs/iro2planarreflectionequirect.frag.json"
                },
                {
                    "format": { "api": "OpenGL", "major": 3, "minor": 2 },
                    "type": "Fragment",
                    "graph": "qrc:/kuesa/shaders/graphs/iro2planarreflectionequirect.frag.json"
                },
                {
                    "format": { "api": "RHI", "major": 1, "minor": 0 },
                    "type": "Fragment",
                    "graph": "qrc:/kuesa/shaders/graphs/iro2planarreflectionequirect.frag.json"
                }
            ]
        }
    ]
}
