{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ec734174-3c11-4a55-a20f-03313d0853fe}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{8576acd3-8640-447f-bf81-a79afd4d331a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7be80ac8-4938-4ad8-b14a-bf5746a83fc9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{95a7df4c-188c-4e18-87e2-d2a5a2e2fb46}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{6e407903-7d82-4de4-856a-9c6c0f6d7071}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{6ad189e4-bfa5-490d-b5a9-dfab4081a05c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2735747d-d875-46c7-990e-44b48da8d9a1}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{7edef261-f29a-413b-99b5-b77541ec0cbe}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{24286fbb-9c94-4a62-ad04-046f85acae78}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8dd59263-46ff-4704-abf1-644f9d314805}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c63c6d53-b10b-494f-8482-d0f28a252b67}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{68645d6d-b768-481a-81fa-49024ef28b58}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{0385a8a9-61f3-4ceb-afcc-5ee8a1cc2c94}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{6af1dcf7-2181-4a4e-b1f2-0953e5867c7d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{652aafb8-be4d-48ea-b857-90b8c532a7b0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{7cd29f96-2b13-45d0-8b01-edee951b1c03}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{b09f5bb3-6940-4c9c-ae02-2261219c3bad}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4df7dbe4-d2e8-43d3-a3c3-209c19b115de}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{117b50a1-3382-4e69-b9e2-0ecab7a8f098}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{33523127-c1bb-4750-b6d8-16401f411d29}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{4564a54d-808f-434a-945a-ffd739e82222}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9fae8e07-a912-49b5-9fef-7d55c9c0294f}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{94fa3883-089c-4ca9-80e9-41c605593366}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{63fd2f30-42e5-4f1d-b8ff-b866fec28316}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VEC3_TO_VEC2",
   "uuid": "{a8f89fde-a9ac-4ffd-bbf4-66373173a604}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b029928d-ac62-44db-9542-2f357d9ba5e7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VEC3_TO_VEC2",
   "uuid": "{3456ded5-2442-436e-8938-060ba3d25bad}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "matteMap",
    "condition": "usesMatteMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{3270a29a-e453-4895-bd37-27d661fd281a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{f7329082-919f-4118-9c6e-7a56b53c2ab7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{4945f4b7-399d-490a-b773-c4d6b6a78f13}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{db9fae84-3be4-4199-9c30-23cf2ae2e3a3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a2a0616a-4be2-47d9-b0e3-e9a8dee0f033}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fce7f03c-2fa4-43b7-a5c0-09cfa19253b3}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{5220db1f-0f09-42e5-9e34-30f25768511f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{123a104a-44ab-4249-ab24-74c34251ce30}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0a802536-2446-43c7-9cac-a8080c1db7c3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{60e6224b-6438-4fad-ab30-13272dcd4808}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{69bcdb71-ef1a-40fb-8400-f868c365b624}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{613f8b86-a000-4a3a-af24-c57fd1ac9f01}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1, 1, -1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{b1404d50-b4aa-42a5-b112-84b2376576b7}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "inverseViewMatrix",
    "preFactor": "vec3(1, 1, -1)",
    "postFactor": "vec3(1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{c1a67f30-63c6-499d-a248-96e6c182bdd2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "max",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_FUNCTION",
   "uuid": "{2178d31a-7005-4179-9338-7232e4780ff9}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{0b1b6325-77ac-4b4e-8ec0-a26663dff430}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{81939f7b-72f8-4593-a67c-2bdf1789b15d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{f4aa495c-c298-499a-9850-7a3f3fadbc9f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{edbe38d1-6b7b-4b23-98e9-97dd75ca72ac}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{c0deec7a-c767-4b49-b8f9-ed9ba32d02f0}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{14f6cf02-aaa2-431b-a165-3a1340fb2019}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a014c37b-db3e-4332-8e11-c51876349238}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{230ff535-697a-4487-b816-2869b25ca8b5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "2.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{a275c619-0e82-43f0-a33c-13cdf540f397}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b3cf4b7a-074c-49b7-8c42-4639315b9cee}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{eba17c61-096e-4489-8ecb-7369adfa9a06}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{93b7e5a4-01ce-4f78-9eab-4ff4730b180a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{77e5e7fe-ea85-45a5-8d13-29ea4054c843}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{538a3631-c1a1-43ad-a241-b4e494ddc8d9}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "matteInnerFilter",
   "targetUuid": "{7edef261-f29a-413b-99b5-b77541ec0cbe}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "matteOuterFilter",
   "targetUuid": "{7edef261-f29a-413b-99b5-b77541ec0cbe}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{7edef261-f29a-413b-99b5-b77541ec0cbe}",
   "sourcePort": "mixed",
   "targetUuid": "{7be80ac8-4938-4ad8-b14a-bf5746a83fc9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7be80ac8-4938-4ad8-b14a-bf5746a83fc9}",
   "sourcePort": "output0",
   "targetUuid": "{ec734174-3c11-4a55-a20f-03313d0853fe}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ec734174-3c11-4a55-a20f-03313d0853fe}",
   "sourcePort": "output0",
   "targetUuid": "{63fd2f30-42e5-4f1d-b8ff-b866fec28316}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{63fd2f30-42e5-4f1d-b8ff-b866fec28316}",
   "sourcePort": "output0",
   "targetUuid": "{c63c6d53-b10b-494f-8482-d0f28a252b67}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "matteGain",
   "targetUuid": "{ec734174-3c11-4a55-a20f-03313d0853fe}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f7329082-919f-4118-9c6e-7a56b53c2ab7}",
   "sourcePort": "normal",
   "targetUuid": "{b1404d50-b4aa-42a5-b112-84b2376576b7}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{60e6224b-6438-4fad-ab30-13272dcd4808}",
   "sourcePort": "output0",
   "targetUuid": "{69bcdb71-ef1a-40fb-8400-f868c365b624}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0a802536-2446-43c7-9cac-a8080c1db7c3}",
   "sourcePort": "output0",
   "targetUuid": "{69bcdb71-ef1a-40fb-8400-f868c365b624}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{69bcdb71-ef1a-40fb-8400-f868c365b624}",
   "sourcePort": "output0",
   "targetUuid": "{613f8b86-a000-4a3a-af24-c57fd1ac9f01}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8576acd3-8640-447f-bf81-a79afd4d331a}",
   "sourcePort": "z",
   "targetUuid": "{8dd59263-46ff-4704-abf1-644f9d314805}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8dd59263-46ff-4704-abf1-644f9d314805}",
   "sourcePort": "output0",
   "targetUuid": "{24286fbb-9c94-4a62-ad04-046f85acae78}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8dd59263-46ff-4704-abf1-644f9d314805}",
   "sourcePort": "output0",
   "targetUuid": "{24286fbb-9c94-4a62-ad04-046f85acae78}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{24286fbb-9c94-4a62-ad04-046f85acae78}",
   "sourcePort": "output0",
   "targetUuid": "{7edef261-f29a-413b-99b5-b77541ec0cbe}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{6e407903-7d82-4de4-856a-9c6c0f6d7071}",
   "sourcePort": "color",
   "targetUuid": "{6ad189e4-bfa5-490d-b5a9-dfab4081a05c}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{6ad189e4-bfa5-490d-b5a9-dfab4081a05c}",
   "sourcePort": "mixed",
   "targetUuid": "{95a7df4c-188c-4e18-87e2-d2a5a2e2fb46}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{6ad189e4-bfa5-490d-b5a9-dfab4081a05c}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "postGain",
   "targetUuid": "{95a7df4c-188c-4e18-87e2-d2a5a2e2fb46}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{95a7df4c-188c-4e18-87e2-d2a5a2e2fb46}",
   "sourcePort": "output0",
   "targetUuid": "{c63c6d53-b10b-494f-8482-d0f28a252b67}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "innerAlpha",
   "targetUuid": "{4564a54d-808f-434a-945a-ffd739e82222}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "outerAlpha",
   "targetUuid": "{4564a54d-808f-434a-945a-ffd739e82222}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{24286fbb-9c94-4a62-ad04-046f85acae78}",
   "sourcePort": "output0",
   "targetUuid": "{4564a54d-808f-434a-945a-ffd739e82222}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{4564a54d-808f-434a-945a-ffd739e82222}",
   "sourcePort": "mixed",
   "targetUuid": "{94fa3883-089c-4ca9-80e9-41c605593366}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{94fa3883-089c-4ca9-80e9-41c605593366}",
   "sourcePort": "output0",
   "targetUuid": "{2735747d-d875-46c7-990e-44b48da8d9a1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "alphaGain",
   "targetUuid": "{2735747d-d875-46c7-990e-44b48da8d9a1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6af1dcf7-2181-4a4e-b1f2-0953e5867c7d}",
   "sourcePort": "shader",
   "targetUuid": "{0385a8a9-61f3-4ceb-afcc-5ee8a1cc2c94}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "normalScaling",
   "targetUuid": "{60e6224b-6438-4fad-ab30-13272dcd4808}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2735747d-d875-46c7-990e-44b48da8d9a1}",
   "sourcePort": "output0",
   "targetUuid": "{9fae8e07-a912-49b5-9fef-7d55c9c0294f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{652aafb8-be4d-48ea-b857-90b8c532a7b0}",
   "sourcePort": "output0",
   "targetUuid": "{2178d31a-7005-4179-9338-7232e4780ff9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9fae8e07-a912-49b5-9fef-7d55c9c0294f}",
   "sourcePort": "output0",
   "targetUuid": "{0b1b6325-77ac-4b4e-8ec0-a26663dff430}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{123a104a-44ab-4249-ab24-74c34251ce30}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{123a104a-44ab-4249-ab24-74c34251ce30}",
   "sourcePort": "output0",
   "targetUuid": "{0a802536-2446-43c7-9cac-a8080c1db7c3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4df7dbe4-d2e8-43d3-a3c3-209c19b115de}",
   "sourcePort": "output0",
   "targetUuid": "{68645d6d-b768-481a-81fa-49024ef28b58}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{68645d6d-b768-481a-81fa-49024ef28b58}",
   "sourcePort": "result",
   "targetUuid": "{117b50a1-3382-4e69-b9e2-0ecab7a8f098}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{117b50a1-3382-4e69-b9e2-0ecab7a8f098}",
   "sourcePort": "mixed",
   "targetUuid": "{652aafb8-be4d-48ea-b857-90b8c532a7b0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7cd29f96-2b13-45d0-8b01-edee951b1c03}",
   "sourcePort": "output",
   "targetUuid": "{b09f5bb3-6940-4c9c-ae02-2261219c3bad}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{b09f5bb3-6940-4c9c-ae02-2261219c3bad}",
   "sourcePort": "z",
   "targetUuid": "{4df7dbe4-d2e8-43d3-a3c3-209c19b115de}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c63c6d53-b10b-494f-8482-d0f28a252b67}",
   "sourcePort": "output0",
   "targetUuid": "{652aafb8-be4d-48ea-b857-90b8c532a7b0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{117b50a1-3382-4e69-b9e2-0ecab7a8f098}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{33523127-c1bb-4750-b6d8-16401f411d29}",
   "sourcePort": "uv",
   "targetUuid": "{b029928d-ac62-44db-9542-2f357d9ba5e7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b029928d-ac62-44db-9542-2f357d9ba5e7}",
   "sourcePort": "output0",
   "targetUuid": "{3456ded5-2442-436e-8938-060ba3d25bad}",
   "targetPort": "vector3"
  },
  {
   "layers": [],
   "sourceUuid": "{a8f89fde-a9ac-4ffd-bbf4-66373173a604}",
   "sourcePort": "vector2",
   "targetUuid": "{b029928d-ac62-44db-9542-2f357d9ba5e7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "uvOffset",
   "targetUuid": "{a8f89fde-a9ac-4ffd-bbf4-66373173a604}",
   "targetPort": "vector3"
  },
  {
   "layers": [],
   "sourceUuid": "{4945f4b7-399d-490a-b773-c4d6b6a78f13}",
   "sourcePort": "uv",
   "targetUuid": "{5220db1f-0f09-42e5-9e34-30f25768511f}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{3456ded5-2442-436e-8938-060ba3d25bad}",
   "sourcePort": "vector2",
   "targetUuid": "{3270a29a-e453-4895-bd37-27d661fd281a}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{3270a29a-e453-4895-bd37-27d661fd281a}",
   "sourcePort": "color",
   "targetUuid": "{7be80ac8-4938-4ad8-b14a-bf5746a83fc9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3270a29a-e453-4895-bd37-27d661fd281a}",
   "sourcePort": "alpha",
   "targetUuid": "{94fa3883-089c-4ca9-80e9-41c605593366}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{db9fae84-3be4-4199-9c30-23cf2ae2e3a3}",
   "sourcePort": "output0",
   "targetUuid": "{a2a0616a-4be2-47d9-b0e3-e9a8dee0f033}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5220db1f-0f09-42e5-9e34-30f25768511f}",
   "sourcePort": "color",
   "targetUuid": "{db9fae84-3be4-4199-9c30-23cf2ae2e3a3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a2a0616a-4be2-47d9-b0e3-e9a8dee0f033}",
   "sourcePort": "output0",
   "targetUuid": "{fce7f03c-2fa4-43b7-a5c0-09cfa19253b3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{fce7f03c-2fa4-43b7-a5c0-09cfa19253b3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fce7f03c-2fa4-43b7-a5c0-09cfa19253b3}",
   "sourcePort": "output0",
   "targetUuid": "{123a104a-44ab-4249-ab24-74c34251ce30}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5220db1f-0f09-42e5-9e34-30f25768511f}",
   "sourcePort": "alpha",
   "targetUuid": "{9fae8e07-a912-49b5-9fef-7d55c9c0294f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{613f8b86-a000-4a3a-af24-c57fd1ac9f01}",
   "sourcePort": "output0",
   "targetUuid": "{c1a67f30-63c6-499d-a248-96e6c182bdd2}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{613f8b86-a000-4a3a-af24-c57fd1ac9f01}",
   "sourcePort": "output0",
   "targetUuid": "{8576acd3-8640-447f-bf81-a79afd4d331a}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{b1404d50-b4aa-42a5-b112-84b2376576b7}",
   "sourcePort": "transformed",
   "targetUuid": "{60e6224b-6438-4fad-ab30-13272dcd4808}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c1a67f30-63c6-499d-a248-96e6c182bdd2}",
   "sourcePort": "transformed",
   "targetUuid": "{7cd29f96-2b13-45d0-8b01-edee951b1c03}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{2178d31a-7005-4179-9338-7232e4780ff9}",
   "sourcePort": "output0",
   "targetUuid": "{6af1dcf7-2181-4a4e-b1f2-0953e5867c7d}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0b1b6325-77ac-4b4e-8ec0-a26663dff430}",
   "sourcePort": "result",
   "targetUuid": "{6af1dcf7-2181-4a4e-b1f2-0953e5867c7d}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{81939f7b-72f8-4593-a67c-2bdf1789b15d}",
   "sourcePort": "value",
   "targetUuid": "{6ad189e4-bfa5-490d-b5a9-dfab4081a05c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f4aa495c-c298-499a-9850-7a3f3fadbc9f}",
   "sourcePort": "value",
   "targetUuid": "{8dd59263-46ff-4704-abf1-644f9d314805}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{edbe38d1-6b7b-4b23-98e9-97dd75ca72ac}",
   "sourcePort": "value",
   "targetUuid": "{68645d6d-b768-481a-81fa-49024ef28b58}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{c0deec7a-c767-4b49-b8f9-ed9ba32d02f0}",
   "sourcePort": "value",
   "targetUuid": "{68645d6d-b768-481a-81fa-49024ef28b58}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{14f6cf02-aaa2-431b-a165-3a1340fb2019}",
   "sourcePort": "value",
   "targetUuid": "{4df7dbe4-d2e8-43d3-a3c3-209c19b115de}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a014c37b-db3e-4332-8e11-c51876349238}",
   "sourcePort": "value",
   "targetUuid": "{117b50a1-3382-4e69-b9e2-0ecab7a8f098}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{230ff535-697a-4487-b816-2869b25ca8b5}",
   "sourcePort": "value",
   "targetUuid": "{63fd2f30-42e5-4f1d-b8ff-b866fec28316}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a275c619-0e82-43f0-a33c-13cdf540f397}",
   "sourcePort": "value",
   "targetUuid": "{db9fae84-3be4-4199-9c30-23cf2ae2e3a3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3cf4b7a-074c-49b7-8c42-4639315b9cee}",
   "sourcePort": "value",
   "targetUuid": "{a2a0616a-4be2-47d9-b0e3-e9a8dee0f033}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eba17c61-096e-4489-8ecb-7369adfa9a06}",
   "sourcePort": "value",
   "targetUuid": "{0a802536-2446-43c7-9cac-a8080c1db7c3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{93b7e5a4-01ce-4f78-9eab-4ff4730b180a}",
   "sourcePort": "value",
   "targetUuid": "{2178d31a-7005-4179-9338-7232e4780ff9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{77e5e7fe-ea85-45a5-8d13-29ea4054c843}",
   "sourcePort": "value",
   "targetUuid": "{0b1b6325-77ac-4b4e-8ec0-a26663dff430}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{538a3631-c1a1-43ad-a241-b4e494ddc8d9}",
   "sourcePort": "value",
   "targetUuid": "{0b1b6325-77ac-4b4e-8ec0-a26663dff430}",
   "targetPort": "max"
  },
  {
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{7cd29f96-2b13-45d0-8b01-edee951b1c03}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "usesMatteMap",
   "targetUuid": "{3270a29a-e453-4895-bd37-27d661fd281a}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "matteMap",
   "targetUuid": "{3270a29a-e453-4895-bd37-27d661fd281a}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{5220db1f-0f09-42e5-9e34-30f25768511f}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{ea81c1d1-a4eb-4a3d-b425-a485fdaa6b96}",
   "sourcePort": "normalMap",
   "targetUuid": "{5220db1f-0f09-42e5-9e34-30f25768511f}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1)"
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "PLANAR_REFLECTION_ALPHA_BLEND": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform highp mat4 viewMatrix;",
      "   uniform highp mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform highp mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform highp sampler2D kuesa_reflectionPlaneMap;",
      "uniform highp vec4 kuesa_reflectionPlane;",
      "highp mat4 reflectionMatrix(vec4 n)",
      "{",
      "    highp vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "highp vec4 reflectedColor(vec4 c)",
      "{",
      "    highp vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    highp vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    highp vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    highp vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform mat4 viewMatrix;",
      "   uniform mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform sampler2D kuesa_reflectionPlaneMap;",
      "uniform vec4 kuesa_reflectionPlane;",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "layout(binding=0) uniform sampler2D kuesa_reflectionPlaneMap;",
      "layout(std140, binding = 12) uniform qt3d_shadergraph_reflection_plane_uniforms {",
      "    vec4 kuesa_reflectionPlane;",
      "};",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "gltfYUp",
    "usesMatteMap",
    "matteMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "uvOffset",
    "matteInnerFilter",
    "matteOuterFilter",
    "matteGain",
    "innerAlpha",
    "outerAlpha",
    "alphaGain",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "usesNormalMap",
    "normalMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 uvOffset;\n    highp vec3 matteInnerFilter;\n    highp vec3 matteOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float normalMapGain;\n    highp float matteGain;\n    highp float innerAlpha;\n    highp float outerAlpha;\n    highp float alphaGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n    bool usesMatteMap;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D matteMap;\nuniform highp sampler2D normalMap;\n"
     ],
     "substitution": "highp sampler2D $matteMap = matteMap;highp sampler2D $normalMap = normalMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $uvOffset = properties.uvOffset;highp vec3 $matteInnerFilter = properties.matteInnerFilter;highp vec3 $matteOuterFilter = properties.matteOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $normalMapGain = properties.normalMapGain;highp float $matteGain = properties.matteGain;highp float $innerAlpha = properties.innerAlpha;highp float $outerAlpha = properties.outerAlpha;highp float $alphaGain = properties.alphaGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesMatteMap = properties.usesMatteMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 uvOffset;\n    vec3 matteInnerFilter;\n    vec3 matteOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float matteGain;\n    float innerAlpha;\n    float outerAlpha;\n    float alphaGain;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesMatteMap;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D matteMap;\nuniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $matteMap = matteMap;sampler2D $normalMap = normalMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $uvOffset = properties.uvOffset;vec3 $matteInnerFilter = properties.matteInnerFilter;vec3 $matteOuterFilter = properties.matteOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $matteGain = properties.matteGain;float $innerAlpha = properties.innerAlpha;float $outerAlpha = properties.outerAlpha;float $alphaGain = properties.alphaGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesMatteMap = properties.usesMatteMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 uvOffset;\n    vec3 matteInnerFilter;\n    vec3 matteOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float matteGain;\n    float innerAlpha;\n    float outerAlpha;\n    float alphaGain;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesMatteMap;\n    bool usesNormalMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D matteMap;\nlayout(binding = 4) uniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $matteMap = matteMap;sampler2D $normalMap = normalMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $uvOffset = properties.uvOffset;vec3 $matteInnerFilter = properties.matteInnerFilter;vec3 $matteOuterFilter = properties.matteOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $matteGain = properties.matteGain;float $innerAlpha = properties.innerAlpha;float $outerAlpha = properties.outerAlpha;float $alphaGain = properties.alphaGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesMatteMap = properties.usesMatteMap;bool $usesNormalMap = properties.usesNormalMap;"
    }
   ]
  }
 }
}
