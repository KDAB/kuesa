{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8c103dd0-2a48-47dc-a1e4-170ebe26e96a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{bcdbbd77-a528-4b4c-80ae-d02286587b01}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ec646f88-e89a-4216-9fc8-98f2faf83b73}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c842edfb-ebf6-4b5f-a8cf-14de31412382}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{488a79a1-112a-4a6a-9f09-bc6ef4dde353}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{6b0b2069-b7e1-479f-b6c6-1c389882de4c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ff2b8ebd-be66-4b71-989b-5a6672de3d23}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{482a7d13-45b2-43e7-b05a-d3ba27f315f4}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ed1550b0-8c0e-4106-8f02-bdeee14b90e3}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8e918520-ebee-48ee-b634-8584b1923723}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{414c4ed4-dbe6-4d34-acae-bda399908079}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{3f4785e2-ac9a-4199-a675-4179fc556ce2}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{af89f733-2f56-4e92-a2c7-d482c26ed59f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{49d690a8-23d0-4101-96c3-dec673f1603a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f3696fc2-d4a2-4748-b7ba-ab846cafb73b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{623058ab-5b1a-4967-9f78-b402df65f4bd}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{dd387d33-01b4-4355-a470-51e0018e0246}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6346d9ab-bd44-4458-986c-c45549628a7d}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{78a2e268-7b27-4eeb-abac-356cadeadf29}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{353c614e-803a-45bc-8a91-a2bd63b70405}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{8ec38f27-be95-4d35-adde-8ee03f573e68}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{907a54e8-63c0-46b3-9663-8307f53fa61b}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3f2fb77a-48ec-4686-b9ef-a8f21d63c3b7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4f1e2927-815c-4b0b-882d-936a3695f4f7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VEC3_TO_VEC2",
   "uuid": "{9159c99b-090b-4fac-8edc-56e2d6b9d4f6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{47d947cf-38ab-42ab-8d87-6e6e93a15c5d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VEC3_TO_VEC2",
   "uuid": "{3f4b6f3c-a21b-406c-bcd2-d9eb480433ce}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "matteMap",
    "condition": "usesMatteMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{3b3526b8-98b2-4f76-92c5-17ba9f2701e4}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{4e81ba68-0763-4ac4-bf24-6413a60acd3b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{9506a9e8-5e32-4612-8057-97ac2e5f6b80}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bd28faa4-a3bf-4eea-8bf0-bf6245b348f6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b0e68bc9-3631-46f3-8f2d-f17ca019f4a8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4214417f-f7c2-4a5c-935b-c9c043b92394}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{4758b5da-a4dc-4a10-8147-144861ca05a2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f280cb18-d2f7-4660-bd88-0a70ecc251ca}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{cd18d5ce-a034-4f10-815f-c87483cd455b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1dbee618-1dcc-4b20-986a-6c72d4d8e653}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9787955b-104a-4fb9-99f8-42be75b31840}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{a874ca70-7a3d-44f6-9b40-1f9842c63391}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1, 1, -1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{74563964-c9bd-4b3b-8050-4d89e595faae}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "inverseViewMatrix",
    "preFactor": "vec3(1, 1, -1)",
    "postFactor": "vec3(1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{221997b7-051e-4b6f-b68a-0371d40fbe0b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "max",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_FUNCTION",
   "uuid": "{fe46e0ac-abf1-492f-b4d8-bf9cd6584266}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{015dfb9a-353c-4e52-ac97-84d8dbeae3dd}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{47b16165-21fa-4293-80d5-7bd4dbbd6133}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{bbb118ef-8e41-4c2b-b305-3f2d9ddef141}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{813a0d46-6fcc-4c48-9423-99fc8c034016}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{671bf02a-a13d-40cf-bdcd-ce9a615ae074}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{24fd3e7d-024e-4a3a-9d14-656d44e9f0a8}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{1f37f165-fe48-42cd-b0e0-e3760568b6b7}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{43508e53-1564-43ca-b4ce-65ce63eaaa86}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "2.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{40bc4d86-f5ac-445e-b4b7-a68641869f36}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e25708c1-3b26-4814-8ebe-1bb33507dea7}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{12881946-c3c8-47cd-8110-8e3fbfb47ae2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a450d09e-a482-4bbf-87b0-b0347d7211f6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{1fb5f098-2721-4435-819e-b7de93eba751}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{a6f9184f-db58-4f55-ae0d-1709d29b2c11}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "matteInnerFilter",
   "targetUuid": "{482a7d13-45b2-43e7-b05a-d3ba27f315f4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "matteOuterFilter",
   "targetUuid": "{482a7d13-45b2-43e7-b05a-d3ba27f315f4}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{482a7d13-45b2-43e7-b05a-d3ba27f315f4}",
   "sourcePort": "mixed",
   "targetUuid": "{ec646f88-e89a-4216-9fc8-98f2faf83b73}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ec646f88-e89a-4216-9fc8-98f2faf83b73}",
   "sourcePort": "output0",
   "targetUuid": "{8c103dd0-2a48-47dc-a1e4-170ebe26e96a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8c103dd0-2a48-47dc-a1e4-170ebe26e96a}",
   "sourcePort": "output0",
   "targetUuid": "{4f1e2927-815c-4b0b-882d-936a3695f4f7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4f1e2927-815c-4b0b-882d-936a3695f4f7}",
   "sourcePort": "output0",
   "targetUuid": "{414c4ed4-dbe6-4d34-acae-bda399908079}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "matteGain",
   "targetUuid": "{8c103dd0-2a48-47dc-a1e4-170ebe26e96a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4e81ba68-0763-4ac4-bf24-6413a60acd3b}",
   "sourcePort": "normal",
   "targetUuid": "{74563964-c9bd-4b3b-8050-4d89e595faae}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{1dbee618-1dcc-4b20-986a-6c72d4d8e653}",
   "sourcePort": "output0",
   "targetUuid": "{9787955b-104a-4fb9-99f8-42be75b31840}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cd18d5ce-a034-4f10-815f-c87483cd455b}",
   "sourcePort": "output0",
   "targetUuid": "{9787955b-104a-4fb9-99f8-42be75b31840}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9787955b-104a-4fb9-99f8-42be75b31840}",
   "sourcePort": "output0",
   "targetUuid": "{a874ca70-7a3d-44f6-9b40-1f9842c63391}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bcdbbd77-a528-4b4c-80ae-d02286587b01}",
   "sourcePort": "z",
   "targetUuid": "{8e918520-ebee-48ee-b634-8584b1923723}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8e918520-ebee-48ee-b634-8584b1923723}",
   "sourcePort": "output0",
   "targetUuid": "{ed1550b0-8c0e-4106-8f02-bdeee14b90e3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8e918520-ebee-48ee-b634-8584b1923723}",
   "sourcePort": "output0",
   "targetUuid": "{ed1550b0-8c0e-4106-8f02-bdeee14b90e3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ed1550b0-8c0e-4106-8f02-bdeee14b90e3}",
   "sourcePort": "output0",
   "targetUuid": "{482a7d13-45b2-43e7-b05a-d3ba27f315f4}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{488a79a1-112a-4a6a-9f09-bc6ef4dde353}",
   "sourcePort": "color",
   "targetUuid": "{6b0b2069-b7e1-479f-b6c6-1c389882de4c}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{6b0b2069-b7e1-479f-b6c6-1c389882de4c}",
   "sourcePort": "mixed",
   "targetUuid": "{c842edfb-ebf6-4b5f-a8cf-14de31412382}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{6b0b2069-b7e1-479f-b6c6-1c389882de4c}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "postGain",
   "targetUuid": "{c842edfb-ebf6-4b5f-a8cf-14de31412382}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c842edfb-ebf6-4b5f-a8cf-14de31412382}",
   "sourcePort": "output0",
   "targetUuid": "{414c4ed4-dbe6-4d34-acae-bda399908079}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "innerAlpha",
   "targetUuid": "{8ec38f27-be95-4d35-adde-8ee03f573e68}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "outerAlpha",
   "targetUuid": "{8ec38f27-be95-4d35-adde-8ee03f573e68}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{ed1550b0-8c0e-4106-8f02-bdeee14b90e3}",
   "sourcePort": "output0",
   "targetUuid": "{8ec38f27-be95-4d35-adde-8ee03f573e68}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{8ec38f27-be95-4d35-adde-8ee03f573e68}",
   "sourcePort": "mixed",
   "targetUuid": "{3f2fb77a-48ec-4686-b9ef-a8f21d63c3b7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3f2fb77a-48ec-4686-b9ef-a8f21d63c3b7}",
   "sourcePort": "output0",
   "targetUuid": "{ff2b8ebd-be66-4b71-989b-5a6672de3d23}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "alphaGain",
   "targetUuid": "{ff2b8ebd-be66-4b71-989b-5a6672de3d23}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{49d690a8-23d0-4101-96c3-dec673f1603a}",
   "sourcePort": "shader",
   "targetUuid": "{af89f733-2f56-4e92-a2c7-d482c26ed59f}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "normalScaling",
   "targetUuid": "{1dbee618-1dcc-4b20-986a-6c72d4d8e653}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ff2b8ebd-be66-4b71-989b-5a6672de3d23}",
   "sourcePort": "output0",
   "targetUuid": "{907a54e8-63c0-46b3-9663-8307f53fa61b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f3696fc2-d4a2-4748-b7ba-ab846cafb73b}",
   "sourcePort": "output0",
   "targetUuid": "{fe46e0ac-abf1-492f-b4d8-bf9cd6584266}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{907a54e8-63c0-46b3-9663-8307f53fa61b}",
   "sourcePort": "output0",
   "targetUuid": "{015dfb9a-353c-4e52-ac97-84d8dbeae3dd}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{f280cb18-d2f7-4660-bd88-0a70ecc251ca}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f280cb18-d2f7-4660-bd88-0a70ecc251ca}",
   "sourcePort": "output0",
   "targetUuid": "{cd18d5ce-a034-4f10-815f-c87483cd455b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6346d9ab-bd44-4458-986c-c45549628a7d}",
   "sourcePort": "output0",
   "targetUuid": "{3f4785e2-ac9a-4199-a675-4179fc556ce2}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{3f4785e2-ac9a-4199-a675-4179fc556ce2}",
   "sourcePort": "result",
   "targetUuid": "{78a2e268-7b27-4eeb-abac-356cadeadf29}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{78a2e268-7b27-4eeb-abac-356cadeadf29}",
   "sourcePort": "mixed",
   "targetUuid": "{f3696fc2-d4a2-4748-b7ba-ab846cafb73b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{623058ab-5b1a-4967-9f78-b402df65f4bd}",
   "sourcePort": "output",
   "targetUuid": "{dd387d33-01b4-4355-a470-51e0018e0246}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{dd387d33-01b4-4355-a470-51e0018e0246}",
   "sourcePort": "z",
   "targetUuid": "{6346d9ab-bd44-4458-986c-c45549628a7d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{414c4ed4-dbe6-4d34-acae-bda399908079}",
   "sourcePort": "output0",
   "targetUuid": "{f3696fc2-d4a2-4748-b7ba-ab846cafb73b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{78a2e268-7b27-4eeb-abac-356cadeadf29}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{353c614e-803a-45bc-8a91-a2bd63b70405}",
   "sourcePort": "uv",
   "targetUuid": "{47d947cf-38ab-42ab-8d87-6e6e93a15c5d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{47d947cf-38ab-42ab-8d87-6e6e93a15c5d}",
   "sourcePort": "output0",
   "targetUuid": "{3f4b6f3c-a21b-406c-bcd2-d9eb480433ce}",
   "targetPort": "vector3"
  },
  {
   "layers": [],
   "sourceUuid": "{9159c99b-090b-4fac-8edc-56e2d6b9d4f6}",
   "sourcePort": "vector2",
   "targetUuid": "{47d947cf-38ab-42ab-8d87-6e6e93a15c5d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "uvOffset",
   "targetUuid": "{9159c99b-090b-4fac-8edc-56e2d6b9d4f6}",
   "targetPort": "vector3"
  },
  {
   "layers": [],
   "sourceUuid": "{9506a9e8-5e32-4612-8057-97ac2e5f6b80}",
   "sourcePort": "uv",
   "targetUuid": "{4758b5da-a4dc-4a10-8147-144861ca05a2}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{3f4b6f3c-a21b-406c-bcd2-d9eb480433ce}",
   "sourcePort": "vector2",
   "targetUuid": "{3b3526b8-98b2-4f76-92c5-17ba9f2701e4}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{3b3526b8-98b2-4f76-92c5-17ba9f2701e4}",
   "sourcePort": "color",
   "targetUuid": "{ec646f88-e89a-4216-9fc8-98f2faf83b73}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3b3526b8-98b2-4f76-92c5-17ba9f2701e4}",
   "sourcePort": "alpha",
   "targetUuid": "{3f2fb77a-48ec-4686-b9ef-a8f21d63c3b7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bd28faa4-a3bf-4eea-8bf0-bf6245b348f6}",
   "sourcePort": "output0",
   "targetUuid": "{b0e68bc9-3631-46f3-8f2d-f17ca019f4a8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4758b5da-a4dc-4a10-8147-144861ca05a2}",
   "sourcePort": "color",
   "targetUuid": "{bd28faa4-a3bf-4eea-8bf0-bf6245b348f6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b0e68bc9-3631-46f3-8f2d-f17ca019f4a8}",
   "sourcePort": "output0",
   "targetUuid": "{4214417f-f7c2-4a5c-935b-c9c043b92394}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{4214417f-f7c2-4a5c-935b-c9c043b92394}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4214417f-f7c2-4a5c-935b-c9c043b92394}",
   "sourcePort": "output0",
   "targetUuid": "{f280cb18-d2f7-4660-bd88-0a70ecc251ca}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4758b5da-a4dc-4a10-8147-144861ca05a2}",
   "sourcePort": "alpha",
   "targetUuid": "{907a54e8-63c0-46b3-9663-8307f53fa61b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a874ca70-7a3d-44f6-9b40-1f9842c63391}",
   "sourcePort": "output0",
   "targetUuid": "{221997b7-051e-4b6f-b68a-0371d40fbe0b}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{a874ca70-7a3d-44f6-9b40-1f9842c63391}",
   "sourcePort": "output0",
   "targetUuid": "{bcdbbd77-a528-4b4c-80ae-d02286587b01}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{74563964-c9bd-4b3b-8050-4d89e595faae}",
   "sourcePort": "transformed",
   "targetUuid": "{1dbee618-1dcc-4b20-986a-6c72d4d8e653}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{221997b7-051e-4b6f-b68a-0371d40fbe0b}",
   "sourcePort": "transformed",
   "targetUuid": "{623058ab-5b1a-4967-9f78-b402df65f4bd}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{fe46e0ac-abf1-492f-b4d8-bf9cd6584266}",
   "sourcePort": "output0",
   "targetUuid": "{49d690a8-23d0-4101-96c3-dec673f1603a}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{015dfb9a-353c-4e52-ac97-84d8dbeae3dd}",
   "sourcePort": "result",
   "targetUuid": "{49d690a8-23d0-4101-96c3-dec673f1603a}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{47b16165-21fa-4293-80d5-7bd4dbbd6133}",
   "sourcePort": "value",
   "targetUuid": "{6b0b2069-b7e1-479f-b6c6-1c389882de4c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{bbb118ef-8e41-4c2b-b305-3f2d9ddef141}",
   "sourcePort": "value",
   "targetUuid": "{8e918520-ebee-48ee-b634-8584b1923723}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{813a0d46-6fcc-4c48-9423-99fc8c034016}",
   "sourcePort": "value",
   "targetUuid": "{3f4785e2-ac9a-4199-a675-4179fc556ce2}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{671bf02a-a13d-40cf-bdcd-ce9a615ae074}",
   "sourcePort": "value",
   "targetUuid": "{3f4785e2-ac9a-4199-a675-4179fc556ce2}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{24fd3e7d-024e-4a3a-9d14-656d44e9f0a8}",
   "sourcePort": "value",
   "targetUuid": "{6346d9ab-bd44-4458-986c-c45549628a7d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1f37f165-fe48-42cd-b0e0-e3760568b6b7}",
   "sourcePort": "value",
   "targetUuid": "{78a2e268-7b27-4eeb-abac-356cadeadf29}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{43508e53-1564-43ca-b4ce-65ce63eaaa86}",
   "sourcePort": "value",
   "targetUuid": "{4f1e2927-815c-4b0b-882d-936a3695f4f7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{40bc4d86-f5ac-445e-b4b7-a68641869f36}",
   "sourcePort": "value",
   "targetUuid": "{bd28faa4-a3bf-4eea-8bf0-bf6245b348f6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e25708c1-3b26-4814-8ebe-1bb33507dea7}",
   "sourcePort": "value",
   "targetUuid": "{b0e68bc9-3631-46f3-8f2d-f17ca019f4a8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{12881946-c3c8-47cd-8110-8e3fbfb47ae2}",
   "sourcePort": "value",
   "targetUuid": "{cd18d5ce-a034-4f10-815f-c87483cd455b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a450d09e-a482-4bbf-87b0-b0347d7211f6}",
   "sourcePort": "value",
   "targetUuid": "{fe46e0ac-abf1-492f-b4d8-bf9cd6584266}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1fb5f098-2721-4435-819e-b7de93eba751}",
   "sourcePort": "value",
   "targetUuid": "{015dfb9a-353c-4e52-ac97-84d8dbeae3dd}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{a6f9184f-db58-4f55-ae0d-1709d29b2c11}",
   "sourcePort": "value",
   "targetUuid": "{015dfb9a-353c-4e52-ac97-84d8dbeae3dd}",
   "targetPort": "max"
  },
  {
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{623058ab-5b1a-4967-9f78-b402df65f4bd}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "usesMatteMap",
   "targetUuid": "{3b3526b8-98b2-4f76-92c5-17ba9f2701e4}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "matteMap",
   "targetUuid": "{3b3526b8-98b2-4f76-92c5-17ba9f2701e4}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{4758b5da-a4dc-4a10-8147-144861ca05a2}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{f24693d2-6dc4-4cf7-9817-8827a318c4a8}",
   "sourcePort": "normalMap",
   "targetUuid": "{4758b5da-a4dc-4a10-8147-144861ca05a2}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "CAMERA": {
   "outputs": [
    "view_vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif",
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $view_vector = (viewMatrix * vec4(normalize(eyePosition - worldPosition), 0.0)).xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif",
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform mat4 viewMatrix;",
      "   uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $view_vector = (viewMatrix * vec4(normalize(eyePosition - worldPosition), 0.0)).xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $view_vector = (viewMatrix * vec4(normalize(eyePosition - worldPosition), 0.0)).xyz;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(set = 0, binding = 1) uniform SerenityEntity {",
      "    mat4 model;",
      "} entity;",
      "layout(set = 1, binding = 0) uniform SerenityCamera {",
      "    mat4 viewMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "  } camera;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "vec3 eyePosition() { return camera.inverseViewMatrix[3].xyz; }",
      "#endif"
     ],
     "substitution": "vec3 $view_vector = (camera.viewMatrix * vec4(normalize(eyePosition() - worldPosition), 0.0)).xyz;"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1)"
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(set = 0, binding = 1) uniform SerenityEntity {",
      "    mat4 model;",
      "} entity;",
      "layout(set = 1, binding = 0) uniform SerenityCamera {",
      "    mat4 viewMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "  } camera;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (camera.$transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(set = 0, binding = 1) uniform SerenityEntity {",
      "    mat4 model;",
      "} entity;",
      "layout(set = 1, binding = 0) uniform SerenityCamera {",
      "    mat4 viewMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "  } camera;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "vec3 eyePosition() { return camera.inverseViewMatrix[3].xyz; }",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition()), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef READ_TEXTURE",
      "#define READ_TEXTURE(S, U, T, D) readTexture_ ## S (U, T, D)",
      "#endif"
     ],
     "substitution": "vec4 $inter = READ_TEXTURE($texture, $useTexture, vec2($vector.x, 1.0 - $vector.y), vec4($defaultColor)); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "#extension GL_OES_standard_derivatives : enable",
      "highp vec2 equiRectangular(highp vec3 pos) {",
      "highp vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "highp vec2 equiRectangular(highp vec3 pos) {",
      "highp vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif",
      "#ifndef READ_TEXTURE",
      "#define READ_TEXTURE(S, U, T, D) readTexture_ ## S (U, T, D)",
      "#endif"
     ],
     "substitution": "vec4 $inter = READ_TEXTURE($texture, $useTexture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y), vec4($defaultColor)); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "#extension GL_OES_standard_derivatives : enable",
      "highp vec2 equiRectangular(highp vec3 pos) {",
      "highp vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "highp vec2 equiRectangular(highp vec3 pos) {",
      "highp vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif",
      "#ifndef READ_TEXTURE",
      "#define READ_TEXTURE(S, U, T, D) readTexture_ ## S (U, T, D)",
      "#endif"
     ],
     "substitution": "vec4 $inter = READ_TEXTURE($texture, $useTexture, equiRectangular($position), vec4($defaultColor)); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "PLANAR_REFLECTION_ALPHA_BLEND": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform highp mat4 viewMatrix;",
      "   uniform highp mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform highp mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform highp sampler2D kuesa_reflectionPlaneMap;",
      "uniform highp vec4 kuesa_reflectionPlane;",
      "highp mat4 reflectionMatrix(vec4 n)",
      "{",
      "    highp vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "highp vec4 reflectedColor(vec4 c)",
      "{",
      "    highp vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    highp vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    highp vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    highp vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform mat4 viewMatrix;",
      "   uniform mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform sampler2D kuesa_reflectionPlaneMap;",
      "uniform vec4 kuesa_reflectionPlane;",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "layout(binding=0) uniform sampler2D kuesa_reflectionPlaneMap;",
      "layout(std140, binding = 12) uniform qt3d_shadergraph_reflection_plane_uniforms {",
      "    vec4 kuesa_reflectionPlane;",
      "};",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(set = 0, binding = 1) uniform SerenityEntity {",
      "    mat4 model;",
      "} entity;",
      "layout(set = 1, binding = 0) uniform SerenityCamera {",
      "    mat4 viewMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "  } camera;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "layout(binding=0) uniform sampler2D kuesa_reflectionPlaneMap;",
      "layout(std140, binding = 12) uniform qt3d_shadergraph_reflection_plane_uniforms {",
      "    vec4 kuesa_reflectionPlane;",
      "};",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = camera.projectionMatrix * camera.viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "gltfYUp",
    "usesMatteMap",
    "matteMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "uvOffset",
    "matteInnerFilter",
    "matteOuterFilter",
    "matteGain",
    "innerAlpha",
    "outerAlpha",
    "alphaGain",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "usesNormalMap",
    "normalMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 matteInnerFilter;\n    highp vec3 matteOuterFilter;\n    highp vec3 normalDisturb;\n    highp vec3 normalScaling;\n    highp vec3 postHemiFilter;\n    highp vec3 uvOffset;\n    highp float alphaGain;\n    highp float innerAlpha;\n    highp float matteGain;\n    highp float normalMapGain;\n    highp float outerAlpha;\n    highp float postGain;\n    highp float postVertexColor;\n    bool gltfYUp;\n    bool usesMatteMap;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D matteMap;\nuniform highp sampler2D normalMap;\n"
     ],
     "substitution": "highp sampler2D $matteMap = matteMap;highp sampler2D $normalMap = normalMap;highp vec3 $matteInnerFilter = properties.matteInnerFilter;highp vec3 $matteOuterFilter = properties.matteOuterFilter;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $postHemiFilter = properties.postHemiFilter;highp vec3 $uvOffset = properties.uvOffset;highp float $alphaGain = properties.alphaGain;highp float $innerAlpha = properties.innerAlpha;highp float $matteGain = properties.matteGain;highp float $normalMapGain = properties.normalMapGain;highp float $outerAlpha = properties.outerAlpha;highp float $postGain = properties.postGain;highp float $postVertexColor = properties.postVertexColor;bool $gltfYUp = properties.gltfYUp;bool $usesMatteMap = properties.usesMatteMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 matteInnerFilter;\n    vec3 matteOuterFilter;\n    vec3 normalDisturb;\n    vec3 normalScaling;\n    vec3 postHemiFilter;\n    vec3 uvOffset;\n    float alphaGain;\n    float innerAlpha;\n    float matteGain;\n    float normalMapGain;\n    float outerAlpha;\n    float postGain;\n    float postVertexColor;\n    bool gltfYUp;\n    bool usesMatteMap;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D matteMap;\nuniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $matteMap = matteMap;sampler2D $normalMap = normalMap;vec3 $matteInnerFilter = properties.matteInnerFilter;vec3 $matteOuterFilter = properties.matteOuterFilter;vec3 $normalDisturb = properties.normalDisturb;vec3 $normalScaling = properties.normalScaling;vec3 $postHemiFilter = properties.postHemiFilter;vec3 $uvOffset = properties.uvOffset;float $alphaGain = properties.alphaGain;float $innerAlpha = properties.innerAlpha;float $matteGain = properties.matteGain;float $normalMapGain = properties.normalMapGain;float $outerAlpha = properties.outerAlpha;float $postGain = properties.postGain;float $postVertexColor = properties.postVertexColor;bool $gltfYUp = properties.gltfYUp;bool $usesMatteMap = properties.usesMatteMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 matteInnerFilter;\n    vec3 matteOuterFilter;\n    vec3 normalDisturb;\n    vec3 normalScaling;\n    vec3 postHemiFilter;\n    vec3 uvOffset;\n    float alphaGain;\n    float innerAlpha;\n    float matteGain;\n    float normalMapGain;\n    float outerAlpha;\n    float postGain;\n    float postVertexColor;\n    bool gltfYUp;\n    bool usesMatteMap;\n    bool usesNormalMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D matteMap;\nlayout(binding = 4) uniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $matteMap = matteMap;sampler2D $normalMap = normalMap;vec3 $matteInnerFilter = properties.matteInnerFilter;vec3 $matteOuterFilter = properties.matteOuterFilter;vec3 $normalDisturb = properties.normalDisturb;vec3 $normalScaling = properties.normalScaling;vec3 $postHemiFilter = properties.postHemiFilter;vec3 $uvOffset = properties.uvOffset;float $alphaGain = properties.alphaGain;float $innerAlpha = properties.innerAlpha;float $matteGain = properties.matteGain;float $normalMapGain = properties.normalMapGain;float $outerAlpha = properties.outerAlpha;float $postGain = properties.postGain;float $postVertexColor = properties.postVertexColor;bool $gltfYUp = properties.gltfYUp;bool $usesMatteMap = properties.usesMatteMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "layout(std140, set = 2, binding = 3) uniform Material {\n    vec3 matteInnerFilter;\n    float _pad0;\n    vec3 matteOuterFilter;\n    float _pad1;\n    vec3 normalDisturb;\n    float _pad2;\n    vec3 normalScaling;\n    float _pad3;\n    vec3 postHemiFilter;\n    float _pad4;\n    vec3 uvOffset;\n    float alphaGain;\n    float innerAlpha;\n    float matteGain;\n    float normalMapGain;\n    float outerAlpha;\n    float postGain;\n    float postVertexColor;\n    bool gltfYUp;\n    bool usesMatteMap;\n    bool usesNormalMap;\n} properties;\n#ifndef READ_TEXTURE_IMPL\n#define READ_TEXTURE_IMPL\nvec4 readTexture(const in sampler2D t, bool useTexture, vec2 tCoord, vec4 defaultValue) { return ((useTexture) ? texture(t, tCoord) : defaultValue); }\n#endif\n#ifdef LAYER_matteMap\nlayout(set = 3, binding = 0) uniform sampler2D matteMap;\n#endif\nvec4 readTexture_matteMap(bool useTexture, vec2 tCoord, vec4 defaultValue) {\n#ifdef LAYER_matteMap\n    return readTexture(matteMap, useTexture, tCoord, defaultValue);\n#else\n    return defaultValue;\n#endif\n}\n#ifndef READ_TEXTURE_IMPL\n#define READ_TEXTURE_IMPL\nvec4 readTexture(const in sampler2D t, bool useTexture, vec2 tCoord, vec4 defaultValue) { return ((useTexture) ? texture(t, tCoord) : defaultValue); }\n#endif\n#ifdef LAYER_normalMap\nlayout(set = 3, binding = 1) uniform sampler2D normalMap;\n#endif\nvec4 readTexture_normalMap(bool useTexture, vec2 tCoord, vec4 defaultValue) {\n#ifdef LAYER_normalMap\n    return readTexture(normalMap, useTexture, tCoord, defaultValue);\n#else\n    return defaultValue;\n#endif\n}\n"
     ],
     "substitution": "sampler2D $matteMap = matteMap;sampler2D $normalMap = normalMap;vec3 $matteInnerFilter = properties.matteInnerFilter;vec3 $matteOuterFilter = properties.matteOuterFilter;vec3 $normalDisturb = properties.normalDisturb;vec3 $normalScaling = properties.normalScaling;vec3 $postHemiFilter = properties.postHemiFilter;vec3 $uvOffset = properties.uvOffset;float $alphaGain = properties.alphaGain;float $innerAlpha = properties.innerAlpha;float $matteGain = properties.matteGain;float $normalMapGain = properties.normalMapGain;float $outerAlpha = properties.outerAlpha;float $postGain = properties.postGain;float $postVertexColor = properties.postVertexColor;bool $gltfYUp = properties.gltfYUp;bool $usesMatteMap = properties.usesMatteMap;bool $usesNormalMap = properties.usesNormalMap;"
    }
   ]
  }
 }
}