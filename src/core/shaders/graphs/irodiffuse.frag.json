{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6188db46-462e-483a-9a4c-aa8677589971}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d9c27304-3f31-40cc-9eec-6a4ba285e7ab}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{5ff7b56a-3340-41ac-9e36-87e0cb8b5b90}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0840e61a-40cb-495f-b140-06df0f1bf4ca}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f920be85-d3f0-460e-b3d5-b5c5ccbee84e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0b64cffb-cb74-4150-88a4-2b897c84a636}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{acd02cff-f18f-4209-9542-3c1af5cdd9db}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{76cb67d3-d4ee-4ebe-8af5-84844f1836dc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{045672d1-153a-4b36-ae53-9f510acb8c3d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{85510091-8529-430e-be4e-097bc41a1cd5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5c14a98b-aadf-4935-8c2d-f2b4249597a8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{eb9177f9-dcc4-447e-97b1-00af4fdf9a3c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6fa6eac2-e17f-4ebe-8698-a953c2546c70}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d5dce89c-d22d-49ec-8283-9d8f6ae8562a}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{c2f3c196-a298-4e03-8080-43e96db88bf9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{035bf6f2-bd48-413d-994f-06045af4839d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f110d738-2749-4986-899c-d3586a925825}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{2a387a52-670f-4256-a67e-a1006a798a1d}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{7247cd40-275c-4e71-b571-21d0aec77b92}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{05d487d9-95da-4ee6-8113-02262e108901}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{f8833d7e-e196-4ff8-80a3-05c8274217c4}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{d714f107-e819-4ad9-a6aa-c50543915079}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{95146622-bda9-4083-a916-3a926c190b7d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{597e104a-ccd9-432f-964f-76d7df733714}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{21c2ddb4-76de-4c86-ab15-d6f99a534a17}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{c857ed4f-d8c9-4601-999e-8e6b85ac2598}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{9c3d5bb2-63c1-48c0-a9c1-e1a3bdd28a05}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{865f302f-3e0f-44f6-b3ab-0f75d82e7395}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{079f87c9-1a46-4e20-a8c5-31f432faf271}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4046a6ff-a97d-4065-863c-3673cc9a9c05}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{bf7ef2b5-f1f0-4981-bec7-6c99ca1bb634}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{07208abf-6c62-4634-8ae2-3fb3646ac9b4}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0527dab1-0646-44ac-88c3-22574dced32a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{f098b9ab-92d9-41fc-bca5-d7e55c12cbf3}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{3364c99f-a292-4682-a50f-67521700ca7a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{14c782e8-35d1-4b98-9d5c-f932800ba161}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{c2f3c196-a298-4e03-8080-43e96db88bf9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{c2f3c196-a298-4e03-8080-43e96db88bf9}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{5ff7b56a-3340-41ac-9e36-87e0cb8b5b90}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{5ff7b56a-3340-41ac-9e36-87e0cb8b5b90}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{c2f3c196-a298-4e03-8080-43e96db88bf9}",
   "sourcePort": "mixed",
   "targetUuid": "{035bf6f2-bd48-413d-994f-06045af4839d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5ff7b56a-3340-41ac-9e36-87e0cb8b5b90}",
   "sourcePort": "mixed",
   "targetUuid": "{0840e61a-40cb-495f-b140-06df0f1bf4ca}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{035bf6f2-bd48-413d-994f-06045af4839d}",
   "sourcePort": "output0",
   "targetUuid": "{d9c27304-3f31-40cc-9eec-6a4ba285e7ab}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d9c27304-3f31-40cc-9eec-6a4ba285e7ab}",
   "sourcePort": "output0",
   "targetUuid": "{6188db46-462e-483a-9a4c-aa8677589971}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f920be85-d3f0-460e-b3d5-b5c5ccbee84e}",
   "sourcePort": "output0",
   "targetUuid": "{6188db46-462e-483a-9a4c-aa8677589971}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6188db46-462e-483a-9a4c-aa8677589971}",
   "sourcePort": "output0",
   "targetUuid": "{95146622-bda9-4083-a916-3a926c190b7d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{d9c27304-3f31-40cc-9eec-6a4ba285e7ab}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{f920be85-d3f0-460e-b3d5-b5c5ccbee84e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0840e61a-40cb-495f-b140-06df0f1bf4ca}",
   "sourcePort": "output0",
   "targetUuid": "{f920be85-d3f0-460e-b3d5-b5c5ccbee84e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{21c2ddb4-76de-4c86-ab15-d6f99a534a17}",
   "sourcePort": "transformed",
   "targetUuid": "{5c14a98b-aadf-4935-8c2d-f2b4249597a8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5c14a98b-aadf-4935-8c2d-f2b4249597a8}",
   "sourcePort": "output0",
   "targetUuid": "{85510091-8529-430e-be4e-097bc41a1cd5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{85510091-8529-430e-be4e-097bc41a1cd5}",
   "sourcePort": "output0",
   "targetUuid": "{045672d1-153a-4b36-ae53-9f510acb8c3d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{eb9177f9-dcc4-447e-97b1-00af4fdf9a3c}",
   "sourcePort": "output0",
   "targetUuid": "{045672d1-153a-4b36-ae53-9f510acb8c3d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{045672d1-153a-4b36-ae53-9f510acb8c3d}",
   "sourcePort": "output0",
   "targetUuid": "{76cb67d3-d4ee-4ebe-8af5-84844f1836dc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{eb9177f9-dcc4-447e-97b1-00af4fdf9a3c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{acd02cff-f18f-4209-9542-3c1af5cdd9db}",
   "sourcePort": "output0",
   "targetUuid": "{0b64cffb-cb74-4150-88a4-2b897c84a636}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{76cb67d3-d4ee-4ebe-8af5-84844f1836dc}",
   "sourcePort": "output0",
   "targetUuid": "{acd02cff-f18f-4209-9542-3c1af5cdd9db}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f8833d7e-e196-4ff8-80a3-05c8274217c4}",
   "sourcePort": "z",
   "targetUuid": "{6fa6eac2-e17f-4ebe-8698-a953c2546c70}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6fa6eac2-e17f-4ebe-8698-a953c2546c70}",
   "sourcePort": "output0",
   "targetUuid": "{d5dce89c-d22d-49ec-8283-9d8f6ae8562a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6fa6eac2-e17f-4ebe-8698-a953c2546c70}",
   "sourcePort": "output0",
   "targetUuid": "{d5dce89c-d22d-49ec-8283-9d8f6ae8562a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d5dce89c-d22d-49ec-8283-9d8f6ae8562a}",
   "sourcePort": "output0",
   "targetUuid": "{c2f3c196-a298-4e03-8080-43e96db88bf9}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{d5dce89c-d22d-49ec-8283-9d8f6ae8562a}",
   "sourcePort": "output0",
   "targetUuid": "{5ff7b56a-3340-41ac-9e36-87e0cb8b5b90}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{76cb67d3-d4ee-4ebe-8af5-84844f1836dc}",
   "sourcePort": "output0",
   "targetUuid": "{f8833d7e-e196-4ff8-80a3-05c8274217c4}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{2a387a52-670f-4256-a67e-a1006a798a1d}",
   "sourcePort": "color",
   "targetUuid": "{7247cd40-275c-4e71-b571-21d0aec77b92}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{7247cd40-275c-4e71-b571-21d0aec77b92}",
   "sourcePort": "mixed",
   "targetUuid": "{f110d738-2749-4986-899c-d3586a925825}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{7247cd40-275c-4e71-b571-21d0aec77b92}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "postGain",
   "targetUuid": "{f110d738-2749-4986-899c-d3586a925825}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f110d738-2749-4986-899c-d3586a925825}",
   "sourcePort": "output0",
   "targetUuid": "{95146622-bda9-4083-a916-3a926c190b7d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0b64cffb-cb74-4150-88a4-2b897c84a636}",
   "sourcePort": "output0",
   "targetUuid": "{05d487d9-95da-4ee6-8113-02262e108901}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{05d487d9-95da-4ee6-8113-02262e108901}",
   "sourcePort": "color",
   "targetUuid": "{035bf6f2-bd48-413d-994f-06045af4839d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{597e104a-ccd9-432f-964f-76d7df733714}",
   "sourcePort": "reflection",
   "targetUuid": "{05d487d9-95da-4ee6-8113-02262e108901}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{d714f107-e819-4ad9-a6aa-c50543915079}",
   "sourcePort": "color",
   "targetUuid": "{0840e61a-40cb-495f-b140-06df0f1bf4ca}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{597e104a-ccd9-432f-964f-76d7df733714}",
   "sourcePort": "uv",
   "targetUuid": "{d714f107-e819-4ad9-a6aa-c50543915079}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{9c3d5bb2-63c1-48c0-a9c1-e1a3bdd28a05}",
   "sourcePort": "shader",
   "targetUuid": "{865f302f-3e0f-44f6-b3ab-0f75d82e7395}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "normalScaling",
   "targetUuid": "{85510091-8529-430e-be4e-097bc41a1cd5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c857ed4f-d8c9-4601-999e-8e6b85ac2598}",
   "sourcePort": "normal",
   "targetUuid": "{21c2ddb4-76de-4c86-ab15-d6f99a534a17}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{95146622-bda9-4083-a916-3a926c190b7d}",
   "sourcePort": "output0",
   "targetUuid": "{079f87c9-1a46-4e20-a8c5-31f432faf271}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{079f87c9-1a46-4e20-a8c5-31f432faf271}",
   "sourcePort": "color_out",
   "targetUuid": "{9c3d5bb2-63c1-48c0-a9c1-e1a3bdd28a05}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{4046a6ff-a97d-4065-863c-3673cc9a9c05}",
   "sourcePort": "value",
   "targetUuid": "{0b64cffb-cb74-4150-88a4-2b897c84a636}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{bf7ef2b5-f1f0-4981-bec7-6c99ca1bb634}",
   "sourcePort": "value",
   "targetUuid": "{acd02cff-f18f-4209-9542-3c1af5cdd9db}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{07208abf-6c62-4634-8ae2-3fb3646ac9b4}",
   "sourcePort": "value",
   "targetUuid": "{5c14a98b-aadf-4935-8c2d-f2b4249597a8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0527dab1-0646-44ac-88c3-22574dced32a}",
   "sourcePort": "value",
   "targetUuid": "{eb9177f9-dcc4-447e-97b1-00af4fdf9a3c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f098b9ab-92d9-41fc-bca5-d7e55c12cbf3}",
   "sourcePort": "value",
   "targetUuid": "{6fa6eac2-e17f-4ebe-8698-a953c2546c70}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3364c99f-a292-4682-a50f-67521700ca7a}",
   "sourcePort": "value",
   "targetUuid": "{7247cd40-275c-4e71-b571-21d0aec77b92}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{14c782e8-35d1-4b98-9d5c-f932800ba161}",
   "sourcePort": "value",
   "targetUuid": "{079f87c9-1a46-4e20-a8c5-31f432faf271}",
   "targetPort": "alpha"
  },
  {
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{05d487d9-95da-4ee6-8113-02262e108901}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{05d487d9-95da-4ee6-8113-02262e108901}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{05d487d9-95da-4ee6-8113-02262e108901}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{d714f107-e819-4ad9-a6aa-c50543915079}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{0a21a656-ad02-4a04-b8c9-d58374289de5}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{d714f107-e819-4ad9-a6aa-c50543915079}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postVertexColor",
    "postGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    float postVertexColor;\n    float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;"
    }
   ]
  }
 }
}