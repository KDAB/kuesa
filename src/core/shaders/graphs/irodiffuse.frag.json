{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{44fee371-d467-42b3-b16b-ce94de3df684}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2b189d04-f808-4098-af59-82a17d9382e1}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{d44fc5ac-9a72-4d2b-8ffc-426546d425c9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a49da28c-f075-40b9-852f-563a54963e18}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e35dde06-8dd8-40fc-a2de-0679a933bb75}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d66d7ca7-0582-4ece-a3d1-84bd440f1b13}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{13f30083-4daa-4efe-9d31-b29da168ee81}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{2552e939-6329-434b-a17f-353b0e6eac26}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a00b5e9e-c92d-4a0f-9d69-190e075c4fbc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8aa9aabe-818f-486e-884e-bcfb2da7ba8d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{94e2dc98-e27c-46b2-bdc7-fdc117db2f6e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{623a8417-ea7c-44f8-9b3f-f6d2011df8f9}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3f0de17e-2968-423a-9d97-d568050e69a1}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6b98392d-8891-4ff5-8c15-007fe8f30004}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{5a322546-5ac5-4662-b08b-56d4a4bc4944}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{8fa3f85b-b81b-46c3-821d-06839c7595bc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{84fbf2aa-a015-477a-bb1b-19a521d43f9a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{47dc1329-d8ea-4898-a77d-ef24cd8b5c72}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{62852a07-c58a-4fc5-913a-48b199c2b3b6}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{c1291e9e-9dbb-4f21-aad7-2e29889be420}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{4c254239-c753-47fb-a8ec-97e1e387b942}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{466da9b2-75e2-4b5d-a40c-cc943d90345a}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{2225e524-ce88-449c-8760-ce2b12d7bdc7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c1257dd7-1f65-4854-9ef2-3a59876b0a51}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{07349629-cd11-4f06-920f-614ac2201573}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{d5582a75-66a5-44d8-b7c0-9af1c883ab3f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{7357ed55-c715-424a-b7c2-c2bcd1abcfc3}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{573010f3-042e-4394-bb2e-c74c574a30eb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{3d3a2f02-8757-4f26-ad18-816af086c325}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{def775f0-39a9-4d4b-9d9c-377ac3add0e3}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{48120cc1-ef12-4579-81dd-2009d49a0790}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{8559c45e-4f95-4927-8c5f-bfb25002931a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{ac9257d5-afb3-40bd-ba47-039e2bbe4968}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{bccf221a-099a-4e41-b744-a10f644311bc}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{8fa3f85b-b81b-46c3-821d-06839c7595bc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{8fa3f85b-b81b-46c3-821d-06839c7595bc}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{d44fc5ac-9a72-4d2b-8ffc-426546d425c9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{d44fc5ac-9a72-4d2b-8ffc-426546d425c9}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{8fa3f85b-b81b-46c3-821d-06839c7595bc}",
   "sourcePort": "mixed",
   "targetUuid": "{84fbf2aa-a015-477a-bb1b-19a521d43f9a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d44fc5ac-9a72-4d2b-8ffc-426546d425c9}",
   "sourcePort": "mixed",
   "targetUuid": "{a49da28c-f075-40b9-852f-563a54963e18}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{84fbf2aa-a015-477a-bb1b-19a521d43f9a}",
   "sourcePort": "output0",
   "targetUuid": "{2b189d04-f808-4098-af59-82a17d9382e1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2b189d04-f808-4098-af59-82a17d9382e1}",
   "sourcePort": "output0",
   "targetUuid": "{44fee371-d467-42b3-b16b-ce94de3df684}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e35dde06-8dd8-40fc-a2de-0679a933bb75}",
   "sourcePort": "output0",
   "targetUuid": "{44fee371-d467-42b3-b16b-ce94de3df684}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{44fee371-d467-42b3-b16b-ce94de3df684}",
   "sourcePort": "output0",
   "targetUuid": "{c1257dd7-1f65-4854-9ef2-3a59876b0a51}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{2b189d04-f808-4098-af59-82a17d9382e1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{e35dde06-8dd8-40fc-a2de-0679a933bb75}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a49da28c-f075-40b9-852f-563a54963e18}",
   "sourcePort": "output0",
   "targetUuid": "{e35dde06-8dd8-40fc-a2de-0679a933bb75}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7357ed55-c715-424a-b7c2-c2bcd1abcfc3}",
   "sourcePort": "transformed",
   "targetUuid": "{94e2dc98-e27c-46b2-bdc7-fdc117db2f6e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{94e2dc98-e27c-46b2-bdc7-fdc117db2f6e}",
   "sourcePort": "output0",
   "targetUuid": "{8aa9aabe-818f-486e-884e-bcfb2da7ba8d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8aa9aabe-818f-486e-884e-bcfb2da7ba8d}",
   "sourcePort": "output0",
   "targetUuid": "{a00b5e9e-c92d-4a0f-9d69-190e075c4fbc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{623a8417-ea7c-44f8-9b3f-f6d2011df8f9}",
   "sourcePort": "output0",
   "targetUuid": "{a00b5e9e-c92d-4a0f-9d69-190e075c4fbc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a00b5e9e-c92d-4a0f-9d69-190e075c4fbc}",
   "sourcePort": "output0",
   "targetUuid": "{2552e939-6329-434b-a17f-353b0e6eac26}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{623a8417-ea7c-44f8-9b3f-f6d2011df8f9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{13f30083-4daa-4efe-9d31-b29da168ee81}",
   "sourcePort": "output0",
   "targetUuid": "{d66d7ca7-0582-4ece-a3d1-84bd440f1b13}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2552e939-6329-434b-a17f-353b0e6eac26}",
   "sourcePort": "output0",
   "targetUuid": "{13f30083-4daa-4efe-9d31-b29da168ee81}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{466da9b2-75e2-4b5d-a40c-cc943d90345a}",
   "sourcePort": "z",
   "targetUuid": "{3f0de17e-2968-423a-9d97-d568050e69a1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3f0de17e-2968-423a-9d97-d568050e69a1}",
   "sourcePort": "output0",
   "targetUuid": "{6b98392d-8891-4ff5-8c15-007fe8f30004}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3f0de17e-2968-423a-9d97-d568050e69a1}",
   "sourcePort": "output0",
   "targetUuid": "{6b98392d-8891-4ff5-8c15-007fe8f30004}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6b98392d-8891-4ff5-8c15-007fe8f30004}",
   "sourcePort": "output0",
   "targetUuid": "{8fa3f85b-b81b-46c3-821d-06839c7595bc}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{6b98392d-8891-4ff5-8c15-007fe8f30004}",
   "sourcePort": "output0",
   "targetUuid": "{d44fc5ac-9a72-4d2b-8ffc-426546d425c9}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{2552e939-6329-434b-a17f-353b0e6eac26}",
   "sourcePort": "output0",
   "targetUuid": "{466da9b2-75e2-4b5d-a40c-cc943d90345a}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{62852a07-c58a-4fc5-913a-48b199c2b3b6}",
   "sourcePort": "color",
   "targetUuid": "{c1291e9e-9dbb-4f21-aad7-2e29889be420}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{c1291e9e-9dbb-4f21-aad7-2e29889be420}",
   "sourcePort": "mixed",
   "targetUuid": "{47dc1329-d8ea-4898-a77d-ef24cd8b5c72}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{c1291e9e-9dbb-4f21-aad7-2e29889be420}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "postGain",
   "targetUuid": "{47dc1329-d8ea-4898-a77d-ef24cd8b5c72}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{47dc1329-d8ea-4898-a77d-ef24cd8b5c72}",
   "sourcePort": "output0",
   "targetUuid": "{c1257dd7-1f65-4854-9ef2-3a59876b0a51}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d66d7ca7-0582-4ece-a3d1-84bd440f1b13}",
   "sourcePort": "output0",
   "targetUuid": "{4c254239-c753-47fb-a8ec-97e1e387b942}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{4c254239-c753-47fb-a8ec-97e1e387b942}",
   "sourcePort": "color",
   "targetUuid": "{84fbf2aa-a015-477a-bb1b-19a521d43f9a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d5582a75-66a5-44d8-b7c0-9af1c883ab3f}",
   "sourcePort": "reflection",
   "targetUuid": "{4c254239-c753-47fb-a8ec-97e1e387b942}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{2225e524-ce88-449c-8760-ce2b12d7bdc7}",
   "sourcePort": "color",
   "targetUuid": "{a49da28c-f075-40b9-852f-563a54963e18}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d5582a75-66a5-44d8-b7c0-9af1c883ab3f}",
   "sourcePort": "uv",
   "targetUuid": "{2225e524-ce88-449c-8760-ce2b12d7bdc7}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{c1257dd7-1f65-4854-9ef2-3a59876b0a51}",
   "sourcePort": "output0",
   "targetUuid": "{07349629-cd11-4f06-920f-614ac2201573}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{07349629-cd11-4f06-920f-614ac2201573}",
   "sourcePort": "shader",
   "targetUuid": "{5a322546-5ac5-4662-b08b-56d4a4bc4944}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "normalScaling",
   "targetUuid": "{8aa9aabe-818f-486e-884e-bcfb2da7ba8d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{573010f3-042e-4394-bb2e-c74c574a30eb}",
   "sourcePort": "normal",
   "targetUuid": "{7357ed55-c715-424a-b7c2-c2bcd1abcfc3}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{3d3a2f02-8757-4f26-ad18-816af086c325}",
   "sourcePort": "value",
   "targetUuid": "{d66d7ca7-0582-4ece-a3d1-84bd440f1b13}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{def775f0-39a9-4d4b-9d9c-377ac3add0e3}",
   "sourcePort": "value",
   "targetUuid": "{13f30083-4daa-4efe-9d31-b29da168ee81}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{48120cc1-ef12-4579-81dd-2009d49a0790}",
   "sourcePort": "value",
   "targetUuid": "{94e2dc98-e27c-46b2-bdc7-fdc117db2f6e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8559c45e-4f95-4927-8c5f-bfb25002931a}",
   "sourcePort": "value",
   "targetUuid": "{623a8417-ea7c-44f8-9b3f-f6d2011df8f9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ac9257d5-afb3-40bd-ba47-039e2bbe4968}",
   "sourcePort": "value",
   "targetUuid": "{3f0de17e-2968-423a-9d97-d568050e69a1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bccf221a-099a-4e41-b744-a10f644311bc}",
   "sourcePort": "value",
   "targetUuid": "{c1291e9e-9dbb-4f21-aad7-2e29889be420}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{4c254239-c753-47fb-a8ec-97e1e387b942}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{4c254239-c753-47fb-a8ec-97e1e387b942}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{4c254239-c753-47fb-a8ec-97e1e387b942}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{2225e524-ce88-449c-8760-ce2b12d7bdc7}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{d58451c0-724a-4618-8bca-1fab49ca8631}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{2225e524-ce88-449c-8760-ce2b12d7bdc7}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postVertexColor",
    "postGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    float postVertexColor;\n    float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;"
    }
   ]
  }
 }
}