{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5d4ca35c-0c35-48c6-9353-715f2fe4e6a3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2e0b861a-46ba-40f6-a3a5-370d82886b05}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{08796b05-a14f-4eb0-aa98-45d27fec7b0e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3330e195-dfb0-4739-81be-6a1e8d9bdde2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c23338c5-e42b-4c2f-a9cf-1b8c10557677}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f3a4207e-d494-4ba1-bbdf-e1e228ce1496}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6e1ce04b-ef7d-4bec-ae2d-d870570fae86}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{8bf86c2e-e513-4984-9434-6debc9889dce}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{cf9e79af-89a3-4677-ab4e-01c094699b11}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2c73b195-4206-48a0-a646-14d7f6e0b11d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1851f7d4-28c6-4353-b26a-c0592dfc75a3}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{0f3e9a40-431b-4e5c-b50b-5cdc97457141}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{082a0dcc-07be-4d05-bc06-8a8f6eadf531}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a36df218-1b17-4757-8cae-2273d5944750}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a7b8a0f1-2406-4d78-93ea-f57531605858}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{fadf6316-0199-4b13-bbae-4fe0d7e66411}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{cb5bcf71-e03d-4952-aa0f-ac79d2dfa478}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{0e09309c-1a76-40ed-be9f-bc13a10b2927}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{759cef1e-ca5e-45ed-8da9-a5ac877879dc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ca88b5d0-6762-4eef-a692-17046c726d8e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{8bc6c995-1d62-4fcc-a93d-714b75982744}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{a1c2e5b4-a6d4-408f-9e2c-58886d42be2d}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{94141f95-d883-4ea7-ace7-3f7dfcf7eeaa}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{02f6e93e-711b-4f99-ad3a-67b8eb845aaf}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{d23371c0-1dd1-4240-a46f-35c685de8075}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{616ee638-4422-4fad-8d83-0adfb1d04c92}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{fff17597-ee6e-42dd-9438-20c500c78717}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{1e29cf6c-01b0-4530-a993-35d4e79df760}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{7f770596-a6a8-4797-9cd8-bbb89ef16b31}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a52296ce-cad2-4be6-b98a-d4f550a7af05}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{00a74662-14eb-4393-82fe-1a9753e0ebc3}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c39bf93f-4d49-4fb2-98c4-7af11b04656d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e2391ec9-3094-4aae-a12b-0d63080fcde5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{6187f994-0349-49dc-beab-e78cb3f37515}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b8692411-fe57-414d-807c-e2628252b0d4}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{0e09309c-1a76-40ed-be9f-bc13a10b2927}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{0e09309c-1a76-40ed-be9f-bc13a10b2927}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{08796b05-a14f-4eb0-aa98-45d27fec7b0e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{08796b05-a14f-4eb0-aa98-45d27fec7b0e}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{0e09309c-1a76-40ed-be9f-bc13a10b2927}",
   "sourcePort": "mixed",
   "targetUuid": "{759cef1e-ca5e-45ed-8da9-a5ac877879dc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{08796b05-a14f-4eb0-aa98-45d27fec7b0e}",
   "sourcePort": "mixed",
   "targetUuid": "{3330e195-dfb0-4739-81be-6a1e8d9bdde2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{759cef1e-ca5e-45ed-8da9-a5ac877879dc}",
   "sourcePort": "output0",
   "targetUuid": "{2e0b861a-46ba-40f6-a3a5-370d82886b05}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2e0b861a-46ba-40f6-a3a5-370d82886b05}",
   "sourcePort": "output0",
   "targetUuid": "{5d4ca35c-0c35-48c6-9353-715f2fe4e6a3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c23338c5-e42b-4c2f-a9cf-1b8c10557677}",
   "sourcePort": "output0",
   "targetUuid": "{5d4ca35c-0c35-48c6-9353-715f2fe4e6a3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5d4ca35c-0c35-48c6-9353-715f2fe4e6a3}",
   "sourcePort": "output0",
   "targetUuid": "{616ee638-4422-4fad-8d83-0adfb1d04c92}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{2e0b861a-46ba-40f6-a3a5-370d82886b05}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{c23338c5-e42b-4c2f-a9cf-1b8c10557677}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3330e195-dfb0-4739-81be-6a1e8d9bdde2}",
   "sourcePort": "output0",
   "targetUuid": "{c23338c5-e42b-4c2f-a9cf-1b8c10557677}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0f3e9a40-431b-4e5c-b50b-5cdc97457141}",
   "sourcePort": "transformed",
   "targetUuid": "{1851f7d4-28c6-4353-b26a-c0592dfc75a3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1851f7d4-28c6-4353-b26a-c0592dfc75a3}",
   "sourcePort": "output0",
   "targetUuid": "{2c73b195-4206-48a0-a646-14d7f6e0b11d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2c73b195-4206-48a0-a646-14d7f6e0b11d}",
   "sourcePort": "output0",
   "targetUuid": "{cf9e79af-89a3-4677-ab4e-01c094699b11}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{082a0dcc-07be-4d05-bc06-8a8f6eadf531}",
   "sourcePort": "output0",
   "targetUuid": "{cf9e79af-89a3-4677-ab4e-01c094699b11}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cf9e79af-89a3-4677-ab4e-01c094699b11}",
   "sourcePort": "output0",
   "targetUuid": "{8bf86c2e-e513-4984-9434-6debc9889dce}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "normalScaling",
   "targetUuid": "{7f770596-a6a8-4797-9cd8-bbb89ef16b31}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{082a0dcc-07be-4d05-bc06-8a8f6eadf531}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6e1ce04b-ef7d-4bec-ae2d-d870570fae86}",
   "sourcePort": "output0",
   "targetUuid": "{f3a4207e-d494-4ba1-bbdf-e1e228ce1496}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8bf86c2e-e513-4984-9434-6debc9889dce}",
   "sourcePort": "output0",
   "targetUuid": "{6e1ce04b-ef7d-4bec-ae2d-d870570fae86}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{02f6e93e-711b-4f99-ad3a-67b8eb845aaf}",
   "sourcePort": "z",
   "targetUuid": "{a36df218-1b17-4757-8cae-2273d5944750}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a36df218-1b17-4757-8cae-2273d5944750}",
   "sourcePort": "output0",
   "targetUuid": "{a7b8a0f1-2406-4d78-93ea-f57531605858}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a36df218-1b17-4757-8cae-2273d5944750}",
   "sourcePort": "output0",
   "targetUuid": "{a7b8a0f1-2406-4d78-93ea-f57531605858}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a7b8a0f1-2406-4d78-93ea-f57531605858}",
   "sourcePort": "output0",
   "targetUuid": "{0e09309c-1a76-40ed-be9f-bc13a10b2927}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{a7b8a0f1-2406-4d78-93ea-f57531605858}",
   "sourcePort": "output0",
   "targetUuid": "{08796b05-a14f-4eb0-aa98-45d27fec7b0e}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{8bf86c2e-e513-4984-9434-6debc9889dce}",
   "sourcePort": "output0",
   "targetUuid": "{02f6e93e-711b-4f99-ad3a-67b8eb845aaf}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{8bc6c995-1d62-4fcc-a93d-714b75982744}",
   "sourcePort": "color",
   "targetUuid": "{a1c2e5b4-a6d4-408f-9e2c-58886d42be2d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{a1c2e5b4-a6d4-408f-9e2c-58886d42be2d}",
   "sourcePort": "mixed",
   "targetUuid": "{ca88b5d0-6762-4eef-a692-17046c726d8e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{a1c2e5b4-a6d4-408f-9e2c-58886d42be2d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "postGain",
   "targetUuid": "{ca88b5d0-6762-4eef-a692-17046c726d8e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ca88b5d0-6762-4eef-a692-17046c726d8e}",
   "sourcePort": "output0",
   "targetUuid": "{616ee638-4422-4fad-8d83-0adfb1d04c92}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f3a4207e-d494-4ba1-bbdf-e1e228ce1496}",
   "sourcePort": "output0",
   "targetUuid": "{94141f95-d883-4ea7-ace7-3f7dfcf7eeaa}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{94141f95-d883-4ea7-ace7-3f7dfcf7eeaa}",
   "sourcePort": "color",
   "targetUuid": "{759cef1e-ca5e-45ed-8da9-a5ac877879dc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fadf6316-0199-4b13-bbae-4fe0d7e66411}",
   "sourcePort": "reflection",
   "targetUuid": "{94141f95-d883-4ea7-ace7-3f7dfcf7eeaa}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{d23371c0-1dd1-4240-a46f-35c685de8075}",
   "sourcePort": "color",
   "targetUuid": "{3330e195-dfb0-4739-81be-6a1e8d9bdde2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fadf6316-0199-4b13-bbae-4fe0d7e66411}",
   "sourcePort": "uv",
   "targetUuid": "{d23371c0-1dd1-4240-a46f-35c685de8075}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{616ee638-4422-4fad-8d83-0adfb1d04c92}",
   "sourcePort": "output0",
   "targetUuid": "{fff17597-ee6e-42dd-9438-20c500c78717}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{fff17597-ee6e-42dd-9438-20c500c78717}",
   "sourcePort": "shader",
   "targetUuid": "{cb5bcf71-e03d-4952-aa0f-ac79d2dfa478}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{1e29cf6c-01b0-4530-a993-35d4e79df760}",
   "sourcePort": "normal",
   "targetUuid": "{0f3e9a40-431b-4e5c-b50b-5cdc97457141}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{7f770596-a6a8-4797-9cd8-bbb89ef16b31}",
   "sourcePort": "output",
   "targetUuid": "{2c73b195-4206-48a0-a646-14d7f6e0b11d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a52296ce-cad2-4be6-b98a-d4f550a7af05}",
   "sourcePort": "value",
   "targetUuid": "{f3a4207e-d494-4ba1-bbdf-e1e228ce1496}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{00a74662-14eb-4393-82fe-1a9753e0ebc3}",
   "sourcePort": "value",
   "targetUuid": "{6e1ce04b-ef7d-4bec-ae2d-d870570fae86}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c39bf93f-4d49-4fb2-98c4-7af11b04656d}",
   "sourcePort": "value",
   "targetUuid": "{1851f7d4-28c6-4353-b26a-c0592dfc75a3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e2391ec9-3094-4aae-a12b-0d63080fcde5}",
   "sourcePort": "value",
   "targetUuid": "{082a0dcc-07be-4d05-bc06-8a8f6eadf531}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6187f994-0349-49dc-beab-e78cb3f37515}",
   "sourcePort": "value",
   "targetUuid": "{a36df218-1b17-4757-8cae-2273d5944750}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b8692411-fe57-414d-807c-e2628252b0d4}",
   "sourcePort": "value",
   "targetUuid": "{a1c2e5b4-a6d4-408f-9e2c-58886d42be2d}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{94141f95-d883-4ea7-ace7-3f7dfcf7eeaa}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{94141f95-d883-4ea7-ace7-3f7dfcf7eeaa}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{94141f95-d883-4ea7-ace7-3f7dfcf7eeaa}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{d23371c0-1dd1-4240-a46f-35c685de8075}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{d23371c0-1dd1-4240-a46f-35c685de8075}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{1dc81723-cdc5-42e4-a3d8-75d9c1758af4}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{7f770596-a6a8-4797-9cd8-bbb89ef16b31}",
   "targetPort": "gltfYUp"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    }
   ]
  }
 }
}