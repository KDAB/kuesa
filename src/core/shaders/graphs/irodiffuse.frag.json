{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f5aadada-3320-4062-88bf-0772d8d75d8a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e56dd2d3-7c40-463c-baeb-bc2be5eceb65}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{4f2610c9-b263-44cd-aaf8-50020a34d430}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3bab986d-ec3e-4375-9c3c-6287cda11bbe}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a0f6f4ba-b21b-4c26-bb34-1b43560837a0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ab89301a-ec5e-48a5-b261-037b555c89a7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1994d65d-26b9-44e8-952b-16737892ce4f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{95389946-980b-4c8d-b600-50970f1661c6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f6d23137-741e-4e93-ba1b-5af6d93a3bcb}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a7355008-2b35-4e32-b4a4-383823f1daaa}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{50a02c60-19c4-4c99-9094-9ca1fc49c9e7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{d4c438bb-d1a8-4113-9c3e-a0953a463c3c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{93d8df0c-2cc0-4493-9d62-1e4777f8b838}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7aaec3cf-349a-4b88-82a4-d27eefe13999}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9d8079e2-fafa-4f89-8c20-f3fd5507c60e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{6a6f085f-92c1-4c4b-aae6-6d4920b15f0a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{9a9d0c41-d0ae-4576-bb9e-4bab03ef763c}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{af225a14-bc24-4d20-999d-6df6d89e429c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ef0b35c1-8034-49d5-831f-952dcd706081}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ac13cb44-f7b0-4ad4-bc6d-ffe740ec8527}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{1363f350-4de6-4420-acf1-ccc3ae3791c7}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{dbc14995-c1be-4207-af9d-34a1ccf1edf2}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{8d32a99e-2106-4c1a-bb3c-2ac67841e25d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{cae87b2b-0c73-4a68-a460-77b32b6c70b9}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{57d74a0a-7b32-4a2c-a355-8c580814291a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e8b8c7b1-b26c-40c4-aaa5-f814991fe426}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{be6f360c-e95a-44eb-8e2b-e25592597113}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{ba37113a-b457-4097-98b7-3f94c323ee97}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{494bbeb0-db7b-4389-b603-73ebeb0db258}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{03712874-09bf-4ac7-9cef-b4009bd649eb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{6e6c2857-7b32-459f-ae49-9f95667368ef}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b4a1b3fb-8512-41d9-82b1-16708922f7db}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{1398ae2a-abd3-4ecb-92aa-45a9c925ba89}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{20d5eb59-7d80-4179-8ff1-6184798800b8}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{6dc05243-211b-48dd-885b-e796fcb48b8d}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{af225a14-bc24-4d20-999d-6df6d89e429c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{af225a14-bc24-4d20-999d-6df6d89e429c}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{4f2610c9-b263-44cd-aaf8-50020a34d430}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{4f2610c9-b263-44cd-aaf8-50020a34d430}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{af225a14-bc24-4d20-999d-6df6d89e429c}",
   "sourcePort": "mixed",
   "targetUuid": "{ef0b35c1-8034-49d5-831f-952dcd706081}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4f2610c9-b263-44cd-aaf8-50020a34d430}",
   "sourcePort": "mixed",
   "targetUuid": "{3bab986d-ec3e-4375-9c3c-6287cda11bbe}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ef0b35c1-8034-49d5-831f-952dcd706081}",
   "sourcePort": "output0",
   "targetUuid": "{e56dd2d3-7c40-463c-baeb-bc2be5eceb65}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e56dd2d3-7c40-463c-baeb-bc2be5eceb65}",
   "sourcePort": "output0",
   "targetUuid": "{f5aadada-3320-4062-88bf-0772d8d75d8a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a0f6f4ba-b21b-4c26-bb34-1b43560837a0}",
   "sourcePort": "output0",
   "targetUuid": "{f5aadada-3320-4062-88bf-0772d8d75d8a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f5aadada-3320-4062-88bf-0772d8d75d8a}",
   "sourcePort": "output0",
   "targetUuid": "{e8b8c7b1-b26c-40c4-aaa5-f814991fe426}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{e56dd2d3-7c40-463c-baeb-bc2be5eceb65}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{a0f6f4ba-b21b-4c26-bb34-1b43560837a0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3bab986d-ec3e-4375-9c3c-6287cda11bbe}",
   "sourcePort": "output0",
   "targetUuid": "{a0f6f4ba-b21b-4c26-bb34-1b43560837a0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d4c438bb-d1a8-4113-9c3e-a0953a463c3c}",
   "sourcePort": "transformed",
   "targetUuid": "{50a02c60-19c4-4c99-9094-9ca1fc49c9e7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{50a02c60-19c4-4c99-9094-9ca1fc49c9e7}",
   "sourcePort": "output0",
   "targetUuid": "{a7355008-2b35-4e32-b4a4-383823f1daaa}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a7355008-2b35-4e32-b4a4-383823f1daaa}",
   "sourcePort": "output0",
   "targetUuid": "{f6d23137-741e-4e93-ba1b-5af6d93a3bcb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{93d8df0c-2cc0-4493-9d62-1e4777f8b838}",
   "sourcePort": "output0",
   "targetUuid": "{f6d23137-741e-4e93-ba1b-5af6d93a3bcb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f6d23137-741e-4e93-ba1b-5af6d93a3bcb}",
   "sourcePort": "output0",
   "targetUuid": "{95389946-980b-4c8d-b600-50970f1661c6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "normalScaling",
   "targetUuid": "{494bbeb0-db7b-4389-b603-73ebeb0db258}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{93d8df0c-2cc0-4493-9d62-1e4777f8b838}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1994d65d-26b9-44e8-952b-16737892ce4f}",
   "sourcePort": "output0",
   "targetUuid": "{ab89301a-ec5e-48a5-b261-037b555c89a7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{95389946-980b-4c8d-b600-50970f1661c6}",
   "sourcePort": "output0",
   "targetUuid": "{1994d65d-26b9-44e8-952b-16737892ce4f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cae87b2b-0c73-4a68-a460-77b32b6c70b9}",
   "sourcePort": "z",
   "targetUuid": "{7aaec3cf-349a-4b88-82a4-d27eefe13999}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7aaec3cf-349a-4b88-82a4-d27eefe13999}",
   "sourcePort": "output0",
   "targetUuid": "{9d8079e2-fafa-4f89-8c20-f3fd5507c60e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7aaec3cf-349a-4b88-82a4-d27eefe13999}",
   "sourcePort": "output0",
   "targetUuid": "{9d8079e2-fafa-4f89-8c20-f3fd5507c60e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9d8079e2-fafa-4f89-8c20-f3fd5507c60e}",
   "sourcePort": "output0",
   "targetUuid": "{af225a14-bc24-4d20-999d-6df6d89e429c}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{9d8079e2-fafa-4f89-8c20-f3fd5507c60e}",
   "sourcePort": "output0",
   "targetUuid": "{4f2610c9-b263-44cd-aaf8-50020a34d430}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{95389946-980b-4c8d-b600-50970f1661c6}",
   "sourcePort": "output0",
   "targetUuid": "{cae87b2b-0c73-4a68-a460-77b32b6c70b9}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{1363f350-4de6-4420-acf1-ccc3ae3791c7}",
   "sourcePort": "color",
   "targetUuid": "{dbc14995-c1be-4207-af9d-34a1ccf1edf2}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{dbc14995-c1be-4207-af9d-34a1ccf1edf2}",
   "sourcePort": "mixed",
   "targetUuid": "{ac13cb44-f7b0-4ad4-bc6d-ffe740ec8527}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{dbc14995-c1be-4207-af9d-34a1ccf1edf2}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "postGain",
   "targetUuid": "{ac13cb44-f7b0-4ad4-bc6d-ffe740ec8527}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ac13cb44-f7b0-4ad4-bc6d-ffe740ec8527}",
   "sourcePort": "output0",
   "targetUuid": "{e8b8c7b1-b26c-40c4-aaa5-f814991fe426}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ab89301a-ec5e-48a5-b261-037b555c89a7}",
   "sourcePort": "output0",
   "targetUuid": "{8d32a99e-2106-4c1a-bb3c-2ac67841e25d}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{8d32a99e-2106-4c1a-bb3c-2ac67841e25d}",
   "sourcePort": "color",
   "targetUuid": "{ef0b35c1-8034-49d5-831f-952dcd706081}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6a6f085f-92c1-4c4b-aae6-6d4920b15f0a}",
   "sourcePort": "reflection",
   "targetUuid": "{8d32a99e-2106-4c1a-bb3c-2ac67841e25d}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{57d74a0a-7b32-4a2c-a355-8c580814291a}",
   "sourcePort": "color",
   "targetUuid": "{3bab986d-ec3e-4375-9c3c-6287cda11bbe}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6a6f085f-92c1-4c4b-aae6-6d4920b15f0a}",
   "sourcePort": "uv",
   "targetUuid": "{57d74a0a-7b32-4a2c-a355-8c580814291a}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{e8b8c7b1-b26c-40c4-aaa5-f814991fe426}",
   "sourcePort": "output0",
   "targetUuid": "{be6f360c-e95a-44eb-8e2b-e25592597113}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{be6f360c-e95a-44eb-8e2b-e25592597113}",
   "sourcePort": "shader",
   "targetUuid": "{9a9d0c41-d0ae-4576-bb9e-4bab03ef763c}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{ba37113a-b457-4097-98b7-3f94c323ee97}",
   "sourcePort": "normal",
   "targetUuid": "{d4c438bb-d1a8-4113-9c3e-a0953a463c3c}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{494bbeb0-db7b-4389-b603-73ebeb0db258}",
   "sourcePort": "output",
   "targetUuid": "{a7355008-2b35-4e32-b4a4-383823f1daaa}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{03712874-09bf-4ac7-9cef-b4009bd649eb}",
   "sourcePort": "value",
   "targetUuid": "{ab89301a-ec5e-48a5-b261-037b555c89a7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6e6c2857-7b32-459f-ae49-9f95667368ef}",
   "sourcePort": "value",
   "targetUuid": "{1994d65d-26b9-44e8-952b-16737892ce4f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b4a1b3fb-8512-41d9-82b1-16708922f7db}",
   "sourcePort": "value",
   "targetUuid": "{50a02c60-19c4-4c99-9094-9ca1fc49c9e7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1398ae2a-abd3-4ecb-92aa-45a9c925ba89}",
   "sourcePort": "value",
   "targetUuid": "{93d8df0c-2cc0-4493-9d62-1e4777f8b838}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{20d5eb59-7d80-4179-8ff1-6184798800b8}",
   "sourcePort": "value",
   "targetUuid": "{7aaec3cf-349a-4b88-82a4-d27eefe13999}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6dc05243-211b-48dd-885b-e796fcb48b8d}",
   "sourcePort": "value",
   "targetUuid": "{dbc14995-c1be-4207-af9d-34a1ccf1edf2}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{8d32a99e-2106-4c1a-bb3c-2ac67841e25d}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{8d32a99e-2106-4c1a-bb3c-2ac67841e25d}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{8d32a99e-2106-4c1a-bb3c-2ac67841e25d}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{57d74a0a-7b32-4a2c-a355-8c580814291a}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{57d74a0a-7b32-4a2c-a355-8c580814291a}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{1b9dc0d6-8efb-45be-bf6c-6f3a4d36003a}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{494bbeb0-db7b-4389-b603-73ebeb0db258}",
   "targetPort": "gltfYUp"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    }
   ]
  }
 }
}