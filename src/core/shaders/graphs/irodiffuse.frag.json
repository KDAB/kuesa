{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1e2717d3-931e-4c3e-a1b9-2ebfe664dea0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{10aac7e2-7bca-4b00-abdc-cecf98219962}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{3fa596c8-c764-42e3-ae52-6e78500b19f8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d7112e6f-6bec-4b0a-919a-12f97ddd6de9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{234f7022-a3ae-4891-b047-bae630c19a0a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{410cbb99-e511-4f77-b51e-7c764d39ea57}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4861fd08-af6b-49ac-a56b-f8e8bf26f260}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{fc273c09-2150-48e9-92e4-41f436a44b85}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2c978c50-780f-49b4-9272-0b8e91a0fd95}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2653bbb1-c761-4898-9462-6648257236b4}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{26e3a9a6-25ab-46a7-b815-906828e6bc97}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{0e5bfabd-0cc4-4d0c-9d53-9fa15b74c09a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{69a88abe-8f22-4ff4-8a66-5704eb0602ac}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{80090362-ea00-4124-a7d1-4dafa6e075c0}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b5575cf7-3e45-40d5-b393-5a0ae58fdea6}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{e4595235-ab9e-41a5-b630-a5a9ac31ab89}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{ea836f62-1acd-430b-a0e4-2480b089f892}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{267a4969-eae2-4850-b6c8-6c6a04811a78}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e057d168-8179-4c55-9cfb-e126832fc286}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c29d84b1-5747-42ca-a9ca-952ea4a532ca}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{9c237daa-6751-43c3-a167-b7febdbc22a7}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{12e06e57-f8bd-4f73-aab3-d28b70bb55bd}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{8352508b-ab12-4f89-a822-08d4874c1aad}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{99252691-dc2a-44ea-91ff-8b8c1b4fa9b9}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{debb0578-3104-41a8-8515-876ac420f42d}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{eea08cb9-3549-4e43-b7cb-20f5ed8a12b8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{65b02a4c-055e-4370-8fae-8ebf326b5297}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{fabbdc1d-d452-42a5-84b9-f95a62c0a673}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{70fefaed-9144-44f6-901b-68bb620f6527}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{609a6801-ec05-48e6-8085-037e92689fef}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c498ed8d-d2c9-4c73-ae79-4756ff9a317f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{2204eced-2a67-4932-bfa7-efdb3e5c59e5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{eb1c7f97-00ad-47a3-8514-4b6ca98869b8}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{8c742722-0b6c-4a03-b73f-1805f09a181f}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{267a4969-eae2-4850-b6c8-6c6a04811a78}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{267a4969-eae2-4850-b6c8-6c6a04811a78}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{3fa596c8-c764-42e3-ae52-6e78500b19f8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{3fa596c8-c764-42e3-ae52-6e78500b19f8}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{267a4969-eae2-4850-b6c8-6c6a04811a78}",
   "sourcePort": "mixed",
   "targetUuid": "{e057d168-8179-4c55-9cfb-e126832fc286}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3fa596c8-c764-42e3-ae52-6e78500b19f8}",
   "sourcePort": "mixed",
   "targetUuid": "{d7112e6f-6bec-4b0a-919a-12f97ddd6de9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e057d168-8179-4c55-9cfb-e126832fc286}",
   "sourcePort": "output0",
   "targetUuid": "{10aac7e2-7bca-4b00-abdc-cecf98219962}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{10aac7e2-7bca-4b00-abdc-cecf98219962}",
   "sourcePort": "output0",
   "targetUuid": "{1e2717d3-931e-4c3e-a1b9-2ebfe664dea0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{234f7022-a3ae-4891-b047-bae630c19a0a}",
   "sourcePort": "output0",
   "targetUuid": "{1e2717d3-931e-4c3e-a1b9-2ebfe664dea0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1e2717d3-931e-4c3e-a1b9-2ebfe664dea0}",
   "sourcePort": "output0",
   "targetUuid": "{65b02a4c-055e-4370-8fae-8ebf326b5297}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{10aac7e2-7bca-4b00-abdc-cecf98219962}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{234f7022-a3ae-4891-b047-bae630c19a0a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d7112e6f-6bec-4b0a-919a-12f97ddd6de9}",
   "sourcePort": "output0",
   "targetUuid": "{234f7022-a3ae-4891-b047-bae630c19a0a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8352508b-ab12-4f89-a822-08d4874c1aad}",
   "sourcePort": "normal",
   "targetUuid": "{0e5bfabd-0cc4-4d0c-9d53-9fa15b74c09a}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{0e5bfabd-0cc4-4d0c-9d53-9fa15b74c09a}",
   "sourcePort": "transformed",
   "targetUuid": "{26e3a9a6-25ab-46a7-b815-906828e6bc97}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{26e3a9a6-25ab-46a7-b815-906828e6bc97}",
   "sourcePort": "output0",
   "targetUuid": "{2653bbb1-c761-4898-9462-6648257236b4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2653bbb1-c761-4898-9462-6648257236b4}",
   "sourcePort": "output0",
   "targetUuid": "{2c978c50-780f-49b4-9272-0b8e91a0fd95}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{69a88abe-8f22-4ff4-8a66-5704eb0602ac}",
   "sourcePort": "output0",
   "targetUuid": "{2c978c50-780f-49b4-9272-0b8e91a0fd95}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2c978c50-780f-49b4-9272-0b8e91a0fd95}",
   "sourcePort": "output0",
   "targetUuid": "{fc273c09-2150-48e9-92e4-41f436a44b85}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "normalScaling",
   "targetUuid": "{2653bbb1-c761-4898-9462-6648257236b4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{69a88abe-8f22-4ff4-8a66-5704eb0602ac}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4861fd08-af6b-49ac-a56b-f8e8bf26f260}",
   "sourcePort": "output0",
   "targetUuid": "{410cbb99-e511-4f77-b51e-7c764d39ea57}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fc273c09-2150-48e9-92e4-41f436a44b85}",
   "sourcePort": "output0",
   "targetUuid": "{4861fd08-af6b-49ac-a56b-f8e8bf26f260}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{debb0578-3104-41a8-8515-876ac420f42d}",
   "sourcePort": "z",
   "targetUuid": "{80090362-ea00-4124-a7d1-4dafa6e075c0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{80090362-ea00-4124-a7d1-4dafa6e075c0}",
   "sourcePort": "output0",
   "targetUuid": "{b5575cf7-3e45-40d5-b393-5a0ae58fdea6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{80090362-ea00-4124-a7d1-4dafa6e075c0}",
   "sourcePort": "output0",
   "targetUuid": "{b5575cf7-3e45-40d5-b393-5a0ae58fdea6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b5575cf7-3e45-40d5-b393-5a0ae58fdea6}",
   "sourcePort": "output0",
   "targetUuid": "{267a4969-eae2-4850-b6c8-6c6a04811a78}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b5575cf7-3e45-40d5-b393-5a0ae58fdea6}",
   "sourcePort": "output0",
   "targetUuid": "{3fa596c8-c764-42e3-ae52-6e78500b19f8}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{fc273c09-2150-48e9-92e4-41f436a44b85}",
   "sourcePort": "output0",
   "targetUuid": "{debb0578-3104-41a8-8515-876ac420f42d}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{9c237daa-6751-43c3-a167-b7febdbc22a7}",
   "sourcePort": "color",
   "targetUuid": "{12e06e57-f8bd-4f73-aab3-d28b70bb55bd}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{12e06e57-f8bd-4f73-aab3-d28b70bb55bd}",
   "sourcePort": "mixed",
   "targetUuid": "{c29d84b1-5747-42ca-a9ca-952ea4a532ca}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{12e06e57-f8bd-4f73-aab3-d28b70bb55bd}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "postGain",
   "targetUuid": "{c29d84b1-5747-42ca-a9ca-952ea4a532ca}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c29d84b1-5747-42ca-a9ca-952ea4a532ca}",
   "sourcePort": "output0",
   "targetUuid": "{65b02a4c-055e-4370-8fae-8ebf326b5297}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{410cbb99-e511-4f77-b51e-7c764d39ea57}",
   "sourcePort": "output0",
   "targetUuid": "{99252691-dc2a-44ea-91ff-8b8c1b4fa9b9}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{99252691-dc2a-44ea-91ff-8b8c1b4fa9b9}",
   "sourcePort": "color",
   "targetUuid": "{e057d168-8179-4c55-9cfb-e126832fc286}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e4595235-ab9e-41a5-b630-a5a9ac31ab89}",
   "sourcePort": "reflection",
   "targetUuid": "{99252691-dc2a-44ea-91ff-8b8c1b4fa9b9}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{eea08cb9-3549-4e43-b7cb-20f5ed8a12b8}",
   "sourcePort": "color",
   "targetUuid": "{d7112e6f-6bec-4b0a-919a-12f97ddd6de9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e4595235-ab9e-41a5-b630-a5a9ac31ab89}",
   "sourcePort": "uv",
   "targetUuid": "{eea08cb9-3549-4e43-b7cb-20f5ed8a12b8}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{65b02a4c-055e-4370-8fae-8ebf326b5297}",
   "sourcePort": "output0",
   "targetUuid": "{fabbdc1d-d452-42a5-84b9-f95a62c0a673}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{fabbdc1d-d452-42a5-84b9-f95a62c0a673}",
   "sourcePort": "shader",
   "targetUuid": "{ea836f62-1acd-430b-a0e4-2480b089f892}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{70fefaed-9144-44f6-901b-68bb620f6527}",
   "sourcePort": "value",
   "targetUuid": "{410cbb99-e511-4f77-b51e-7c764d39ea57}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{609a6801-ec05-48e6-8085-037e92689fef}",
   "sourcePort": "value",
   "targetUuid": "{4861fd08-af6b-49ac-a56b-f8e8bf26f260}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c498ed8d-d2c9-4c73-ae79-4756ff9a317f}",
   "sourcePort": "value",
   "targetUuid": "{26e3a9a6-25ab-46a7-b815-906828e6bc97}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2204eced-2a67-4932-bfa7-efdb3e5c59e5}",
   "sourcePort": "value",
   "targetUuid": "{69a88abe-8f22-4ff4-8a66-5704eb0602ac}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb1c7f97-00ad-47a3-8514-4b6ca98869b8}",
   "sourcePort": "value",
   "targetUuid": "{80090362-ea00-4124-a7d1-4dafa6e075c0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8c742722-0b6c-4a03-b73f-1805f09a181f}",
   "sourcePort": "value",
   "targetUuid": "{12e06e57-f8bd-4f73-aab3-d28b70bb55bd}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{99252691-dc2a-44ea-91ff-8b8c1b4fa9b9}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{99252691-dc2a-44ea-91ff-8b8c1b4fa9b9}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{99252691-dc2a-44ea-91ff-8b8c1b4fa9b9}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{eea08cb9-3549-4e43-b7cb-20f5ed8a12b8}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{c0965ea6-c9fb-47a6-b147-db6cf88fdb13}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{eea08cb9-3549-4e43-b7cb-20f5ed8a12b8}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;"
    }
   ]
  }
 }
}