{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{23aa1109-4a16-4be3-94ec-d2c7b59ac2e3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2a2dee07-cc4d-4671-b960-23dbc7c88c37}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bd48e351-9ced-4adc-bd8a-af3b73b9290e}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{c7cacada-58df-4a23-80b0-53a8f7080778}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{65e26ea8-d89b-4199-b6d9-f99db4296f42}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c496ec52-1bf8-446b-b188-994db21db60a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ade733fd-5853-4c1c-812a-b2d5348f40d5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e3968f0d-63e5-4b29-83be-28f00c2a6551}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{1187b587-8970-46e9-a61c-384aa3ab0073}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{eea1a998-9b42-4aa6-811b-71cba3116a63}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{14f2a2b6-8bea-4a2b-954a-1d8e54f9c31a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{900c20d2-51ab-47c1-bd23-ffb51ba2d046}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{7e1c3f47-41a2-4694-ba67-a954efe5d5d5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1ab2002e-432f-4fe6-ba22-3dee8e26e165}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e7af9a6a-682b-409d-9739-1da16888709c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{de74f6a4-b0ba-45e9-aff8-be5651b9a069}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{229deaa9-de37-44f7-9a93-665f14dc832c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{debe42fb-38a0-4e98-96c6-69f5749f1d5c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{88080825-789c-490e-b6bf-aeba5e8b1058}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{a1ce5951-ccba-4fd8-81a5-0e0a32478072}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{4dbc9dc1-c938-4dc0-8529-47c00686ec10}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{5a61275d-60af-40f9-a27c-65a27e99886b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e2148f00-2b93-44a1-ad3a-56782e0dbdc8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fb0c95d8-a3e6-4d6a-acdd-61267e743a0e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{8bde957d-c38a-4c18-9860-aa89e177d0bb}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{6231e186-f985-4773-8830-3303a6dfbe6d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{95d46867-89c1-4614-974a-50119212bff3}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{b9ad0f65-c243-461a-a77b-37c83aea883b}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{840d9b8c-6e11-420d-a182-d17e03faf1f6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{071c892c-3ff5-4590-acd3-e6d9bd35c712}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{615464c4-5385-44e2-8210-33f127ebfc15}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ce9c61c6-97d8-4faa-912d-d96f20f59d9f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{5e2f97d8-5e7c-45b6-8586-2d289fcf2377}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{78f051be-e3a3-4c8a-8556-e1e9fe049f9f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0bbb8214-2940-488b-add8-addcd2058f97}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{5a61275d-60af-40f9-a27c-65a27e99886b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{5a61275d-60af-40f9-a27c-65a27e99886b}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{c7cacada-58df-4a23-80b0-53a8f7080778}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{c7cacada-58df-4a23-80b0-53a8f7080778}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{5a61275d-60af-40f9-a27c-65a27e99886b}",
   "sourcePort": "mixed",
   "targetUuid": "{e2148f00-2b93-44a1-ad3a-56782e0dbdc8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c7cacada-58df-4a23-80b0-53a8f7080778}",
   "sourcePort": "mixed",
   "targetUuid": "{65e26ea8-d89b-4199-b6d9-f99db4296f42}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e2148f00-2b93-44a1-ad3a-56782e0dbdc8}",
   "sourcePort": "output0",
   "targetUuid": "{bd48e351-9ced-4adc-bd8a-af3b73b9290e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bd48e351-9ced-4adc-bd8a-af3b73b9290e}",
   "sourcePort": "output0",
   "targetUuid": "{2a2dee07-cc4d-4671-b960-23dbc7c88c37}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c496ec52-1bf8-446b-b188-994db21db60a}",
   "sourcePort": "output0",
   "targetUuid": "{2a2dee07-cc4d-4671-b960-23dbc7c88c37}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2a2dee07-cc4d-4671-b960-23dbc7c88c37}",
   "sourcePort": "output0",
   "targetUuid": "{23aa1109-4a16-4be3-94ec-d2c7b59ac2e3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{23aa1109-4a16-4be3-94ec-d2c7b59ac2e3}",
   "sourcePort": "output0",
   "targetUuid": "{a1ce5951-ccba-4fd8-81a5-0e0a32478072}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{bd48e351-9ced-4adc-bd8a-af3b73b9290e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{c496ec52-1bf8-446b-b188-994db21db60a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{65e26ea8-d89b-4199-b6d9-f99db4296f42}",
   "sourcePort": "output0",
   "targetUuid": "{c496ec52-1bf8-446b-b188-994db21db60a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b9ad0f65-c243-461a-a77b-37c83aea883b}",
   "sourcePort": "normal",
   "targetUuid": "{7e1c3f47-41a2-4694-ba67-a954efe5d5d5}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{7e1c3f47-41a2-4694-ba67-a954efe5d5d5}",
   "sourcePort": "transformed",
   "targetUuid": "{900c20d2-51ab-47c1-bd23-ffb51ba2d046}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{900c20d2-51ab-47c1-bd23-ffb51ba2d046}",
   "sourcePort": "output0",
   "targetUuid": "{14f2a2b6-8bea-4a2b-954a-1d8e54f9c31a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{14f2a2b6-8bea-4a2b-954a-1d8e54f9c31a}",
   "sourcePort": "output0",
   "targetUuid": "{eea1a998-9b42-4aa6-811b-71cba3116a63}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1ab2002e-432f-4fe6-ba22-3dee8e26e165}",
   "sourcePort": "output0",
   "targetUuid": "{eea1a998-9b42-4aa6-811b-71cba3116a63}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eea1a998-9b42-4aa6-811b-71cba3116a63}",
   "sourcePort": "output0",
   "targetUuid": "{1187b587-8970-46e9-a61c-384aa3ab0073}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "normalScaling",
   "targetUuid": "{14f2a2b6-8bea-4a2b-954a-1d8e54f9c31a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{1ab2002e-432f-4fe6-ba22-3dee8e26e165}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e3968f0d-63e5-4b29-83be-28f00c2a6551}",
   "sourcePort": "output0",
   "targetUuid": "{ade733fd-5853-4c1c-812a-b2d5348f40d5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1187b587-8970-46e9-a61c-384aa3ab0073}",
   "sourcePort": "output0",
   "targetUuid": "{e3968f0d-63e5-4b29-83be-28f00c2a6551}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{de74f6a4-b0ba-45e9-aff8-be5651b9a069}",
   "sourcePort": "z",
   "targetUuid": "{e7af9a6a-682b-409d-9739-1da16888709c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e7af9a6a-682b-409d-9739-1da16888709c}",
   "sourcePort": "output0",
   "targetUuid": "{229deaa9-de37-44f7-9a93-665f14dc832c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e7af9a6a-682b-409d-9739-1da16888709c}",
   "sourcePort": "output0",
   "targetUuid": "{229deaa9-de37-44f7-9a93-665f14dc832c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{229deaa9-de37-44f7-9a93-665f14dc832c}",
   "sourcePort": "output0",
   "targetUuid": "{5a61275d-60af-40f9-a27c-65a27e99886b}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{229deaa9-de37-44f7-9a93-665f14dc832c}",
   "sourcePort": "output0",
   "targetUuid": "{c7cacada-58df-4a23-80b0-53a8f7080778}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{1187b587-8970-46e9-a61c-384aa3ab0073}",
   "sourcePort": "output0",
   "targetUuid": "{de74f6a4-b0ba-45e9-aff8-be5651b9a069}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{8bde957d-c38a-4c18-9860-aa89e177d0bb}",
   "sourcePort": "color",
   "targetUuid": "{6231e186-f985-4773-8830-3303a6dfbe6d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{6231e186-f985-4773-8830-3303a6dfbe6d}",
   "sourcePort": "mixed",
   "targetUuid": "{fb0c95d8-a3e6-4d6a-acdd-61267e743a0e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{6231e186-f985-4773-8830-3303a6dfbe6d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "postGain",
   "targetUuid": "{fb0c95d8-a3e6-4d6a-acdd-61267e743a0e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fb0c95d8-a3e6-4d6a-acdd-61267e743a0e}",
   "sourcePort": "output0",
   "targetUuid": "{23aa1109-4a16-4be3-94ec-d2c7b59ac2e3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a1ce5951-ccba-4fd8-81a5-0e0a32478072}",
   "sourcePort": "shader",
   "targetUuid": "{88080825-789c-490e-b6bf-aeba5e8b1058}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{4dbc9dc1-c938-4dc0-8529-47c00686ec10}",
   "sourcePort": "color",
   "targetUuid": "{65e26ea8-d89b-4199-b6d9-f99db4296f42}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{debe42fb-38a0-4e98-96c6-69f5749f1d5c}",
   "sourcePort": "uv",
   "targetUuid": "{4dbc9dc1-c938-4dc0-8529-47c00686ec10}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{ade733fd-5853-4c1c-812a-b2d5348f40d5}",
   "sourcePort": "output0",
   "targetUuid": "{840d9b8c-6e11-420d-a182-d17e03faf1f6}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{b9ad0f65-c243-461a-a77b-37c83aea883b}",
   "sourcePort": "position",
   "targetUuid": "{840d9b8c-6e11-420d-a182-d17e03faf1f6}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{840d9b8c-6e11-420d-a182-d17e03faf1f6}",
   "sourcePort": "color",
   "targetUuid": "{e2148f00-2b93-44a1-ad3a-56782e0dbdc8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{071c892c-3ff5-4590-acd3-e6d9bd35c712}",
   "sourcePort": "value",
   "targetUuid": "{ade733fd-5853-4c1c-812a-b2d5348f40d5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{615464c4-5385-44e2-8210-33f127ebfc15}",
   "sourcePort": "value",
   "targetUuid": "{e3968f0d-63e5-4b29-83be-28f00c2a6551}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ce9c61c6-97d8-4faa-912d-d96f20f59d9f}",
   "sourcePort": "value",
   "targetUuid": "{900c20d2-51ab-47c1-bd23-ffb51ba2d046}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5e2f97d8-5e7c-45b6-8586-2d289fcf2377}",
   "sourcePort": "value",
   "targetUuid": "{1ab2002e-432f-4fe6-ba22-3dee8e26e165}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{78f051be-e3a3-4c8a-8556-e1e9fe049f9f}",
   "sourcePort": "value",
   "targetUuid": "{e7af9a6a-682b-409d-9739-1da16888709c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0bbb8214-2940-488b-add8-addcd2058f97}",
   "sourcePort": "value",
   "targetUuid": "{6231e186-f985-4773-8830-3303a6dfbe6d}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{4dbc9dc1-c938-4dc0-8529-47c00686ec10}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{4dbc9dc1-c938-4dc0-8529-47c00686ec10}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{840d9b8c-6e11-420d-a182-d17e03faf1f6}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{840d9b8c-6e11-420d-a182-d17e03faf1f6}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{95d46867-89c1-4614-974a-50119212bff3}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{840d9b8c-6e11-420d-a182-d17e03faf1f6}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}