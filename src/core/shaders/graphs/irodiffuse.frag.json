{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{560606dd-74f7-4c0a-8af3-3dfc797f5bbd}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fc8c224a-fc68-4e6e-835b-4cd7118f3604}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5dc6168d-73fb-46a0-9d04-a9160750e9d7}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{26d26681-f312-4026-9b81-c8932dc1a8c9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{57e80376-3f9b-4ca4-b2e9-dfa3321f57dc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b5955aba-d8cc-4fe5-a4a4-07bc8c6a306f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{aff8ead9-014a-4315-844c-8ce6f958e37a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f48356e2-9c29-4e0f-89a3-476b20d4a242}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{88b7c222-7b82-4912-a58b-9e01911ea26c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{afc431d9-3979-47dd-9a4a-d157516d6fac}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1ff90d6d-cd5f-4565-9bd8-c6d3bfbbf8b2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6a865e46-2090-4b01-851e-5bc2d13bdbd2}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{8d1af908-d054-4aba-8838-4b5d71dd920c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a1b3f07e-245b-4c44-967c-c451b0a4bf5f}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fee08717-e94f-4a28-a2e0-95d4d1dab49e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{6bd4876b-9b8f-47d9-9613-d59901130656}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b1cf43ba-869b-4798-8bdc-5dee682b8fe3}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{88a10e57-7ad2-4862-a610-6b65778a0bf5}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{814de1bb-99ce-494f-b82b-d9f2450fa811}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{07e9a3ec-9de3-40d6-b6d2-7afe0594856b}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{2a104cef-2c27-4495-b62e-030f88f16ef5}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{b37f5753-681f-49e5-884e-e8e921882536}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{86538a01-89e5-4b11-8d0a-e83e8eea5784}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0fbae95e-1630-41ca-81b7-e74a4353c570}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{c3d1f62d-762d-49ab-85df-23fa2610140c}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{f3e15a00-f829-4921-ab3b-12434848eca8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{8926cca5-936a-4dc9-a39a-e8990ac1915d}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{b85309e7-8077-482b-931d-2489c3546310}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0575348f-9f20-4438-95b2-f7b1a0f11bac}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c7f6fd33-d302-4eac-be79-fdbd045d1175}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ba3df382-cc16-4367-b3b0-d67f7d29e5d0}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{64fd7417-084a-44f4-a630-ae6e25e9a9e6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{c99b4a7c-95ba-407f-afb0-1f5583684aff}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{765eccb1-f580-40a7-a6c9-28251cbd5729}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{b37f5753-681f-49e5-884e-e8e921882536}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{b37f5753-681f-49e5-884e-e8e921882536}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{26d26681-f312-4026-9b81-c8932dc1a8c9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{26d26681-f312-4026-9b81-c8932dc1a8c9}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b37f5753-681f-49e5-884e-e8e921882536}",
   "sourcePort": "mixed",
   "targetUuid": "{86538a01-89e5-4b11-8d0a-e83e8eea5784}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{26d26681-f312-4026-9b81-c8932dc1a8c9}",
   "sourcePort": "mixed",
   "targetUuid": "{57e80376-3f9b-4ca4-b2e9-dfa3321f57dc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{86538a01-89e5-4b11-8d0a-e83e8eea5784}",
   "sourcePort": "output0",
   "targetUuid": "{5dc6168d-73fb-46a0-9d04-a9160750e9d7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5dc6168d-73fb-46a0-9d04-a9160750e9d7}",
   "sourcePort": "output0",
   "targetUuid": "{fc8c224a-fc68-4e6e-835b-4cd7118f3604}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b5955aba-d8cc-4fe5-a4a4-07bc8c6a306f}",
   "sourcePort": "output0",
   "targetUuid": "{fc8c224a-fc68-4e6e-835b-4cd7118f3604}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fc8c224a-fc68-4e6e-835b-4cd7118f3604}",
   "sourcePort": "output0",
   "targetUuid": "{560606dd-74f7-4c0a-8af3-3dfc797f5bbd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{560606dd-74f7-4c0a-8af3-3dfc797f5bbd}",
   "sourcePort": "output0",
   "targetUuid": "{07e9a3ec-9de3-40d6-b6d2-7afe0594856b}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{5dc6168d-73fb-46a0-9d04-a9160750e9d7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{b5955aba-d8cc-4fe5-a4a4-07bc8c6a306f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{57e80376-3f9b-4ca4-b2e9-dfa3321f57dc}",
   "sourcePort": "output0",
   "targetUuid": "{b5955aba-d8cc-4fe5-a4a4-07bc8c6a306f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8926cca5-936a-4dc9-a39a-e8990ac1915d}",
   "sourcePort": "normal",
   "targetUuid": "{8d1af908-d054-4aba-8838-4b5d71dd920c}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{8d1af908-d054-4aba-8838-4b5d71dd920c}",
   "sourcePort": "transformed",
   "targetUuid": "{6a865e46-2090-4b01-851e-5bc2d13bdbd2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6a865e46-2090-4b01-851e-5bc2d13bdbd2}",
   "sourcePort": "output0",
   "targetUuid": "{1ff90d6d-cd5f-4565-9bd8-c6d3bfbbf8b2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1ff90d6d-cd5f-4565-9bd8-c6d3bfbbf8b2}",
   "sourcePort": "output0",
   "targetUuid": "{afc431d9-3979-47dd-9a4a-d157516d6fac}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a1b3f07e-245b-4c44-967c-c451b0a4bf5f}",
   "sourcePort": "output0",
   "targetUuid": "{afc431d9-3979-47dd-9a4a-d157516d6fac}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{afc431d9-3979-47dd-9a4a-d157516d6fac}",
   "sourcePort": "output0",
   "targetUuid": "{88b7c222-7b82-4912-a58b-9e01911ea26c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "normalScaling",
   "targetUuid": "{1ff90d6d-cd5f-4565-9bd8-c6d3bfbbf8b2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{a1b3f07e-245b-4c44-967c-c451b0a4bf5f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f48356e2-9c29-4e0f-89a3-476b20d4a242}",
   "sourcePort": "output0",
   "targetUuid": "{aff8ead9-014a-4315-844c-8ce6f958e37a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{88b7c222-7b82-4912-a58b-9e01911ea26c}",
   "sourcePort": "output0",
   "targetUuid": "{f48356e2-9c29-4e0f-89a3-476b20d4a242}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6bd4876b-9b8f-47d9-9613-d59901130656}",
   "sourcePort": "z",
   "targetUuid": "{fee08717-e94f-4a28-a2e0-95d4d1dab49e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fee08717-e94f-4a28-a2e0-95d4d1dab49e}",
   "sourcePort": "output0",
   "targetUuid": "{b1cf43ba-869b-4798-8bdc-5dee682b8fe3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fee08717-e94f-4a28-a2e0-95d4d1dab49e}",
   "sourcePort": "output0",
   "targetUuid": "{b1cf43ba-869b-4798-8bdc-5dee682b8fe3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b1cf43ba-869b-4798-8bdc-5dee682b8fe3}",
   "sourcePort": "output0",
   "targetUuid": "{b37f5753-681f-49e5-884e-e8e921882536}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b1cf43ba-869b-4798-8bdc-5dee682b8fe3}",
   "sourcePort": "output0",
   "targetUuid": "{26d26681-f312-4026-9b81-c8932dc1a8c9}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{88b7c222-7b82-4912-a58b-9e01911ea26c}",
   "sourcePort": "output0",
   "targetUuid": "{6bd4876b-9b8f-47d9-9613-d59901130656}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{c3d1f62d-762d-49ab-85df-23fa2610140c}",
   "sourcePort": "color",
   "targetUuid": "{f3e15a00-f829-4921-ab3b-12434848eca8}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{f3e15a00-f829-4921-ab3b-12434848eca8}",
   "sourcePort": "mixed",
   "targetUuid": "{0fbae95e-1630-41ca-81b7-e74a4353c570}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{f3e15a00-f829-4921-ab3b-12434848eca8}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "postGain",
   "targetUuid": "{0fbae95e-1630-41ca-81b7-e74a4353c570}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0fbae95e-1630-41ca-81b7-e74a4353c570}",
   "sourcePort": "output0",
   "targetUuid": "{560606dd-74f7-4c0a-8af3-3dfc797f5bbd}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{07e9a3ec-9de3-40d6-b6d2-7afe0594856b}",
   "sourcePort": "shader",
   "targetUuid": "{814de1bb-99ce-494f-b82b-d9f2450fa811}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{2a104cef-2c27-4495-b62e-030f88f16ef5}",
   "sourcePort": "color",
   "targetUuid": "{57e80376-3f9b-4ca4-b2e9-dfa3321f57dc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{88a10e57-7ad2-4862-a610-6b65778a0bf5}",
   "sourcePort": "uv",
   "targetUuid": "{2a104cef-2c27-4495-b62e-030f88f16ef5}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{aff8ead9-014a-4315-844c-8ce6f958e37a}",
   "sourcePort": "output0",
   "targetUuid": "{b85309e7-8077-482b-931d-2489c3546310}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{b85309e7-8077-482b-931d-2489c3546310}",
   "sourcePort": "color",
   "targetUuid": "{86538a01-89e5-4b11-8d0a-e83e8eea5784}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{88a10e57-7ad2-4862-a610-6b65778a0bf5}",
   "sourcePort": "reflection",
   "targetUuid": "{b85309e7-8077-482b-931d-2489c3546310}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{0575348f-9f20-4438-95b2-f7b1a0f11bac}",
   "sourcePort": "value",
   "targetUuid": "{aff8ead9-014a-4315-844c-8ce6f958e37a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c7f6fd33-d302-4eac-be79-fdbd045d1175}",
   "sourcePort": "value",
   "targetUuid": "{f48356e2-9c29-4e0f-89a3-476b20d4a242}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ba3df382-cc16-4367-b3b0-d67f7d29e5d0}",
   "sourcePort": "value",
   "targetUuid": "{6a865e46-2090-4b01-851e-5bc2d13bdbd2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{64fd7417-084a-44f4-a630-ae6e25e9a9e6}",
   "sourcePort": "value",
   "targetUuid": "{a1b3f07e-245b-4c44-967c-c451b0a4bf5f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c99b4a7c-95ba-407f-afb0-1f5583684aff}",
   "sourcePort": "value",
   "targetUuid": "{fee08717-e94f-4a28-a2e0-95d4d1dab49e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{765eccb1-f580-40a7-a6c9-28251cbd5729}",
   "sourcePort": "value",
   "targetUuid": "{f3e15a00-f829-4921-ab3b-12434848eca8}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{2a104cef-2c27-4495-b62e-030f88f16ef5}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{2a104cef-2c27-4495-b62e-030f88f16ef5}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{b85309e7-8077-482b-931d-2489c3546310}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{b85309e7-8077-482b-931d-2489c3546310}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{301dd9a1-c22d-4674-ae9d-50f18540d7ff}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{b85309e7-8077-482b-931d-2489c3546310}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}