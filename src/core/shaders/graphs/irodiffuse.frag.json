{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b30a4e78-10c3-482c-9cfa-07044c6a5cc2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{83ba3025-a3fe-456a-922e-4cc044b0cad4}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{b0386b9b-b447-47d0-8a4e-21c170dba325}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e1e0d563-5f84-4f91-9dde-ce1def6d9091}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0f83898b-8b11-4272-83fa-31ab4cbc5df3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b4c3a682-6885-4889-b0a2-ed0b045d593c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0ab4e39a-7f14-4d62-892f-c8ef0efeb06e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{07a3f745-b66d-48a3-9d72-b90436f26382}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ef8a85f6-2630-4779-8698-8428f9c408f0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f8d74ffd-b39a-488b-8b23-c4b536995e93}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{250548a7-8152-45c8-928b-f42d7a69b38c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f080d1d8-53de-4713-99f4-4301edd8f64f}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{490a6f53-89b5-4c2b-9924-3c555b62205c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{201ebf25-3514-49b3-97bb-dbe739710f50}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{b57b5220-d30e-4b7e-8bb9-a42c775d1b3e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{69b3d286-207d-4f7c-b82b-f4a7edee3985}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{cd8e42c8-8c53-49cd-8d1c-d5aad9b4922e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{6ba5ab27-df24-4863-83a2-dc3cd8f431a9}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{597f38ac-c648-44f7-a20d-c8f25a26d394}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{b4bdb8ff-bd1a-493f-a3d9-7ccc5bd08063}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{becfe10e-9b75-4088-8494-2a1930633c26}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{109e7fad-8def-4dde-bb67-85da21091347}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3a353ee9-3c01-4bd6-a7ac-8124fef11405}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{50918fe8-c6fe-4302-826a-a29d59e0618d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{28c22c4c-735d-4216-9d96-acfc8eddde61}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{42e4fd6c-6de8-4a7a-be70-3344ddc30143}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{ca00e436-5044-4e7e-8650-0cdec5720cad}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{8856993e-df88-4ed6-b169-e21be25ae708}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{f27d4c87-50f0-4984-a745-a01813917b0d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{7a7cdef4-a9a4-4abb-9751-a89cb59bcf0b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d9d78c53-f2cb-4214-9009-f61761429f15}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{2222639f-9712-49a5-bfe9-f503a328eee7}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{063013bd-8998-47c2-b840-f683624f74b4}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{25b1a8e4-c5ab-41f4-a1c6-a391703109b8}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{bd8ff50a-358f-49db-a729-607de7295f20}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{0fe5ba10-c7f5-4c36-913d-ded32903c876}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{b57b5220-d30e-4b7e-8bb9-a42c775d1b3e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{b57b5220-d30e-4b7e-8bb9-a42c775d1b3e}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{b0386b9b-b447-47d0-8a4e-21c170dba325}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{b0386b9b-b447-47d0-8a4e-21c170dba325}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b57b5220-d30e-4b7e-8bb9-a42c775d1b3e}",
   "sourcePort": "mixed",
   "targetUuid": "{69b3d286-207d-4f7c-b82b-f4a7edee3985}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b0386b9b-b447-47d0-8a4e-21c170dba325}",
   "sourcePort": "mixed",
   "targetUuid": "{e1e0d563-5f84-4f91-9dde-ce1def6d9091}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{69b3d286-207d-4f7c-b82b-f4a7edee3985}",
   "sourcePort": "output0",
   "targetUuid": "{83ba3025-a3fe-456a-922e-4cc044b0cad4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{83ba3025-a3fe-456a-922e-4cc044b0cad4}",
   "sourcePort": "output0",
   "targetUuid": "{b30a4e78-10c3-482c-9cfa-07044c6a5cc2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0f83898b-8b11-4272-83fa-31ab4cbc5df3}",
   "sourcePort": "output0",
   "targetUuid": "{b30a4e78-10c3-482c-9cfa-07044c6a5cc2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b30a4e78-10c3-482c-9cfa-07044c6a5cc2}",
   "sourcePort": "output0",
   "targetUuid": "{3a353ee9-3c01-4bd6-a7ac-8124fef11405}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{83ba3025-a3fe-456a-922e-4cc044b0cad4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{0f83898b-8b11-4272-83fa-31ab4cbc5df3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e1e0d563-5f84-4f91-9dde-ce1def6d9091}",
   "sourcePort": "output0",
   "targetUuid": "{0f83898b-8b11-4272-83fa-31ab4cbc5df3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{28c22c4c-735d-4216-9d96-acfc8eddde61}",
   "sourcePort": "transformed",
   "targetUuid": "{250548a7-8152-45c8-928b-f42d7a69b38c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{250548a7-8152-45c8-928b-f42d7a69b38c}",
   "sourcePort": "output0",
   "targetUuid": "{f8d74ffd-b39a-488b-8b23-c4b536995e93}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f8d74ffd-b39a-488b-8b23-c4b536995e93}",
   "sourcePort": "output0",
   "targetUuid": "{ef8a85f6-2630-4779-8698-8428f9c408f0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f080d1d8-53de-4713-99f4-4301edd8f64f}",
   "sourcePort": "output0",
   "targetUuid": "{ef8a85f6-2630-4779-8698-8428f9c408f0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ef8a85f6-2630-4779-8698-8428f9c408f0}",
   "sourcePort": "output0",
   "targetUuid": "{07a3f745-b66d-48a3-9d72-b90436f26382}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{f080d1d8-53de-4713-99f4-4301edd8f64f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0ab4e39a-7f14-4d62-892f-c8ef0efeb06e}",
   "sourcePort": "output0",
   "targetUuid": "{b4c3a682-6885-4889-b0a2-ed0b045d593c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{07a3f745-b66d-48a3-9d72-b90436f26382}",
   "sourcePort": "output0",
   "targetUuid": "{0ab4e39a-7f14-4d62-892f-c8ef0efeb06e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{becfe10e-9b75-4088-8494-2a1930633c26}",
   "sourcePort": "z",
   "targetUuid": "{490a6f53-89b5-4c2b-9924-3c555b62205c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{490a6f53-89b5-4c2b-9924-3c555b62205c}",
   "sourcePort": "output0",
   "targetUuid": "{201ebf25-3514-49b3-97bb-dbe739710f50}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{490a6f53-89b5-4c2b-9924-3c555b62205c}",
   "sourcePort": "output0",
   "targetUuid": "{201ebf25-3514-49b3-97bb-dbe739710f50}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{201ebf25-3514-49b3-97bb-dbe739710f50}",
   "sourcePort": "output0",
   "targetUuid": "{b57b5220-d30e-4b7e-8bb9-a42c775d1b3e}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{201ebf25-3514-49b3-97bb-dbe739710f50}",
   "sourcePort": "output0",
   "targetUuid": "{b0386b9b-b447-47d0-8a4e-21c170dba325}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{07a3f745-b66d-48a3-9d72-b90436f26382}",
   "sourcePort": "output0",
   "targetUuid": "{becfe10e-9b75-4088-8494-2a1930633c26}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{6ba5ab27-df24-4863-83a2-dc3cd8f431a9}",
   "sourcePort": "color",
   "targetUuid": "{597f38ac-c648-44f7-a20d-c8f25a26d394}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{597f38ac-c648-44f7-a20d-c8f25a26d394}",
   "sourcePort": "mixed",
   "targetUuid": "{cd8e42c8-8c53-49cd-8d1c-d5aad9b4922e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{597f38ac-c648-44f7-a20d-c8f25a26d394}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "postGain",
   "targetUuid": "{cd8e42c8-8c53-49cd-8d1c-d5aad9b4922e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cd8e42c8-8c53-49cd-8d1c-d5aad9b4922e}",
   "sourcePort": "output0",
   "targetUuid": "{3a353ee9-3c01-4bd6-a7ac-8124fef11405}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b4c3a682-6885-4889-b0a2-ed0b045d593c}",
   "sourcePort": "output0",
   "targetUuid": "{b4bdb8ff-bd1a-493f-a3d9-7ccc5bd08063}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{b4bdb8ff-bd1a-493f-a3d9-7ccc5bd08063}",
   "sourcePort": "color",
   "targetUuid": "{69b3d286-207d-4f7c-b82b-f4a7edee3985}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{50918fe8-c6fe-4302-826a-a29d59e0618d}",
   "sourcePort": "reflection",
   "targetUuid": "{b4bdb8ff-bd1a-493f-a3d9-7ccc5bd08063}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{109e7fad-8def-4dde-bb67-85da21091347}",
   "sourcePort": "color",
   "targetUuid": "{e1e0d563-5f84-4f91-9dde-ce1def6d9091}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{50918fe8-c6fe-4302-826a-a29d59e0618d}",
   "sourcePort": "uv",
   "targetUuid": "{109e7fad-8def-4dde-bb67-85da21091347}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{ca00e436-5044-4e7e-8650-0cdec5720cad}",
   "sourcePort": "shader",
   "targetUuid": "{8856993e-df88-4ed6-b169-e21be25ae708}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "normalScaling",
   "targetUuid": "{f8d74ffd-b39a-488b-8b23-c4b536995e93}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{42e4fd6c-6de8-4a7a-be70-3344ddc30143}",
   "sourcePort": "normal",
   "targetUuid": "{28c22c4c-735d-4216-9d96-acfc8eddde61}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{3a353ee9-3c01-4bd6-a7ac-8124fef11405}",
   "sourcePort": "output0",
   "targetUuid": "{f27d4c87-50f0-4984-a745-a01813917b0d}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{f27d4c87-50f0-4984-a745-a01813917b0d}",
   "sourcePort": "color_out",
   "targetUuid": "{ca00e436-5044-4e7e-8650-0cdec5720cad}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{7a7cdef4-a9a4-4abb-9751-a89cb59bcf0b}",
   "sourcePort": "value",
   "targetUuid": "{b4c3a682-6885-4889-b0a2-ed0b045d593c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d9d78c53-f2cb-4214-9009-f61761429f15}",
   "sourcePort": "value",
   "targetUuid": "{0ab4e39a-7f14-4d62-892f-c8ef0efeb06e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2222639f-9712-49a5-bfe9-f503a328eee7}",
   "sourcePort": "value",
   "targetUuid": "{250548a7-8152-45c8-928b-f42d7a69b38c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{063013bd-8998-47c2-b840-f683624f74b4}",
   "sourcePort": "value",
   "targetUuid": "{f080d1d8-53de-4713-99f4-4301edd8f64f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{25b1a8e4-c5ab-41f4-a1c6-a391703109b8}",
   "sourcePort": "value",
   "targetUuid": "{490a6f53-89b5-4c2b-9924-3c555b62205c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bd8ff50a-358f-49db-a729-607de7295f20}",
   "sourcePort": "value",
   "targetUuid": "{597f38ac-c648-44f7-a20d-c8f25a26d394}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0fe5ba10-c7f5-4c36-913d-ded32903c876}",
   "sourcePort": "value",
   "targetUuid": "{f27d4c87-50f0-4984-a745-a01813917b0d}",
   "targetPort": "alpha"
  },
  {
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{b4bdb8ff-bd1a-493f-a3d9-7ccc5bd08063}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{b4bdb8ff-bd1a-493f-a3d9-7ccc5bd08063}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{b4bdb8ff-bd1a-493f-a3d9-7ccc5bd08063}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{109e7fad-8def-4dde-bb67-85da21091347}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{4978a8c3-4fff-48bb-9721-ec8c087f3553}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{109e7fad-8def-4dde-bb67-85da21091347}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postVertexColor",
    "postGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    float postVertexColor;\n    float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;"
    }
   ]
  }
 }
}