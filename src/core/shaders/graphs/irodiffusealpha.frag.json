{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b91c8155-3df2-4d61-bdac-fe3aa54d6864}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2aad9dc6-f95b-4a8c-adba-24b8bccd35ce}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{133090a7-8223-49a7-b779-8f26e80118c7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a51ff335-6bc2-4830-89bb-a3d8dca11c4d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{7b1992d9-942c-4cc3-83d1-123956ab40a2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0894dd52-efb8-4fb6-8ce3-7c17d071f0b8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8fbe8099-4995-48ff-beaf-6356d9f73153}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c4e92e16-b29f-41e7-b83e-913f9f9f5a62}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{94538aef-d001-40a8-abc9-86d5e35bc0f1}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{364afc06-43bc-43af-8ef6-408a697ecdd6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7eac9045-1756-4958-b504-bc75c316a661}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{3a2858af-830d-4333-8ca0-37fe20e03766}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{61001d20-27b0-4481-98b8-d9fda4cecfb2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{940f298b-d6b2-405e-8e97-ecf036e01bd7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{f92dadd5-5405-452a-9466-f694f1348ffb}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{5248b318-072f-4802-a060-9c4b058b366e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{98095a31-8d29-4872-bfce-965e1d276f67}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{6aba2cb6-9ff7-4c83-94e6-41e6550e0c96}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b410d55a-54f3-4e5b-8e55-b889c022329c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6f5a05f8-233d-4db0-b780-346cd5886569}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{34ba32f2-c00d-482e-beb3-53b635aac265}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4c8d6d10-b5e0-4df8-8a40-feac2505321e}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3d0735ae-ef98-4487-a7a2-4f7fc198fb50}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{78b65c31-41a9-4a9f-9623-fde0a98d41f6}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{ce554a2e-9b4c-4dd9-969c-03eef2daf8c4}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{0db45a3a-2603-476a-ade0-4d547d3d6aa5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b4afc294-1356-4eb9-bc0d-0ee4e971ad11}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{67dd0cd3-9531-467b-b90c-0b97c3904da1}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e7284783-d868-4c4b-88ca-54779b4adf9e}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{37d02ffa-ffc3-4422-810e-688aa6ff5a48}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{51533fb2-a5ce-4871-8673-776440d47b7c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d3f30bf4-d719-4cbc-ab64-1cd0b4d1eec6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{959a8e56-f8d3-4416-894a-595a79db679a}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{34ba32f2-c00d-482e-beb3-53b635aac265}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{34ba32f2-c00d-482e-beb3-53b635aac265}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{34ba32f2-c00d-482e-beb3-53b635aac265}",
   "sourcePort": "mixed",
   "targetUuid": "{61001d20-27b0-4481-98b8-d9fda4cecfb2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{61001d20-27b0-4481-98b8-d9fda4cecfb2}",
   "sourcePort": "output0",
   "targetUuid": "{2aad9dc6-f95b-4a8c-adba-24b8bccd35ce}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2aad9dc6-f95b-4a8c-adba-24b8bccd35ce}",
   "sourcePort": "output0",
   "targetUuid": "{b91c8155-3df2-4d61-bdac-fe3aa54d6864}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b91c8155-3df2-4d61-bdac-fe3aa54d6864}",
   "sourcePort": "output0",
   "targetUuid": "{78b65c31-41a9-4a9f-9623-fde0a98d41f6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{2aad9dc6-f95b-4a8c-adba-24b8bccd35ce}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{364afc06-43bc-43af-8ef6-408a697ecdd6}",
   "sourcePort": "normal",
   "targetUuid": "{94538aef-d001-40a8-abc9-86d5e35bc0f1}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{94538aef-d001-40a8-abc9-86d5e35bc0f1}",
   "sourcePort": "transformed",
   "targetUuid": "{c4e92e16-b29f-41e7-b83e-913f9f9f5a62}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c4e92e16-b29f-41e7-b83e-913f9f9f5a62}",
   "sourcePort": "output0",
   "targetUuid": "{8fbe8099-4995-48ff-beaf-6356d9f73153}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8fbe8099-4995-48ff-beaf-6356d9f73153}",
   "sourcePort": "output0",
   "targetUuid": "{0894dd52-efb8-4fb6-8ce3-7c17d071f0b8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7eac9045-1756-4958-b504-bc75c316a661}",
   "sourcePort": "output0",
   "targetUuid": "{0894dd52-efb8-4fb6-8ce3-7c17d071f0b8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0894dd52-efb8-4fb6-8ce3-7c17d071f0b8}",
   "sourcePort": "output0",
   "targetUuid": "{7b1992d9-942c-4cc3-83d1-123956ab40a2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "normalScaling",
   "targetUuid": "{8fbe8099-4995-48ff-beaf-6356d9f73153}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{7eac9045-1756-4958-b504-bc75c316a661}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a51ff335-6bc2-4830-89bb-a3d8dca11c4d}",
   "sourcePort": "output0",
   "targetUuid": "{133090a7-8223-49a7-b779-8f26e80118c7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7b1992d9-942c-4cc3-83d1-123956ab40a2}",
   "sourcePort": "output0",
   "targetUuid": "{a51ff335-6bc2-4830-89bb-a3d8dca11c4d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3a2858af-830d-4333-8ca0-37fe20e03766}",
   "sourcePort": "z",
   "targetUuid": "{3d0735ae-ef98-4487-a7a2-4f7fc198fb50}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3d0735ae-ef98-4487-a7a2-4f7fc198fb50}",
   "sourcePort": "output0",
   "targetUuid": "{4c8d6d10-b5e0-4df8-8a40-feac2505321e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3d0735ae-ef98-4487-a7a2-4f7fc198fb50}",
   "sourcePort": "output0",
   "targetUuid": "{4c8d6d10-b5e0-4df8-8a40-feac2505321e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4c8d6d10-b5e0-4df8-8a40-feac2505321e}",
   "sourcePort": "output0",
   "targetUuid": "{34ba32f2-c00d-482e-beb3-53b635aac265}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{7b1992d9-942c-4cc3-83d1-123956ab40a2}",
   "sourcePort": "output0",
   "targetUuid": "{3a2858af-830d-4333-8ca0-37fe20e03766}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{f92dadd5-5405-452a-9466-f694f1348ffb}",
   "sourcePort": "color",
   "targetUuid": "{5248b318-072f-4802-a060-9c4b058b366e}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{5248b318-072f-4802-a060-9c4b058b366e}",
   "sourcePort": "mixed",
   "targetUuid": "{940f298b-d6b2-405e-8e97-ecf036e01bd7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{5248b318-072f-4802-a060-9c4b058b366e}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "postGain",
   "targetUuid": "{940f298b-d6b2-405e-8e97-ecf036e01bd7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{940f298b-d6b2-405e-8e97-ecf036e01bd7}",
   "sourcePort": "output0",
   "targetUuid": "{78b65c31-41a9-4a9f-9623-fde0a98d41f6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{133090a7-8223-49a7-b779-8f26e80118c7}",
   "sourcePort": "output0",
   "targetUuid": "{6aba2cb6-9ff7-4c83-94e6-41e6550e0c96}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{6aba2cb6-9ff7-4c83-94e6-41e6550e0c96}",
   "sourcePort": "color",
   "targetUuid": "{61001d20-27b0-4481-98b8-d9fda4cecfb2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{78b65c31-41a9-4a9f-9623-fde0a98d41f6}",
   "sourcePort": "output0",
   "targetUuid": "{ce554a2e-9b4c-4dd9-969c-03eef2daf8c4}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{98095a31-8d29-4872-bfce-965e1d276f67}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{98095a31-8d29-4872-bfce-965e1d276f67}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{4c8d6d10-b5e0-4df8-8a40-feac2505321e}",
   "sourcePort": "output0",
   "targetUuid": "{98095a31-8d29-4872-bfce-965e1d276f67}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{98095a31-8d29-4872-bfce-965e1d276f67}",
   "sourcePort": "mixed",
   "targetUuid": "{b410d55a-54f3-4e5b-8e55-b889c022329c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6aba2cb6-9ff7-4c83-94e6-41e6550e0c96}",
   "sourcePort": "alpha",
   "targetUuid": "{b410d55a-54f3-4e5b-8e55-b889c022329c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b410d55a-54f3-4e5b-8e55-b889c022329c}",
   "sourcePort": "output0",
   "targetUuid": "{6f5a05f8-233d-4db0-b780-346cd5886569}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "alphaGain",
   "targetUuid": "{6f5a05f8-233d-4db0-b780-346cd5886569}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6f5a05f8-233d-4db0-b780-346cd5886569}",
   "sourcePort": "output0",
   "targetUuid": "{ce554a2e-9b4c-4dd9-969c-03eef2daf8c4}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{ce554a2e-9b4c-4dd9-969c-03eef2daf8c4}",
   "sourcePort": "shader",
   "targetUuid": "{0db45a3a-2603-476a-ade0-4d547d3d6aa5}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{b4afc294-1356-4eb9-bc0d-0ee4e971ad11}",
   "sourcePort": "value",
   "targetUuid": "{b91c8155-3df2-4d61-bdac-fe3aa54d6864}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{67dd0cd3-9531-467b-b90c-0b97c3904da1}",
   "sourcePort": "value",
   "targetUuid": "{133090a7-8223-49a7-b779-8f26e80118c7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e7284783-d868-4c4b-88ca-54779b4adf9e}",
   "sourcePort": "value",
   "targetUuid": "{a51ff335-6bc2-4830-89bb-a3d8dca11c4d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{37d02ffa-ffc3-4422-810e-688aa6ff5a48}",
   "sourcePort": "value",
   "targetUuid": "{c4e92e16-b29f-41e7-b83e-913f9f9f5a62}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{51533fb2-a5ce-4871-8673-776440d47b7c}",
   "sourcePort": "value",
   "targetUuid": "{7eac9045-1756-4958-b504-bc75c316a661}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d3f30bf4-d719-4cbc-ab64-1cd0b4d1eec6}",
   "sourcePort": "value",
   "targetUuid": "{5248b318-072f-4802-a060-9c4b058b366e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{959a8e56-f8d3-4416-894a-595a79db679a}",
   "sourcePort": "value",
   "targetUuid": "{3d0735ae-ef98-4487-a7a2-4f7fc198fb50}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{6aba2cb6-9ff7-4c83-94e6-41e6550e0c96}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{9b094d99-67a8-4a87-8fa6-d20fcbc863b9}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{6aba2cb6-9ff7-4c83-94e6-41e6550e0c96}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;"
    }
   ]
  }
 }
}