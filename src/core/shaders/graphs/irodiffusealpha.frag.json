{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{028c7cca-55f5-4fd3-ae9d-e3ebd48af3e6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dc9e7d82-6054-49db-8314-002f65feff91}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2adbd711-9a2f-4763-8c80-c7201322fd31}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{27a9740a-71d7-4cec-83a4-4cfcebf2d37c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{ed980525-8871-4237-bbe2-e47dd2cfce9e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c9492a70-99be-47b8-a6dc-5160cba5391d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f4d6472b-a1e6-40c8-b0ac-0f242afe5862}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d44700a8-53e5-4161-8bc1-3c384710c8ea}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{a3f45154-a4e4-4c4d-9eee-9f103ee725c2}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{8991736e-6b44-4937-b50f-5674641cc08a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{20133891-a322-4525-8236-9d4804a6bb72}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{fa6bca4f-ce68-49df-aaf9-e73e4ad91a0a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f48b75d9-7851-454a-8251-23b0e1e53b55}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5afd1230-eff6-41d3-8831-264596408ea3}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{540d13b6-fa55-45ed-8a2e-64fce6c16a83}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{ea7eea01-a7a5-474f-8ad0-a35df476f460}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dcb37a66-aa47-45fc-a409-2b597b26c2c3}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{708736ee-a37c-43a5-98c7-fdeb38467a6d}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8b1d3cbf-ca12-4b17-a446-046da3e334f1}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{45602384-6fd1-4a67-801f-4675e2e4f12f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{009dbd4e-f658-4a73-9aa6-3d82ecdc977b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{fbade823-405a-45ad-8ad7-db4e638ee59c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{b723676b-4e3d-44bc-b3a9-b9029cba052d}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{67e75caf-bf76-4d8c-abf7-47d31c4d8a14}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{944b458b-c71c-443f-afe7-94438c1efe0e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{f66543ad-2944-4d50-9c2d-971ce599999f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{11458c40-5802-468e-9a78-e99b329799aa}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{f5d6c499-f8f6-493e-876b-89855aa30a16}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{6b85b275-6197-4f0f-bef3-b962999d277d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{8055208e-ef76-4809-96df-7a05b036d729}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4ee14332-cc08-4265-a1ce-cf5536679083}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b8bd0024-a598-412d-8963-3f6904324b2d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{90283a71-2f1a-4822-94f1-0b1614a52007}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{708736ee-a37c-43a5-98c7-fdeb38467a6d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{708736ee-a37c-43a5-98c7-fdeb38467a6d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{708736ee-a37c-43a5-98c7-fdeb38467a6d}",
   "sourcePort": "mixed",
   "targetUuid": "{f48b75d9-7851-454a-8251-23b0e1e53b55}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f48b75d9-7851-454a-8251-23b0e1e53b55}",
   "sourcePort": "output0",
   "targetUuid": "{dc9e7d82-6054-49db-8314-002f65feff91}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{dc9e7d82-6054-49db-8314-002f65feff91}",
   "sourcePort": "output0",
   "targetUuid": "{028c7cca-55f5-4fd3-ae9d-e3ebd48af3e6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{028c7cca-55f5-4fd3-ae9d-e3ebd48af3e6}",
   "sourcePort": "output0",
   "targetUuid": "{009dbd4e-f658-4a73-9aa6-3d82ecdc977b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{dc9e7d82-6054-49db-8314-002f65feff91}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8991736e-6b44-4937-b50f-5674641cc08a}",
   "sourcePort": "normal",
   "targetUuid": "{a3f45154-a4e4-4c4d-9eee-9f103ee725c2}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{a3f45154-a4e4-4c4d-9eee-9f103ee725c2}",
   "sourcePort": "transformed",
   "targetUuid": "{d44700a8-53e5-4161-8bc1-3c384710c8ea}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d44700a8-53e5-4161-8bc1-3c384710c8ea}",
   "sourcePort": "output0",
   "targetUuid": "{f4d6472b-a1e6-40c8-b0ac-0f242afe5862}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f4d6472b-a1e6-40c8-b0ac-0f242afe5862}",
   "sourcePort": "output0",
   "targetUuid": "{c9492a70-99be-47b8-a6dc-5160cba5391d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{20133891-a322-4525-8236-9d4804a6bb72}",
   "sourcePort": "output0",
   "targetUuid": "{c9492a70-99be-47b8-a6dc-5160cba5391d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c9492a70-99be-47b8-a6dc-5160cba5391d}",
   "sourcePort": "output0",
   "targetUuid": "{ed980525-8871-4237-bbe2-e47dd2cfce9e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "normalScaling",
   "targetUuid": "{f4d6472b-a1e6-40c8-b0ac-0f242afe5862}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{20133891-a322-4525-8236-9d4804a6bb72}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{27a9740a-71d7-4cec-83a4-4cfcebf2d37c}",
   "sourcePort": "output0",
   "targetUuid": "{2adbd711-9a2f-4763-8c80-c7201322fd31}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ed980525-8871-4237-bbe2-e47dd2cfce9e}",
   "sourcePort": "output0",
   "targetUuid": "{27a9740a-71d7-4cec-83a4-4cfcebf2d37c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fa6bca4f-ce68-49df-aaf9-e73e4ad91a0a}",
   "sourcePort": "z",
   "targetUuid": "{45602384-6fd1-4a67-801f-4675e2e4f12f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{45602384-6fd1-4a67-801f-4675e2e4f12f}",
   "sourcePort": "output0",
   "targetUuid": "{8b1d3cbf-ca12-4b17-a446-046da3e334f1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{45602384-6fd1-4a67-801f-4675e2e4f12f}",
   "sourcePort": "output0",
   "targetUuid": "{8b1d3cbf-ca12-4b17-a446-046da3e334f1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8b1d3cbf-ca12-4b17-a446-046da3e334f1}",
   "sourcePort": "output0",
   "targetUuid": "{708736ee-a37c-43a5-98c7-fdeb38467a6d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{ed980525-8871-4237-bbe2-e47dd2cfce9e}",
   "sourcePort": "output0",
   "targetUuid": "{fa6bca4f-ce68-49df-aaf9-e73e4ad91a0a}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{540d13b6-fa55-45ed-8a2e-64fce6c16a83}",
   "sourcePort": "color",
   "targetUuid": "{ea7eea01-a7a5-474f-8ad0-a35df476f460}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{ea7eea01-a7a5-474f-8ad0-a35df476f460}",
   "sourcePort": "mixed",
   "targetUuid": "{5afd1230-eff6-41d3-8831-264596408ea3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{ea7eea01-a7a5-474f-8ad0-a35df476f460}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "postGain",
   "targetUuid": "{5afd1230-eff6-41d3-8831-264596408ea3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5afd1230-eff6-41d3-8831-264596408ea3}",
   "sourcePort": "output0",
   "targetUuid": "{009dbd4e-f658-4a73-9aa6-3d82ecdc977b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2adbd711-9a2f-4763-8c80-c7201322fd31}",
   "sourcePort": "output0",
   "targetUuid": "{944b458b-c71c-443f-afe7-94438c1efe0e}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{944b458b-c71c-443f-afe7-94438c1efe0e}",
   "sourcePort": "color",
   "targetUuid": "{f48b75d9-7851-454a-8251-23b0e1e53b55}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{009dbd4e-f658-4a73-9aa6-3d82ecdc977b}",
   "sourcePort": "output0",
   "targetUuid": "{fbade823-405a-45ad-8ad7-db4e638ee59c}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{f66543ad-2944-4d50-9c2d-971ce599999f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{f66543ad-2944-4d50-9c2d-971ce599999f}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{8b1d3cbf-ca12-4b17-a446-046da3e334f1}",
   "sourcePort": "output0",
   "targetUuid": "{f66543ad-2944-4d50-9c2d-971ce599999f}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{f66543ad-2944-4d50-9c2d-971ce599999f}",
   "sourcePort": "mixed",
   "targetUuid": "{67e75caf-bf76-4d8c-abf7-47d31c4d8a14}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{944b458b-c71c-443f-afe7-94438c1efe0e}",
   "sourcePort": "alpha",
   "targetUuid": "{67e75caf-bf76-4d8c-abf7-47d31c4d8a14}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{67e75caf-bf76-4d8c-abf7-47d31c4d8a14}",
   "sourcePort": "output0",
   "targetUuid": "{dcb37a66-aa47-45fc-a409-2b597b26c2c3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "alphaGain",
   "targetUuid": "{dcb37a66-aa47-45fc-a409-2b597b26c2c3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{dcb37a66-aa47-45fc-a409-2b597b26c2c3}",
   "sourcePort": "output0",
   "targetUuid": "{fbade823-405a-45ad-8ad7-db4e638ee59c}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{fbade823-405a-45ad-8ad7-db4e638ee59c}",
   "sourcePort": "shader",
   "targetUuid": "{b723676b-4e3d-44bc-b3a9-b9029cba052d}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{11458c40-5802-468e-9a78-e99b329799aa}",
   "sourcePort": "value",
   "targetUuid": "{028c7cca-55f5-4fd3-ae9d-e3ebd48af3e6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f5d6c499-f8f6-493e-876b-89855aa30a16}",
   "sourcePort": "value",
   "targetUuid": "{2adbd711-9a2f-4763-8c80-c7201322fd31}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6b85b275-6197-4f0f-bef3-b962999d277d}",
   "sourcePort": "value",
   "targetUuid": "{27a9740a-71d7-4cec-83a4-4cfcebf2d37c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8055208e-ef76-4809-96df-7a05b036d729}",
   "sourcePort": "value",
   "targetUuid": "{d44700a8-53e5-4161-8bc1-3c384710c8ea}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4ee14332-cc08-4265-a1ce-cf5536679083}",
   "sourcePort": "value",
   "targetUuid": "{20133891-a322-4525-8236-9d4804a6bb72}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b8bd0024-a598-412d-8963-3f6904324b2d}",
   "sourcePort": "value",
   "targetUuid": "{ea7eea01-a7a5-474f-8ad0-a35df476f460}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{90283a71-2f1a-4822-94f1-0b1614a52007}",
   "sourcePort": "value",
   "targetUuid": "{45602384-6fd1-4a67-801f-4675e2e4f12f}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{944b458b-c71c-443f-afe7-94438c1efe0e}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{b82dda57-644f-4c45-b2e8-2889a9d50375}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{944b458b-c71c-443f-afe7-94438c1efe0e}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 vertexPos;",
      "varying highp vec3 vertexNorm;",
      "varying highp vec3 vertexTan;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = vertexPos;highp vec3 $normal = vertexNorm;highp vec3 $tangent = vertexTan;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 vertexPos;",
      "in vec3 vertexNorm;",
      "in vec3 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = vertexPos;vec3 $normal = vertexNorm;vec3 $tangent = vertexTan;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec3 texCoord;",
      "#endif"
     ],
     "substitution": "highp vec3 $uv = texCoord;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec3 texCoord;",
      "#endif"
     ],
     "substitution": "vec3 $uv = texCoord;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 vertexCol;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = vertexCol.rgb;highp float $alpha = vertexCol.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 vertexCol;",
      "#endif"
     ],
     "substitution": "vec3 $color = vertexCol.rgb;float $alpha = vertexCol.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "postVertexColor",
    "postGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "alphaGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float alphaGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $alphaGain = properties.alphaGain;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float postVertexColor;\n    float postGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float alphaGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $alphaGain = properties.alphaGain;"
    }
   ]
  }
 }
}