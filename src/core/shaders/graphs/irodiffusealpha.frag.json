{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4027934e-81c3-444f-9669-9eae33a99703}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4e4336e5-d7ec-46c1-aa2a-c1667bedde83}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{654013ee-571e-4225-8b04-4a970ec0823f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a98853b3-ffbf-4bc6-9f4f-47491f407982}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{6fbcf465-0128-4a2c-b5a7-dfa073a5e36f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{528cc0df-83e0-4b7a-b3c2-67e55eb07c69}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{88333513-e0e3-44a8-a16d-c92352db694c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{47d6b0cf-6303-4938-8bc1-4c632c82098b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{bea9d67b-a457-4851-b4a2-9d65c1a6beb4}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3c5d59a2-bc70-49bc-a00f-932d93c59a95}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{6253b9a8-1226-480c-8ae9-61673b72a6d5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3d1c80b9-0a53-4aab-a5c8-5e29a9579391}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{12cbf167-ef9f-42e9-8221-6078547dabf8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{88f4cfeb-0c82-4f6e-932c-ceeb2ad401aa}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{488ffddf-ec97-4b2b-85d5-ca56dbd7af14}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{9dd4e826-8fa9-4945-a206-915ff7acc4ac}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{eb23f849-3e2f-438f-8668-a939b0cc9baf}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0d22105f-7bea-41ca-b8c0-245d43ee2ca9}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{770c42e5-20e4-442f-a2d5-1ce12e93a83a}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8bdfee9d-0217-4be7-afd0-126f41109b35}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4c5b8bc6-fb8d-4f80-aa7c-74e7d637bebe}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fd41b066-95f6-439a-a4dd-b1670d928473}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{5222c8e8-98e5-4a12-8fdb-7bb4939b7124}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{c5f68102-73f9-4332-8b0d-542004f61e7e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{9aec5156-eafa-4e31-8dce-5c10954d11ed}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{969676ac-fca5-4db4-826c-85890dcecf82}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{a3eb6fcd-828e-41df-a3f9-4a75f7854c57}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{09ac0013-3c2c-4b2a-a9c6-7539b2345664}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{49aff7db-5e2b-439c-8330-7fa579082329}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ac169bde-229a-4489-a6d9-074ab56feba2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{60b6da3d-81c0-4aca-ba99-8374ce79cb50}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e552c43b-013f-4752-9413-1a62b49da1b9}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{87bd51f4-1849-454b-bc8a-ee79c2376650}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0f3eb79e-f53f-4f6d-a4dd-cb78d23f5970}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{80a37fff-0ae8-4c06-9cb2-b8b0d1730d71}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{770c42e5-20e4-442f-a2d5-1ce12e93a83a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{770c42e5-20e4-442f-a2d5-1ce12e93a83a}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{770c42e5-20e4-442f-a2d5-1ce12e93a83a}",
   "sourcePort": "mixed",
   "targetUuid": "{3d1c80b9-0a53-4aab-a5c8-5e29a9579391}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3d1c80b9-0a53-4aab-a5c8-5e29a9579391}",
   "sourcePort": "output0",
   "targetUuid": "{4e4336e5-d7ec-46c1-aa2a-c1667bedde83}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4e4336e5-d7ec-46c1-aa2a-c1667bedde83}",
   "sourcePort": "output0",
   "targetUuid": "{4027934e-81c3-444f-9669-9eae33a99703}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4027934e-81c3-444f-9669-9eae33a99703}",
   "sourcePort": "output0",
   "targetUuid": "{fd41b066-95f6-439a-a4dd-b1670d928473}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{4e4336e5-d7ec-46c1-aa2a-c1667bedde83}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9aec5156-eafa-4e31-8dce-5c10954d11ed}",
   "sourcePort": "normal",
   "targetUuid": "{bea9d67b-a457-4851-b4a2-9d65c1a6beb4}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{bea9d67b-a457-4851-b4a2-9d65c1a6beb4}",
   "sourcePort": "transformed",
   "targetUuid": "{47d6b0cf-6303-4938-8bc1-4c632c82098b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{47d6b0cf-6303-4938-8bc1-4c632c82098b}",
   "sourcePort": "output0",
   "targetUuid": "{88333513-e0e3-44a8-a16d-c92352db694c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{88333513-e0e3-44a8-a16d-c92352db694c}",
   "sourcePort": "output0",
   "targetUuid": "{528cc0df-83e0-4b7a-b3c2-67e55eb07c69}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3c5d59a2-bc70-49bc-a00f-932d93c59a95}",
   "sourcePort": "output0",
   "targetUuid": "{528cc0df-83e0-4b7a-b3c2-67e55eb07c69}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{528cc0df-83e0-4b7a-b3c2-67e55eb07c69}",
   "sourcePort": "output0",
   "targetUuid": "{6fbcf465-0128-4a2c-b5a7-dfa073a5e36f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "normalScaling",
   "targetUuid": "{09ac0013-3c2c-4b2a-a9c6-7539b2345664}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{3c5d59a2-bc70-49bc-a00f-932d93c59a95}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a98853b3-ffbf-4bc6-9f4f-47491f407982}",
   "sourcePort": "output0",
   "targetUuid": "{654013ee-571e-4225-8b04-4a970ec0823f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6fbcf465-0128-4a2c-b5a7-dfa073a5e36f}",
   "sourcePort": "output0",
   "targetUuid": "{a98853b3-ffbf-4bc6-9f4f-47491f407982}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6253b9a8-1226-480c-8ae9-61673b72a6d5}",
   "sourcePort": "z",
   "targetUuid": "{4c5b8bc6-fb8d-4f80-aa7c-74e7d637bebe}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4c5b8bc6-fb8d-4f80-aa7c-74e7d637bebe}",
   "sourcePort": "output0",
   "targetUuid": "{8bdfee9d-0217-4be7-afd0-126f41109b35}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4c5b8bc6-fb8d-4f80-aa7c-74e7d637bebe}",
   "sourcePort": "output0",
   "targetUuid": "{8bdfee9d-0217-4be7-afd0-126f41109b35}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8bdfee9d-0217-4be7-afd0-126f41109b35}",
   "sourcePort": "output0",
   "targetUuid": "{770c42e5-20e4-442f-a2d5-1ce12e93a83a}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{6fbcf465-0128-4a2c-b5a7-dfa073a5e36f}",
   "sourcePort": "output0",
   "targetUuid": "{6253b9a8-1226-480c-8ae9-61673b72a6d5}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{88f4cfeb-0c82-4f6e-932c-ceeb2ad401aa}",
   "sourcePort": "color",
   "targetUuid": "{488ffddf-ec97-4b2b-85d5-ca56dbd7af14}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{488ffddf-ec97-4b2b-85d5-ca56dbd7af14}",
   "sourcePort": "mixed",
   "targetUuid": "{12cbf167-ef9f-42e9-8221-6078547dabf8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{488ffddf-ec97-4b2b-85d5-ca56dbd7af14}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "postGain",
   "targetUuid": "{12cbf167-ef9f-42e9-8221-6078547dabf8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{12cbf167-ef9f-42e9-8221-6078547dabf8}",
   "sourcePort": "output0",
   "targetUuid": "{fd41b066-95f6-439a-a4dd-b1670d928473}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fd41b066-95f6-439a-a4dd-b1670d928473}",
   "sourcePort": "output0",
   "targetUuid": "{5222c8e8-98e5-4a12-8fdb-7bb4939b7124}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{9dd4e826-8fa9-4945-a206-915ff7acc4ac}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{9dd4e826-8fa9-4945-a206-915ff7acc4ac}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{8bdfee9d-0217-4be7-afd0-126f41109b35}",
   "sourcePort": "output0",
   "targetUuid": "{9dd4e826-8fa9-4945-a206-915ff7acc4ac}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{9dd4e826-8fa9-4945-a206-915ff7acc4ac}",
   "sourcePort": "mixed",
   "targetUuid": "{eb23f849-3e2f-438f-8668-a939b0cc9baf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb23f849-3e2f-438f-8668-a939b0cc9baf}",
   "sourcePort": "output0",
   "targetUuid": "{0d22105f-7bea-41ca-b8c0-245d43ee2ca9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "alphaGain",
   "targetUuid": "{0d22105f-7bea-41ca-b8c0-245d43ee2ca9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0d22105f-7bea-41ca-b8c0-245d43ee2ca9}",
   "sourcePort": "output0",
   "targetUuid": "{5222c8e8-98e5-4a12-8fdb-7bb4939b7124}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{5222c8e8-98e5-4a12-8fdb-7bb4939b7124}",
   "sourcePort": "shader",
   "targetUuid": "{c5f68102-73f9-4332-8b0d-542004f61e7e}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{654013ee-571e-4225-8b04-4a970ec0823f}",
   "sourcePort": "output0",
   "targetUuid": "{969676ac-fca5-4db4-826c-85890dcecf82}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{969676ac-fca5-4db4-826c-85890dcecf82}",
   "sourcePort": "color",
   "targetUuid": "{3d1c80b9-0a53-4aab-a5c8-5e29a9579391}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{969676ac-fca5-4db4-826c-85890dcecf82}",
   "sourcePort": "alpha",
   "targetUuid": "{eb23f849-3e2f-438f-8668-a939b0cc9baf}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a3eb6fcd-828e-41df-a3f9-4a75f7854c57}",
   "sourcePort": "reflection",
   "targetUuid": "{969676ac-fca5-4db4-826c-85890dcecf82}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{09ac0013-3c2c-4b2a-a9c6-7539b2345664}",
   "sourcePort": "output",
   "targetUuid": "{88333513-e0e3-44a8-a16d-c92352db694c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{49aff7db-5e2b-439c-8330-7fa579082329}",
   "sourcePort": "value",
   "targetUuid": "{4027934e-81c3-444f-9669-9eae33a99703}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ac169bde-229a-4489-a6d9-074ab56feba2}",
   "sourcePort": "value",
   "targetUuid": "{654013ee-571e-4225-8b04-4a970ec0823f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{60b6da3d-81c0-4aca-ba99-8374ce79cb50}",
   "sourcePort": "value",
   "targetUuid": "{a98853b3-ffbf-4bc6-9f4f-47491f407982}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e552c43b-013f-4752-9413-1a62b49da1b9}",
   "sourcePort": "value",
   "targetUuid": "{47d6b0cf-6303-4938-8bc1-4c632c82098b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{87bd51f4-1849-454b-bc8a-ee79c2376650}",
   "sourcePort": "value",
   "targetUuid": "{3c5d59a2-bc70-49bc-a00f-932d93c59a95}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0f3eb79e-f53f-4f6d-a4dd-cb78d23f5970}",
   "sourcePort": "value",
   "targetUuid": "{488ffddf-ec97-4b2b-85d5-ca56dbd7af14}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{80a37fff-0ae8-4c06-9cb2-b8b0d1730d71}",
   "sourcePort": "value",
   "targetUuid": "{4c5b8bc6-fb8d-4f80-aa7c-74e7d637bebe}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{969676ac-fca5-4db4-826c-85890dcecf82}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{969676ac-fca5-4db4-826c-85890dcecf82}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{969676ac-fca5-4db4-826c-85890dcecf82}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{eb2de45a-5367-4ef3-bac0-ff7ee542ca39}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{09ac0013-3c2c-4b2a-a9c6-7539b2345664}",
   "targetPort": "gltfYUp"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain",
    "gltfYUp"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    }
   ]
  }
 }
}