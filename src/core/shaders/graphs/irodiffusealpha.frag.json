{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e6cef327-6c14-4b27-bd2f-bd27a692f218}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f02cde33-cec7-41f8-b9af-c71555498820}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3cdec111-7645-4107-815a-d2af4f42b9a9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bbe7e36a-cc81-499b-9c6f-d86740e2ec8e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{6f8043bf-ba46-4b70-9826-b2ef95e21ba9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dee711fa-9b0a-483b-ab61-3f52b152f560}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b8512409-cb77-4256-a7f9-f61d805369ff}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ef89c66f-52a0-4f33-a73c-2ced2de2a105}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{ba811ee3-4d34-44f4-b952-16516130bc61}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0cba33b6-f969-4366-a405-85b9869fa05b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{4c6552ae-0b63-4f45-9b75-7253f6f79f28}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6ed1db19-0cac-46e2-96be-d965de53db40}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e976adf8-1ee2-4a15-bca8-bc98cb46797d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{f3eb28f6-16c7-44c0-abc1-4484ee9ed553}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{1081653f-7dc0-4685-8f9b-5a681441434c}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{5b964574-d80f-4d01-9dee-3082f7defe4a}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d3526cf1-1ee7-48ac-8a41-b2cd86eff592}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{30b7f6c4-cccc-44f2-bdab-ecda45c74acc}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{0c0c5264-743e-41ee-9e35-d3e6eede568b}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{112c8ab4-6246-4402-bf2e-a6edb7aa64fd}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{20a83350-919c-4ca3-9dca-e5f94532ccaf}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{38e613ce-54f8-4c66-8de2-43203f050d80}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{8cd992b3-02cc-49aa-bc29-f651f2dd5221}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{77426d1e-7531-4126-8295-94b99bb3a9ed}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{b9215ffe-7b7f-4007-a8d1-90ea65e8aaa5}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{9e568c5c-4386-4420-ab5c-bf136106bc98}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{fe28329b-ac49-4186-b9c8-662b5dfe16e0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{2f880354-8c76-4165-965a-21ac603704c5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{3715fd93-fda0-4199-bb83-a88b2c69cc18}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ab80c815-42b4-44a6-b915-5472769b9459}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{cfa0727e-d637-4c7c-9971-b7a1e36f7fd0}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e96baafd-b0f8-416b-9362-b3d58245f56f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4e702499-3fc2-467d-b658-07bf20e5c764}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{3f12c6c9-e72d-4b0c-b671-33e49bb87017}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{af875c84-b691-4c46-ac74-a8d098eb9c24}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{0c0c5264-743e-41ee-9e35-d3e6eede568b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{0c0c5264-743e-41ee-9e35-d3e6eede568b}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{0c0c5264-743e-41ee-9e35-d3e6eede568b}",
   "sourcePort": "mixed",
   "targetUuid": "{6ed1db19-0cac-46e2-96be-d965de53db40}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6ed1db19-0cac-46e2-96be-d965de53db40}",
   "sourcePort": "output0",
   "targetUuid": "{f02cde33-cec7-41f8-b9af-c71555498820}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f02cde33-cec7-41f8-b9af-c71555498820}",
   "sourcePort": "output0",
   "targetUuid": "{e6cef327-6c14-4b27-bd2f-bd27a692f218}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e6cef327-6c14-4b27-bd2f-bd27a692f218}",
   "sourcePort": "output0",
   "targetUuid": "{38e613ce-54f8-4c66-8de2-43203f050d80}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{f02cde33-cec7-41f8-b9af-c71555498820}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b9215ffe-7b7f-4007-a8d1-90ea65e8aaa5}",
   "sourcePort": "normal",
   "targetUuid": "{ba811ee3-4d34-44f4-b952-16516130bc61}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{ba811ee3-4d34-44f4-b952-16516130bc61}",
   "sourcePort": "transformed",
   "targetUuid": "{ef89c66f-52a0-4f33-a73c-2ced2de2a105}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ef89c66f-52a0-4f33-a73c-2ced2de2a105}",
   "sourcePort": "output0",
   "targetUuid": "{b8512409-cb77-4256-a7f9-f61d805369ff}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b8512409-cb77-4256-a7f9-f61d805369ff}",
   "sourcePort": "output0",
   "targetUuid": "{dee711fa-9b0a-483b-ab61-3f52b152f560}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0cba33b6-f969-4366-a405-85b9869fa05b}",
   "sourcePort": "output0",
   "targetUuid": "{dee711fa-9b0a-483b-ab61-3f52b152f560}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{dee711fa-9b0a-483b-ab61-3f52b152f560}",
   "sourcePort": "output0",
   "targetUuid": "{6f8043bf-ba46-4b70-9826-b2ef95e21ba9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "normalScaling",
   "targetUuid": "{2f880354-8c76-4165-965a-21ac603704c5}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{0cba33b6-f969-4366-a405-85b9869fa05b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bbe7e36a-cc81-499b-9c6f-d86740e2ec8e}",
   "sourcePort": "output0",
   "targetUuid": "{3cdec111-7645-4107-815a-d2af4f42b9a9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6f8043bf-ba46-4b70-9826-b2ef95e21ba9}",
   "sourcePort": "output0",
   "targetUuid": "{bbe7e36a-cc81-499b-9c6f-d86740e2ec8e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4c6552ae-0b63-4f45-9b75-7253f6f79f28}",
   "sourcePort": "z",
   "targetUuid": "{20a83350-919c-4ca3-9dca-e5f94532ccaf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{20a83350-919c-4ca3-9dca-e5f94532ccaf}",
   "sourcePort": "output0",
   "targetUuid": "{112c8ab4-6246-4402-bf2e-a6edb7aa64fd}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{20a83350-919c-4ca3-9dca-e5f94532ccaf}",
   "sourcePort": "output0",
   "targetUuid": "{112c8ab4-6246-4402-bf2e-a6edb7aa64fd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{112c8ab4-6246-4402-bf2e-a6edb7aa64fd}",
   "sourcePort": "output0",
   "targetUuid": "{0c0c5264-743e-41ee-9e35-d3e6eede568b}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{6f8043bf-ba46-4b70-9826-b2ef95e21ba9}",
   "sourcePort": "output0",
   "targetUuid": "{4c6552ae-0b63-4f45-9b75-7253f6f79f28}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{f3eb28f6-16c7-44c0-abc1-4484ee9ed553}",
   "sourcePort": "color",
   "targetUuid": "{1081653f-7dc0-4685-8f9b-5a681441434c}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{1081653f-7dc0-4685-8f9b-5a681441434c}",
   "sourcePort": "mixed",
   "targetUuid": "{e976adf8-1ee2-4a15-bca8-bc98cb46797d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{1081653f-7dc0-4685-8f9b-5a681441434c}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "postGain",
   "targetUuid": "{e976adf8-1ee2-4a15-bca8-bc98cb46797d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e976adf8-1ee2-4a15-bca8-bc98cb46797d}",
   "sourcePort": "output0",
   "targetUuid": "{38e613ce-54f8-4c66-8de2-43203f050d80}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{38e613ce-54f8-4c66-8de2-43203f050d80}",
   "sourcePort": "output0",
   "targetUuid": "{8cd992b3-02cc-49aa-bc29-f651f2dd5221}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{5b964574-d80f-4d01-9dee-3082f7defe4a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{5b964574-d80f-4d01-9dee-3082f7defe4a}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{112c8ab4-6246-4402-bf2e-a6edb7aa64fd}",
   "sourcePort": "output0",
   "targetUuid": "{5b964574-d80f-4d01-9dee-3082f7defe4a}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{5b964574-d80f-4d01-9dee-3082f7defe4a}",
   "sourcePort": "mixed",
   "targetUuid": "{d3526cf1-1ee7-48ac-8a41-b2cd86eff592}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d3526cf1-1ee7-48ac-8a41-b2cd86eff592}",
   "sourcePort": "output0",
   "targetUuid": "{30b7f6c4-cccc-44f2-bdab-ecda45c74acc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "alphaGain",
   "targetUuid": "{30b7f6c4-cccc-44f2-bdab-ecda45c74acc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{30b7f6c4-cccc-44f2-bdab-ecda45c74acc}",
   "sourcePort": "output0",
   "targetUuid": "{8cd992b3-02cc-49aa-bc29-f651f2dd5221}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{8cd992b3-02cc-49aa-bc29-f651f2dd5221}",
   "sourcePort": "shader",
   "targetUuid": "{77426d1e-7531-4126-8295-94b99bb3a9ed}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{3cdec111-7645-4107-815a-d2af4f42b9a9}",
   "sourcePort": "output0",
   "targetUuid": "{9e568c5c-4386-4420-ab5c-bf136106bc98}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{9e568c5c-4386-4420-ab5c-bf136106bc98}",
   "sourcePort": "color",
   "targetUuid": "{6ed1db19-0cac-46e2-96be-d965de53db40}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9e568c5c-4386-4420-ab5c-bf136106bc98}",
   "sourcePort": "alpha",
   "targetUuid": "{d3526cf1-1ee7-48ac-8a41-b2cd86eff592}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fe28329b-ac49-4186-b9c8-662b5dfe16e0}",
   "sourcePort": "reflection",
   "targetUuid": "{9e568c5c-4386-4420-ab5c-bf136106bc98}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{2f880354-8c76-4165-965a-21ac603704c5}",
   "sourcePort": "output",
   "targetUuid": "{b8512409-cb77-4256-a7f9-f61d805369ff}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3715fd93-fda0-4199-bb83-a88b2c69cc18}",
   "sourcePort": "value",
   "targetUuid": "{e6cef327-6c14-4b27-bd2f-bd27a692f218}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ab80c815-42b4-44a6-b915-5472769b9459}",
   "sourcePort": "value",
   "targetUuid": "{3cdec111-7645-4107-815a-d2af4f42b9a9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cfa0727e-d637-4c7c-9971-b7a1e36f7fd0}",
   "sourcePort": "value",
   "targetUuid": "{bbe7e36a-cc81-499b-9c6f-d86740e2ec8e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e96baafd-b0f8-416b-9362-b3d58245f56f}",
   "sourcePort": "value",
   "targetUuid": "{ef89c66f-52a0-4f33-a73c-2ced2de2a105}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4e702499-3fc2-467d-b658-07bf20e5c764}",
   "sourcePort": "value",
   "targetUuid": "{0cba33b6-f969-4366-a405-85b9869fa05b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3f12c6c9-e72d-4b0c-b671-33e49bb87017}",
   "sourcePort": "value",
   "targetUuid": "{1081653f-7dc0-4685-8f9b-5a681441434c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{af875c84-b691-4c46-ac74-a8d098eb9c24}",
   "sourcePort": "value",
   "targetUuid": "{20a83350-919c-4ca3-9dca-e5f94532ccaf}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{9e568c5c-4386-4420-ab5c-bf136106bc98}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{9e568c5c-4386-4420-ab5c-bf136106bc98}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{9e568c5c-4386-4420-ab5c-bf136106bc98}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{eac87dbc-1bd0-4a00-aaf2-fda6bc23b115}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{2f880354-8c76-4165-965a-21ac603704c5}",
   "targetPort": "gltfYUp"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain",
    "gltfYUp"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    }
   ]
  }
 }
}