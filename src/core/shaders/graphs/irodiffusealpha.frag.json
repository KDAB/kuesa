{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4e180c4a-08b5-491a-9b16-93058e0b8dd4}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3596c33f-7636-44a6-ae10-7db8884c66eb}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0b4ffd4d-44b0-4233-87e3-34e179c5f09c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4d887c19-6359-493c-876e-8202566089ed}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{bce7e070-cc02-47e4-9cd9-f97854d54ec7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fa576ab2-05e9-40fa-a66b-55741cd4f1cb}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a00473d7-e181-4652-966b-fe7badee07f7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{156bdd5b-ac59-44e5-981d-b61c792b283f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{617dec23-01f0-40aa-a060-ec7f940c7f30}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c96393d7-1846-46d8-9e2e-d60ac7b77a4e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{baff0b73-2676-43dc-be2d-41af828e5913}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0293be8c-1933-479e-a08f-2f99e0d6a49b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{159bdc97-8ea1-43a2-8640-90c0ebf67c0c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{335c9bda-bb4f-40d3-8bcf-ae462c85395d}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{c1f02849-f8e9-459e-a19e-aa1dbebd500c}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{d477ad00-5a97-4a84-a6c6-38e8873fba70}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f82eedec-1c34-4030-8933-bb395a58c6a3}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7a1a984b-4065-40fa-aaab-c04d32276837}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{36eb573f-e358-4ab7-bb5e-9a1dcd08fbb6}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{92a5c11c-7942-4800-81f2-100ce10284a3}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5ad0f600-fdc3-4d83-ba12-a8b385606e56}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d509c3b0-e124-4bec-ae5d-e5f82395621a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{5021b46d-3056-4b96-b263-34e1c88eb622}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{51422213-3436-4c54-a6dc-898fc3313016}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{f69c0f9f-b7ec-4753-a3c2-166d8e7da768}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{94510acc-5f43-4e2b-87dc-fbca51aabab1}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{3251fddd-eeea-47cf-b95a-ffbd93e9fbc0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{2298d781-de87-4e95-8dec-c473969875ed}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b7d5f1f4-00a7-464b-b020-033562d4df8c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{9c6ac45d-15a6-474c-8c82-c20c647a6640}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{f1fb744b-b629-45ca-aa86-975c64f92b2e}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b5f808d6-b979-4e23-a3c0-6c04c1a72c3c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{85d6af6e-ce1a-4dbd-8739-ef5ea192904e}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{11ae25ab-ce33-4112-8483-1aa751fc6534}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{36eb573f-e358-4ab7-bb5e-9a1dcd08fbb6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{36eb573f-e358-4ab7-bb5e-9a1dcd08fbb6}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{36eb573f-e358-4ab7-bb5e-9a1dcd08fbb6}",
   "sourcePort": "mixed",
   "targetUuid": "{0293be8c-1933-479e-a08f-2f99e0d6a49b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0293be8c-1933-479e-a08f-2f99e0d6a49b}",
   "sourcePort": "output0",
   "targetUuid": "{3596c33f-7636-44a6-ae10-7db8884c66eb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3596c33f-7636-44a6-ae10-7db8884c66eb}",
   "sourcePort": "output0",
   "targetUuid": "{4e180c4a-08b5-491a-9b16-93058e0b8dd4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4e180c4a-08b5-491a-9b16-93058e0b8dd4}",
   "sourcePort": "output0",
   "targetUuid": "{d509c3b0-e124-4bec-ae5d-e5f82395621a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{3596c33f-7636-44a6-ae10-7db8884c66eb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f69c0f9f-b7ec-4753-a3c2-166d8e7da768}",
   "sourcePort": "normal",
   "targetUuid": "{617dec23-01f0-40aa-a060-ec7f940c7f30}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{617dec23-01f0-40aa-a060-ec7f940c7f30}",
   "sourcePort": "transformed",
   "targetUuid": "{156bdd5b-ac59-44e5-981d-b61c792b283f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{156bdd5b-ac59-44e5-981d-b61c792b283f}",
   "sourcePort": "output0",
   "targetUuid": "{a00473d7-e181-4652-966b-fe7badee07f7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a00473d7-e181-4652-966b-fe7badee07f7}",
   "sourcePort": "output0",
   "targetUuid": "{fa576ab2-05e9-40fa-a66b-55741cd4f1cb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c96393d7-1846-46d8-9e2e-d60ac7b77a4e}",
   "sourcePort": "output0",
   "targetUuid": "{fa576ab2-05e9-40fa-a66b-55741cd4f1cb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fa576ab2-05e9-40fa-a66b-55741cd4f1cb}",
   "sourcePort": "output0",
   "targetUuid": "{bce7e070-cc02-47e4-9cd9-f97854d54ec7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{c96393d7-1846-46d8-9e2e-d60ac7b77a4e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4d887c19-6359-493c-876e-8202566089ed}",
   "sourcePort": "output0",
   "targetUuid": "{0b4ffd4d-44b0-4233-87e3-34e179c5f09c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bce7e070-cc02-47e4-9cd9-f97854d54ec7}",
   "sourcePort": "output0",
   "targetUuid": "{4d887c19-6359-493c-876e-8202566089ed}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{baff0b73-2676-43dc-be2d-41af828e5913}",
   "sourcePort": "z",
   "targetUuid": "{5ad0f600-fdc3-4d83-ba12-a8b385606e56}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5ad0f600-fdc3-4d83-ba12-a8b385606e56}",
   "sourcePort": "output0",
   "targetUuid": "{92a5c11c-7942-4800-81f2-100ce10284a3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5ad0f600-fdc3-4d83-ba12-a8b385606e56}",
   "sourcePort": "output0",
   "targetUuid": "{92a5c11c-7942-4800-81f2-100ce10284a3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{92a5c11c-7942-4800-81f2-100ce10284a3}",
   "sourcePort": "output0",
   "targetUuid": "{36eb573f-e358-4ab7-bb5e-9a1dcd08fbb6}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{bce7e070-cc02-47e4-9cd9-f97854d54ec7}",
   "sourcePort": "output0",
   "targetUuid": "{baff0b73-2676-43dc-be2d-41af828e5913}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{335c9bda-bb4f-40d3-8bcf-ae462c85395d}",
   "sourcePort": "color",
   "targetUuid": "{c1f02849-f8e9-459e-a19e-aa1dbebd500c}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{c1f02849-f8e9-459e-a19e-aa1dbebd500c}",
   "sourcePort": "mixed",
   "targetUuid": "{159bdc97-8ea1-43a2-8640-90c0ebf67c0c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{c1f02849-f8e9-459e-a19e-aa1dbebd500c}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "postGain",
   "targetUuid": "{159bdc97-8ea1-43a2-8640-90c0ebf67c0c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{159bdc97-8ea1-43a2-8640-90c0ebf67c0c}",
   "sourcePort": "output0",
   "targetUuid": "{d509c3b0-e124-4bec-ae5d-e5f82395621a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d509c3b0-e124-4bec-ae5d-e5f82395621a}",
   "sourcePort": "output0",
   "targetUuid": "{5021b46d-3056-4b96-b263-34e1c88eb622}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{d477ad00-5a97-4a84-a6c6-38e8873fba70}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{d477ad00-5a97-4a84-a6c6-38e8873fba70}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{92a5c11c-7942-4800-81f2-100ce10284a3}",
   "sourcePort": "output0",
   "targetUuid": "{d477ad00-5a97-4a84-a6c6-38e8873fba70}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{d477ad00-5a97-4a84-a6c6-38e8873fba70}",
   "sourcePort": "mixed",
   "targetUuid": "{f82eedec-1c34-4030-8933-bb395a58c6a3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f82eedec-1c34-4030-8933-bb395a58c6a3}",
   "sourcePort": "output0",
   "targetUuid": "{7a1a984b-4065-40fa-aaab-c04d32276837}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "alphaGain",
   "targetUuid": "{7a1a984b-4065-40fa-aaab-c04d32276837}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7a1a984b-4065-40fa-aaab-c04d32276837}",
   "sourcePort": "output0",
   "targetUuid": "{5021b46d-3056-4b96-b263-34e1c88eb622}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{5021b46d-3056-4b96-b263-34e1c88eb622}",
   "sourcePort": "shader",
   "targetUuid": "{51422213-3436-4c54-a6dc-898fc3313016}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0b4ffd4d-44b0-4233-87e3-34e179c5f09c}",
   "sourcePort": "output0",
   "targetUuid": "{94510acc-5f43-4e2b-87dc-fbca51aabab1}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{94510acc-5f43-4e2b-87dc-fbca51aabab1}",
   "sourcePort": "color",
   "targetUuid": "{0293be8c-1933-479e-a08f-2f99e0d6a49b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{94510acc-5f43-4e2b-87dc-fbca51aabab1}",
   "sourcePort": "alpha",
   "targetUuid": "{f82eedec-1c34-4030-8933-bb395a58c6a3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3251fddd-eeea-47cf-b95a-ffbd93e9fbc0}",
   "sourcePort": "reflection",
   "targetUuid": "{94510acc-5f43-4e2b-87dc-fbca51aabab1}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "normalScaling",
   "targetUuid": "{a00473d7-e181-4652-966b-fe7badee07f7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2298d781-de87-4e95-8dec-c473969875ed}",
   "sourcePort": "value",
   "targetUuid": "{4e180c4a-08b5-491a-9b16-93058e0b8dd4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b7d5f1f4-00a7-464b-b020-033562d4df8c}",
   "sourcePort": "value",
   "targetUuid": "{0b4ffd4d-44b0-4233-87e3-34e179c5f09c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9c6ac45d-15a6-474c-8c82-c20c647a6640}",
   "sourcePort": "value",
   "targetUuid": "{4d887c19-6359-493c-876e-8202566089ed}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f1fb744b-b629-45ca-aa86-975c64f92b2e}",
   "sourcePort": "value",
   "targetUuid": "{156bdd5b-ac59-44e5-981d-b61c792b283f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b5f808d6-b979-4e23-a3c0-6c04c1a72c3c}",
   "sourcePort": "value",
   "targetUuid": "{c96393d7-1846-46d8-9e2e-d60ac7b77a4e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{85d6af6e-ce1a-4dbd-8739-ef5ea192904e}",
   "sourcePort": "value",
   "targetUuid": "{c1f02849-f8e9-459e-a19e-aa1dbebd500c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{11ae25ab-ce33-4112-8483-1aa751fc6534}",
   "sourcePort": "value",
   "targetUuid": "{5ad0f600-fdc3-4d83-ba12-a8b385606e56}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{94510acc-5f43-4e2b-87dc-fbca51aabab1}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{94510acc-5f43-4e2b-87dc-fbca51aabab1}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{2b02b845-878b-47e9-9f1c-8e86eea064f2}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{94510acc-5f43-4e2b-87dc-fbca51aabab1}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;"
    }
   ]
  }
 }
}