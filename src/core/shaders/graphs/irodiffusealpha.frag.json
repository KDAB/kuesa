{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bb00a88c-5d66-457c-906e-2bc4a743d3f7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a2a0d959-c975-48f1-a53d-d098f669c582}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0b275487-f345-4fe1-b5e7-cbe0429f5fe0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f6f97dc5-41dd-4e92-b6dc-4b67fa3e01ec}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{b6502da6-729b-4746-8f60-1bc53ed77309}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{db635505-1d8f-44fc-9333-79a75036d75a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0505d824-eeff-46af-90a9-74167ec63cd6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{de377098-d376-44d4-b6f3-375e112dcbb0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{68aaed8f-a0f7-47bf-bd19-6b0285636283}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{6c89a517-b940-47b3-a478-253c2eb0b752}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{556632f3-fcb2-4905-a280-c4d224e85bac}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{b1bcb755-543c-4d79-8254-14651095ca31}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7c74d326-5a9f-4897-a2e5-b9fc4bc7a48d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c384dc02-d3f3-463b-8291-46265d68e683}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{c9baad2e-2433-49f9-b417-21516e7b90ce}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{139bef02-d84c-4b59-b21c-bbce52de52f3}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{877f6f38-2339-44df-bc43-d784d927b381}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{9eaa7b71-bcb9-40fe-981b-bf5622080491}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a07f6b52-61d6-4b7e-997d-3eec0a022d98}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{20b4efd2-a5e4-44f8-9e27-6bfad7abb9be}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{e1d5930f-db13-461f-8f22-8ffb6c3c4898}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{84563a50-cc38-4d89-80e2-2db1e2ed43ba}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{183be12a-1cf0-4476-9201-a82eaaf65a59}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f3d91ebe-82b5-4fb2-97d5-41c4c90b5a9a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{20de900f-b101-4217-a51d-a3b12c82c68c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{22fd0ca4-a704-4d06-9ac7-6cc6c2061f7f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{68b92181-973e-4ca3-adfe-361341d80b5a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b122c51d-dd64-46ba-a397-7aa8ceaddfdf}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ce9d01b5-cfac-416e-9a0a-e8874e5a8428}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{894dc815-205a-4e22-964c-4a09e5b3ad7a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a5181423-8ce2-4eac-a400-f799c0595ae1}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{f123b5a8-00bb-44d7-95bd-0128d802d606}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{8f82670c-b374-4e58-bba1-08034f2048e8}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{e1d5930f-db13-461f-8f22-8ffb6c3c4898}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{e1d5930f-db13-461f-8f22-8ffb6c3c4898}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{e1d5930f-db13-461f-8f22-8ffb6c3c4898}",
   "sourcePort": "mixed",
   "targetUuid": "{7c74d326-5a9f-4897-a2e5-b9fc4bc7a48d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7c74d326-5a9f-4897-a2e5-b9fc4bc7a48d}",
   "sourcePort": "output0",
   "targetUuid": "{a2a0d959-c975-48f1-a53d-d098f669c582}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a2a0d959-c975-48f1-a53d-d098f669c582}",
   "sourcePort": "output0",
   "targetUuid": "{bb00a88c-5d66-457c-906e-2bc4a743d3f7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bb00a88c-5d66-457c-906e-2bc4a743d3f7}",
   "sourcePort": "output0",
   "targetUuid": "{f3d91ebe-82b5-4fb2-97d5-41c4c90b5a9a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{a2a0d959-c975-48f1-a53d-d098f669c582}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6c89a517-b940-47b3-a478-253c2eb0b752}",
   "sourcePort": "normal",
   "targetUuid": "{68aaed8f-a0f7-47bf-bd19-6b0285636283}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{68aaed8f-a0f7-47bf-bd19-6b0285636283}",
   "sourcePort": "transformed",
   "targetUuid": "{de377098-d376-44d4-b6f3-375e112dcbb0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{de377098-d376-44d4-b6f3-375e112dcbb0}",
   "sourcePort": "output0",
   "targetUuid": "{0505d824-eeff-46af-90a9-74167ec63cd6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0505d824-eeff-46af-90a9-74167ec63cd6}",
   "sourcePort": "output0",
   "targetUuid": "{db635505-1d8f-44fc-9333-79a75036d75a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{556632f3-fcb2-4905-a280-c4d224e85bac}",
   "sourcePort": "output0",
   "targetUuid": "{db635505-1d8f-44fc-9333-79a75036d75a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{db635505-1d8f-44fc-9333-79a75036d75a}",
   "sourcePort": "output0",
   "targetUuid": "{b6502da6-729b-4746-8f60-1bc53ed77309}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "normalScaling",
   "targetUuid": "{0505d824-eeff-46af-90a9-74167ec63cd6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{556632f3-fcb2-4905-a280-c4d224e85bac}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f6f97dc5-41dd-4e92-b6dc-4b67fa3e01ec}",
   "sourcePort": "output0",
   "targetUuid": "{0b275487-f345-4fe1-b5e7-cbe0429f5fe0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b6502da6-729b-4746-8f60-1bc53ed77309}",
   "sourcePort": "output0",
   "targetUuid": "{f6f97dc5-41dd-4e92-b6dc-4b67fa3e01ec}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b1bcb755-543c-4d79-8254-14651095ca31}",
   "sourcePort": "z",
   "targetUuid": "{183be12a-1cf0-4476-9201-a82eaaf65a59}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{183be12a-1cf0-4476-9201-a82eaaf65a59}",
   "sourcePort": "output0",
   "targetUuid": "{84563a50-cc38-4d89-80e2-2db1e2ed43ba}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{183be12a-1cf0-4476-9201-a82eaaf65a59}",
   "sourcePort": "output0",
   "targetUuid": "{84563a50-cc38-4d89-80e2-2db1e2ed43ba}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{84563a50-cc38-4d89-80e2-2db1e2ed43ba}",
   "sourcePort": "output0",
   "targetUuid": "{e1d5930f-db13-461f-8f22-8ffb6c3c4898}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b6502da6-729b-4746-8f60-1bc53ed77309}",
   "sourcePort": "output0",
   "targetUuid": "{b1bcb755-543c-4d79-8254-14651095ca31}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{c9baad2e-2433-49f9-b417-21516e7b90ce}",
   "sourcePort": "color",
   "targetUuid": "{139bef02-d84c-4b59-b21c-bbce52de52f3}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{139bef02-d84c-4b59-b21c-bbce52de52f3}",
   "sourcePort": "mixed",
   "targetUuid": "{c384dc02-d3f3-463b-8291-46265d68e683}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{139bef02-d84c-4b59-b21c-bbce52de52f3}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "postGain",
   "targetUuid": "{c384dc02-d3f3-463b-8291-46265d68e683}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c384dc02-d3f3-463b-8291-46265d68e683}",
   "sourcePort": "output0",
   "targetUuid": "{f3d91ebe-82b5-4fb2-97d5-41c4c90b5a9a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0b275487-f345-4fe1-b5e7-cbe0429f5fe0}",
   "sourcePort": "output0",
   "targetUuid": "{9eaa7b71-bcb9-40fe-981b-bf5622080491}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{9eaa7b71-bcb9-40fe-981b-bf5622080491}",
   "sourcePort": "color",
   "targetUuid": "{7c74d326-5a9f-4897-a2e5-b9fc4bc7a48d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f3d91ebe-82b5-4fb2-97d5-41c4c90b5a9a}",
   "sourcePort": "output0",
   "targetUuid": "{20de900f-b101-4217-a51d-a3b12c82c68c}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{877f6f38-2339-44df-bc43-d784d927b381}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{877f6f38-2339-44df-bc43-d784d927b381}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{84563a50-cc38-4d89-80e2-2db1e2ed43ba}",
   "sourcePort": "output0",
   "targetUuid": "{877f6f38-2339-44df-bc43-d784d927b381}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{877f6f38-2339-44df-bc43-d784d927b381}",
   "sourcePort": "mixed",
   "targetUuid": "{a07f6b52-61d6-4b7e-997d-3eec0a022d98}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9eaa7b71-bcb9-40fe-981b-bf5622080491}",
   "sourcePort": "alpha",
   "targetUuid": "{a07f6b52-61d6-4b7e-997d-3eec0a022d98}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a07f6b52-61d6-4b7e-997d-3eec0a022d98}",
   "sourcePort": "output0",
   "targetUuid": "{20b4efd2-a5e4-44f8-9e27-6bfad7abb9be}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "alphaGain",
   "targetUuid": "{20b4efd2-a5e4-44f8-9e27-6bfad7abb9be}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{20b4efd2-a5e4-44f8-9e27-6bfad7abb9be}",
   "sourcePort": "output0",
   "targetUuid": "{20de900f-b101-4217-a51d-a3b12c82c68c}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{20de900f-b101-4217-a51d-a3b12c82c68c}",
   "sourcePort": "shader",
   "targetUuid": "{22fd0ca4-a704-4d06-9ac7-6cc6c2061f7f}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{68b92181-973e-4ca3-adfe-361341d80b5a}",
   "sourcePort": "value",
   "targetUuid": "{bb00a88c-5d66-457c-906e-2bc4a743d3f7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b122c51d-dd64-46ba-a397-7aa8ceaddfdf}",
   "sourcePort": "value",
   "targetUuid": "{0b275487-f345-4fe1-b5e7-cbe0429f5fe0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ce9d01b5-cfac-416e-9a0a-e8874e5a8428}",
   "sourcePort": "value",
   "targetUuid": "{f6f97dc5-41dd-4e92-b6dc-4b67fa3e01ec}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{894dc815-205a-4e22-964c-4a09e5b3ad7a}",
   "sourcePort": "value",
   "targetUuid": "{de377098-d376-44d4-b6f3-375e112dcbb0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a5181423-8ce2-4eac-a400-f799c0595ae1}",
   "sourcePort": "value",
   "targetUuid": "{556632f3-fcb2-4905-a280-c4d224e85bac}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f123b5a8-00bb-44d7-95bd-0128d802d606}",
   "sourcePort": "value",
   "targetUuid": "{139bef02-d84c-4b59-b21c-bbce52de52f3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8f82670c-b374-4e58-bba1-08034f2048e8}",
   "sourcePort": "value",
   "targetUuid": "{183be12a-1cf0-4476-9201-a82eaaf65a59}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{9eaa7b71-bcb9-40fe-981b-bf5622080491}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{92ece689-a5d1-411f-85fa-b64f9a1f6fe2}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{9eaa7b71-bcb9-40fe-981b-bf5622080491}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;"
    }
   ]
  }
 }
}