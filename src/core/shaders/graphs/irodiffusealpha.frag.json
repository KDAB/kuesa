{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c08a93fc-d198-4a66-9d38-9d2b53e0c464}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{989b46f4-d559-4333-b618-2813a2e44233}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0fd39df1-5588-42f0-8fca-af31905b8a9a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{88172c5f-f73b-4fb7-8e19-854f5e33fcbd}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{f46b6ab6-e83f-4034-aac1-548558d9c04e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0a0bbd50-6adf-4724-a114-2fef15d266b8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b2852f2b-8ecf-49d3-9ac7-fe74723cfb48}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{05ff4d64-a006-4050-9469-30d604a0be10}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{67913309-d1bb-44b5-8fe6-aac1d5c01cc3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{da1e87f4-33f1-4276-a3d0-2533a35ee90e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{29464755-4691-491e-aba0-f8e3cf9365c3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ce50b995-fb06-4be4-97a8-76cec38f9c02}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7c5f0e28-7f96-4d48-b9a0-edef1bb8996b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{17c9b95b-cafc-4c5b-8682-099873005708}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{421fa020-4260-44d7-b790-b7a7b30ea387}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{eb2a5ad2-1119-40ae-a7fc-ae1bba0902d0}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2c09a409-27b3-4e23-8727-e41847e3815f}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ff5dcea5-304b-4243-9b43-8dac4c418517}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{9b0e4886-67d3-40a9-8555-52749d48f165}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{90b41861-998f-44bd-97cc-60d2d4fccec6}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bba7873a-0a65-4f80-9a11-edf7487180c6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5f77f756-1fe6-4b8b-a0c3-e1fb49bf4d45}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{f8acd658-7ae3-484d-bc9d-80bd780c38eb}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{cffbf4e4-c76a-4ddb-a61d-86ef29326d4a}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{8837abbc-acaf-4cf4-9669-06fe822a4b16}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{bc128488-ca17-4c11-ae68-a4f91d21de1d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{40058703-f448-4105-b95d-91f078d7efbd}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{0c4611d8-d225-45cd-9b2e-7ed7f44d49d1}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{0785e59c-b354-408b-8c0d-f188d1b26aa4}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{339c4374-4570-4127-98b9-d792db59e74a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a08414df-50b5-46c0-b37c-b2c2d74d4474}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{622b5a50-6153-4a6d-961e-fc99f2455dc8}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{dcf03a77-16f5-4258-9f4a-3efb85dca057}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a793f190-c429-4743-ac7c-40c6df7a79e0}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0087836a-3508-4c35-ad4f-d59ddc779b84}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{a574ad9d-8db5-4219-bac5-a7384a276238}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{9b0e4886-67d3-40a9-8555-52749d48f165}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{9b0e4886-67d3-40a9-8555-52749d48f165}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{9b0e4886-67d3-40a9-8555-52749d48f165}",
   "sourcePort": "mixed",
   "targetUuid": "{ce50b995-fb06-4be4-97a8-76cec38f9c02}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ce50b995-fb06-4be4-97a8-76cec38f9c02}",
   "sourcePort": "output0",
   "targetUuid": "{989b46f4-d559-4333-b618-2813a2e44233}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{989b46f4-d559-4333-b618-2813a2e44233}",
   "sourcePort": "output0",
   "targetUuid": "{c08a93fc-d198-4a66-9d38-9d2b53e0c464}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c08a93fc-d198-4a66-9d38-9d2b53e0c464}",
   "sourcePort": "output0",
   "targetUuid": "{5f77f756-1fe6-4b8b-a0c3-e1fb49bf4d45}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{989b46f4-d559-4333-b618-2813a2e44233}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cffbf4e4-c76a-4ddb-a61d-86ef29326d4a}",
   "sourcePort": "normal",
   "targetUuid": "{67913309-d1bb-44b5-8fe6-aac1d5c01cc3}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{67913309-d1bb-44b5-8fe6-aac1d5c01cc3}",
   "sourcePort": "transformed",
   "targetUuid": "{05ff4d64-a006-4050-9469-30d604a0be10}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{05ff4d64-a006-4050-9469-30d604a0be10}",
   "sourcePort": "output0",
   "targetUuid": "{b2852f2b-8ecf-49d3-9ac7-fe74723cfb48}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b2852f2b-8ecf-49d3-9ac7-fe74723cfb48}",
   "sourcePort": "output0",
   "targetUuid": "{0a0bbd50-6adf-4724-a114-2fef15d266b8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{da1e87f4-33f1-4276-a3d0-2533a35ee90e}",
   "sourcePort": "output0",
   "targetUuid": "{0a0bbd50-6adf-4724-a114-2fef15d266b8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0a0bbd50-6adf-4724-a114-2fef15d266b8}",
   "sourcePort": "output0",
   "targetUuid": "{f46b6ab6-e83f-4034-aac1-548558d9c04e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{da1e87f4-33f1-4276-a3d0-2533a35ee90e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{88172c5f-f73b-4fb7-8e19-854f5e33fcbd}",
   "sourcePort": "output0",
   "targetUuid": "{0fd39df1-5588-42f0-8fca-af31905b8a9a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f46b6ab6-e83f-4034-aac1-548558d9c04e}",
   "sourcePort": "output0",
   "targetUuid": "{88172c5f-f73b-4fb7-8e19-854f5e33fcbd}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{29464755-4691-491e-aba0-f8e3cf9365c3}",
   "sourcePort": "z",
   "targetUuid": "{bba7873a-0a65-4f80-9a11-edf7487180c6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{bba7873a-0a65-4f80-9a11-edf7487180c6}",
   "sourcePort": "output0",
   "targetUuid": "{90b41861-998f-44bd-97cc-60d2d4fccec6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bba7873a-0a65-4f80-9a11-edf7487180c6}",
   "sourcePort": "output0",
   "targetUuid": "{90b41861-998f-44bd-97cc-60d2d4fccec6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{90b41861-998f-44bd-97cc-60d2d4fccec6}",
   "sourcePort": "output0",
   "targetUuid": "{9b0e4886-67d3-40a9-8555-52749d48f165}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{f46b6ab6-e83f-4034-aac1-548558d9c04e}",
   "sourcePort": "output0",
   "targetUuid": "{29464755-4691-491e-aba0-f8e3cf9365c3}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{17c9b95b-cafc-4c5b-8682-099873005708}",
   "sourcePort": "color",
   "targetUuid": "{421fa020-4260-44d7-b790-b7a7b30ea387}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{421fa020-4260-44d7-b790-b7a7b30ea387}",
   "sourcePort": "mixed",
   "targetUuid": "{7c5f0e28-7f96-4d48-b9a0-edef1bb8996b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{421fa020-4260-44d7-b790-b7a7b30ea387}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "postGain",
   "targetUuid": "{7c5f0e28-7f96-4d48-b9a0-edef1bb8996b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7c5f0e28-7f96-4d48-b9a0-edef1bb8996b}",
   "sourcePort": "output0",
   "targetUuid": "{5f77f756-1fe6-4b8b-a0c3-e1fb49bf4d45}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{eb2a5ad2-1119-40ae-a7fc-ae1bba0902d0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{eb2a5ad2-1119-40ae-a7fc-ae1bba0902d0}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{90b41861-998f-44bd-97cc-60d2d4fccec6}",
   "sourcePort": "output0",
   "targetUuid": "{eb2a5ad2-1119-40ae-a7fc-ae1bba0902d0}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{eb2a5ad2-1119-40ae-a7fc-ae1bba0902d0}",
   "sourcePort": "mixed",
   "targetUuid": "{2c09a409-27b3-4e23-8727-e41847e3815f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2c09a409-27b3-4e23-8727-e41847e3815f}",
   "sourcePort": "output0",
   "targetUuid": "{ff5dcea5-304b-4243-9b43-8dac4c418517}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "alphaGain",
   "targetUuid": "{ff5dcea5-304b-4243-9b43-8dac4c418517}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0785e59c-b354-408b-8c0d-f188d1b26aa4}",
   "sourcePort": "shader",
   "targetUuid": "{f8acd658-7ae3-484d-bc9d-80bd780c38eb}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0fd39df1-5588-42f0-8fca-af31905b8a9a}",
   "sourcePort": "output0",
   "targetUuid": "{8837abbc-acaf-4cf4-9669-06fe822a4b16}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{8837abbc-acaf-4cf4-9669-06fe822a4b16}",
   "sourcePort": "color",
   "targetUuid": "{ce50b995-fb06-4be4-97a8-76cec38f9c02}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8837abbc-acaf-4cf4-9669-06fe822a4b16}",
   "sourcePort": "alpha",
   "targetUuid": "{2c09a409-27b3-4e23-8727-e41847e3815f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bc128488-ca17-4c11-ae68-a4f91d21de1d}",
   "sourcePort": "reflection",
   "targetUuid": "{8837abbc-acaf-4cf4-9669-06fe822a4b16}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "normalScaling",
   "targetUuid": "{b2852f2b-8ecf-49d3-9ac7-fe74723cfb48}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ff5dcea5-304b-4243-9b43-8dac4c418517}",
   "sourcePort": "output0",
   "targetUuid": "{0c4611d8-d225-45cd-9b2e-7ed7f44d49d1}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{5f77f756-1fe6-4b8b-a0c3-e1fb49bf4d45}",
   "sourcePort": "output0",
   "targetUuid": "{0c4611d8-d225-45cd-9b2e-7ed7f44d49d1}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0c4611d8-d225-45cd-9b2e-7ed7f44d49d1}",
   "sourcePort": "color_out",
   "targetUuid": "{0785e59c-b354-408b-8c0d-f188d1b26aa4}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0c4611d8-d225-45cd-9b2e-7ed7f44d49d1}",
   "sourcePort": "alpha_out",
   "targetUuid": "{0785e59c-b354-408b-8c0d-f188d1b26aa4}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{339c4374-4570-4127-98b9-d792db59e74a}",
   "sourcePort": "value",
   "targetUuid": "{c08a93fc-d198-4a66-9d38-9d2b53e0c464}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a08414df-50b5-46c0-b37c-b2c2d74d4474}",
   "sourcePort": "value",
   "targetUuid": "{0fd39df1-5588-42f0-8fca-af31905b8a9a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{622b5a50-6153-4a6d-961e-fc99f2455dc8}",
   "sourcePort": "value",
   "targetUuid": "{88172c5f-f73b-4fb7-8e19-854f5e33fcbd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{dcf03a77-16f5-4258-9f4a-3efb85dca057}",
   "sourcePort": "value",
   "targetUuid": "{05ff4d64-a006-4050-9469-30d604a0be10}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a793f190-c429-4743-ac7c-40c6df7a79e0}",
   "sourcePort": "value",
   "targetUuid": "{da1e87f4-33f1-4276-a3d0-2533a35ee90e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0087836a-3508-4c35-ad4f-d59ddc779b84}",
   "sourcePort": "value",
   "targetUuid": "{421fa020-4260-44d7-b790-b7a7b30ea387}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a574ad9d-8db5-4219-bac5-a7384a276238}",
   "sourcePort": "value",
   "targetUuid": "{bba7873a-0a65-4f80-9a11-edf7487180c6}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{8837abbc-acaf-4cf4-9669-06fe822a4b16}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{8837abbc-acaf-4cf4-9669-06fe822a4b16}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{40058703-f448-4105-b95d-91f078d7efbd}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{8837abbc-acaf-4cf4-9669-06fe822a4b16}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;"
    }
   ]
  }
 }
}