{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9559f32a-14fe-4e65-aa1e-b04f34ac7638}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2fd21476-d880-4f86-86ce-ac2b3af68c72}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bf9e788e-3bd3-466d-8b1d-8c8e928fd59a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b3e834e6-044b-4bdd-b273-8f922da87563}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{9ac0e2cc-1a46-49d2-82a1-717edffa965b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7b4d4bdf-bbbc-4214-a7a5-16418145e055}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a43919ff-467b-45d4-be4f-5787d7fc84d7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9bf5915e-81cc-4d7f-9545-7e39ed40108a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{aa237f4d-563a-490d-b675-f72311547264}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3b5691b3-68ea-4cb5-a3eb-481ca9b1c388}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{ebe8e3c3-ac0e-475d-8a6b-ce0d112dee7b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3c174388-df38-4fbf-b619-5957097737e9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c796e1c6-9892-46b9-a195-74953cdb7cb4}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{d58c1267-5061-4121-a7ad-b9268683489d}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{b78c22b2-7ed6-4f46-ac41-41c792c7162a}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{bb88d76e-f8c6-4329-a70e-0d4ab1cb110d}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4cd9fb93-0c68-489c-955e-25826b307ab0}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a89d5a69-afbd-4e83-94e4-16e54a3bbb45}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{158937e8-963e-4fdf-81b0-d64d9b5a35aa}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{38c56746-0302-4ec7-9a0a-35a76fd98c8b}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dd1fe175-8660-406e-88a4-2b01cdf744c8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{99f92df5-c943-45e2-a4ec-986b1ffa9a95}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{63046ec4-a083-418f-9fba-01ad29137030}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{1e48ad0f-6541-4ba2-8bd7-565ac6e240db}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{15b62c09-ceb0-4855-ae3a-300b99279a55}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{fe04cb35-3483-42db-9a51-a1d041f893ee}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{5f54f63c-0a4f-4121-b3ef-3856413e7e8c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{75089c3c-2568-4a8b-9ce7-5ef010567c1d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e2377d6b-1eb3-43f7-a709-48cf57be5fdf}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{eaedb7c8-d420-4e07-9336-f9c758b0341c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0732cf7e-dfda-44d7-ae02-ceb670c5398a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{7d4632da-0346-4fac-9b98-d8d8ba975d6d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{2a3fce71-3c27-4866-aefe-5a6f51190ecb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{cc68f004-bdc9-4465-b0bd-020aaf75a76d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{9930b210-184d-42da-8603-134be63e00a0}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{158937e8-963e-4fdf-81b0-d64d9b5a35aa}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{158937e8-963e-4fdf-81b0-d64d9b5a35aa}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{158937e8-963e-4fdf-81b0-d64d9b5a35aa}",
   "sourcePort": "mixed",
   "targetUuid": "{3c174388-df38-4fbf-b619-5957097737e9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3c174388-df38-4fbf-b619-5957097737e9}",
   "sourcePort": "output0",
   "targetUuid": "{2fd21476-d880-4f86-86ce-ac2b3af68c72}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2fd21476-d880-4f86-86ce-ac2b3af68c72}",
   "sourcePort": "output0",
   "targetUuid": "{9559f32a-14fe-4e65-aa1e-b04f34ac7638}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9559f32a-14fe-4e65-aa1e-b04f34ac7638}",
   "sourcePort": "output0",
   "targetUuid": "{99f92df5-c943-45e2-a4ec-986b1ffa9a95}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{2fd21476-d880-4f86-86ce-ac2b3af68c72}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1e48ad0f-6541-4ba2-8bd7-565ac6e240db}",
   "sourcePort": "normal",
   "targetUuid": "{aa237f4d-563a-490d-b675-f72311547264}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{aa237f4d-563a-490d-b675-f72311547264}",
   "sourcePort": "transformed",
   "targetUuid": "{9bf5915e-81cc-4d7f-9545-7e39ed40108a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9bf5915e-81cc-4d7f-9545-7e39ed40108a}",
   "sourcePort": "output0",
   "targetUuid": "{a43919ff-467b-45d4-be4f-5787d7fc84d7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a43919ff-467b-45d4-be4f-5787d7fc84d7}",
   "sourcePort": "output0",
   "targetUuid": "{7b4d4bdf-bbbc-4214-a7a5-16418145e055}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3b5691b3-68ea-4cb5-a3eb-481ca9b1c388}",
   "sourcePort": "output0",
   "targetUuid": "{7b4d4bdf-bbbc-4214-a7a5-16418145e055}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7b4d4bdf-bbbc-4214-a7a5-16418145e055}",
   "sourcePort": "output0",
   "targetUuid": "{9ac0e2cc-1a46-49d2-82a1-717edffa965b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{3b5691b3-68ea-4cb5-a3eb-481ca9b1c388}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b3e834e6-044b-4bdd-b273-8f922da87563}",
   "sourcePort": "output0",
   "targetUuid": "{bf9e788e-3bd3-466d-8b1d-8c8e928fd59a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9ac0e2cc-1a46-49d2-82a1-717edffa965b}",
   "sourcePort": "output0",
   "targetUuid": "{b3e834e6-044b-4bdd-b273-8f922da87563}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ebe8e3c3-ac0e-475d-8a6b-ce0d112dee7b}",
   "sourcePort": "z",
   "targetUuid": "{dd1fe175-8660-406e-88a4-2b01cdf744c8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{dd1fe175-8660-406e-88a4-2b01cdf744c8}",
   "sourcePort": "output0",
   "targetUuid": "{38c56746-0302-4ec7-9a0a-35a76fd98c8b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{dd1fe175-8660-406e-88a4-2b01cdf744c8}",
   "sourcePort": "output0",
   "targetUuid": "{38c56746-0302-4ec7-9a0a-35a76fd98c8b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{38c56746-0302-4ec7-9a0a-35a76fd98c8b}",
   "sourcePort": "output0",
   "targetUuid": "{158937e8-963e-4fdf-81b0-d64d9b5a35aa}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{9ac0e2cc-1a46-49d2-82a1-717edffa965b}",
   "sourcePort": "output0",
   "targetUuid": "{ebe8e3c3-ac0e-475d-8a6b-ce0d112dee7b}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{d58c1267-5061-4121-a7ad-b9268683489d}",
   "sourcePort": "color",
   "targetUuid": "{b78c22b2-7ed6-4f46-ac41-41c792c7162a}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b78c22b2-7ed6-4f46-ac41-41c792c7162a}",
   "sourcePort": "mixed",
   "targetUuid": "{c796e1c6-9892-46b9-a195-74953cdb7cb4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{b78c22b2-7ed6-4f46-ac41-41c792c7162a}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "postGain",
   "targetUuid": "{c796e1c6-9892-46b9-a195-74953cdb7cb4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c796e1c6-9892-46b9-a195-74953cdb7cb4}",
   "sourcePort": "output0",
   "targetUuid": "{99f92df5-c943-45e2-a4ec-986b1ffa9a95}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{bb88d76e-f8c6-4329-a70e-0d4ab1cb110d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{bb88d76e-f8c6-4329-a70e-0d4ab1cb110d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{38c56746-0302-4ec7-9a0a-35a76fd98c8b}",
   "sourcePort": "output0",
   "targetUuid": "{bb88d76e-f8c6-4329-a70e-0d4ab1cb110d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{bb88d76e-f8c6-4329-a70e-0d4ab1cb110d}",
   "sourcePort": "mixed",
   "targetUuid": "{4cd9fb93-0c68-489c-955e-25826b307ab0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4cd9fb93-0c68-489c-955e-25826b307ab0}",
   "sourcePort": "output0",
   "targetUuid": "{a89d5a69-afbd-4e83-94e4-16e54a3bbb45}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "alphaGain",
   "targetUuid": "{a89d5a69-afbd-4e83-94e4-16e54a3bbb45}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{75089c3c-2568-4a8b-9ce7-5ef010567c1d}",
   "sourcePort": "shader",
   "targetUuid": "{63046ec4-a083-418f-9fba-01ad29137030}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{bf9e788e-3bd3-466d-8b1d-8c8e928fd59a}",
   "sourcePort": "output0",
   "targetUuid": "{15b62c09-ceb0-4855-ae3a-300b99279a55}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{15b62c09-ceb0-4855-ae3a-300b99279a55}",
   "sourcePort": "color",
   "targetUuid": "{3c174388-df38-4fbf-b619-5957097737e9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{15b62c09-ceb0-4855-ae3a-300b99279a55}",
   "sourcePort": "alpha",
   "targetUuid": "{4cd9fb93-0c68-489c-955e-25826b307ab0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fe04cb35-3483-42db-9a51-a1d041f893ee}",
   "sourcePort": "reflection",
   "targetUuid": "{15b62c09-ceb0-4855-ae3a-300b99279a55}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "normalScaling",
   "targetUuid": "{a43919ff-467b-45d4-be4f-5787d7fc84d7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a89d5a69-afbd-4e83-94e4-16e54a3bbb45}",
   "sourcePort": "output0",
   "targetUuid": "{5f54f63c-0a4f-4121-b3ef-3856413e7e8c}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{99f92df5-c943-45e2-a4ec-986b1ffa9a95}",
   "sourcePort": "output0",
   "targetUuid": "{5f54f63c-0a4f-4121-b3ef-3856413e7e8c}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{5f54f63c-0a4f-4121-b3ef-3856413e7e8c}",
   "sourcePort": "color_out",
   "targetUuid": "{75089c3c-2568-4a8b-9ce7-5ef010567c1d}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{5f54f63c-0a4f-4121-b3ef-3856413e7e8c}",
   "sourcePort": "alpha_out",
   "targetUuid": "{75089c3c-2568-4a8b-9ce7-5ef010567c1d}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{e2377d6b-1eb3-43f7-a709-48cf57be5fdf}",
   "sourcePort": "value",
   "targetUuid": "{9559f32a-14fe-4e65-aa1e-b04f34ac7638}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eaedb7c8-d420-4e07-9336-f9c758b0341c}",
   "sourcePort": "value",
   "targetUuid": "{bf9e788e-3bd3-466d-8b1d-8c8e928fd59a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0732cf7e-dfda-44d7-ae02-ceb670c5398a}",
   "sourcePort": "value",
   "targetUuid": "{b3e834e6-044b-4bdd-b273-8f922da87563}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7d4632da-0346-4fac-9b98-d8d8ba975d6d}",
   "sourcePort": "value",
   "targetUuid": "{9bf5915e-81cc-4d7f-9545-7e39ed40108a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2a3fce71-3c27-4866-aefe-5a6f51190ecb}",
   "sourcePort": "value",
   "targetUuid": "{3b5691b3-68ea-4cb5-a3eb-481ca9b1c388}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cc68f004-bdc9-4465-b0bd-020aaf75a76d}",
   "sourcePort": "value",
   "targetUuid": "{b78c22b2-7ed6-4f46-ac41-41c792c7162a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9930b210-184d-42da-8603-134be63e00a0}",
   "sourcePort": "value",
   "targetUuid": "{dd1fe175-8660-406e-88a4-2b01cdf744c8}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{15b62c09-ceb0-4855-ae3a-300b99279a55}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{15b62c09-ceb0-4855-ae3a-300b99279a55}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{7490ecea-529b-4b23-8b8c-9a5da324d448}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{15b62c09-ceb0-4855-ae3a-300b99279a55}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;"
    }
   ]
  }
 }
}