{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d751d7a2-9c74-4b80-ac0b-3913a6b7a6bb}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ba45584e-fa3d-4973-bf29-22d3e918f9bc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0c256196-3249-492a-a1fa-0605787d9b37}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{da593670-232e-40e6-8674-73d9d10afe0f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{bbecb32d-48b5-41f9-8e85-68875f34fcd1}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1824d113-03e6-4a34-bfea-a2660fe04286}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{588c05ad-2b12-4f87-a566-daf28f4ae28d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fc03e718-23f4-4b65-b3ee-0a83784c0265}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{ace5c458-f400-4f75-ac83-cbc93bd03109}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{45dfd3f8-1956-4faf-8efb-c5f037c6e7ba}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{ade02174-80b4-44ff-9d9d-4e68e3bda209}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a7be6d7a-56c4-4446-8c49-9db6574cc632}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b6a23a79-7626-44f0-9620-7795c6070bf0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{a5b61c66-534e-482a-ac90-dff9c572b8e1}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{b52285c2-c327-472a-9993-41d20d2025b0}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{1a61128b-ebf8-454f-9e36-05dd1515a45c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{39beafa0-c16d-4d39-a797-42335599b086}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8db180e3-84db-493e-b8f2-32e36a039bdd}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{ab03a138-9354-44e3-8f79-28f87197680f}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{eb7b215a-1da0-4a3e-b1e1-0eef45a2b7d4}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2b23c3eb-711c-49f1-b4aa-eced9aa2f5a7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{149e05c1-ac3f-44e4-a7fb-c09940bbd2f6}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{3efdd416-894e-4d25-a391-3e4b91a9c915}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{bfa851cf-562f-4f58-857e-72d915aa7910}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{3e37110b-414c-4607-b6f6-8c6e97245c76}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{5787d5c2-2c18-412e-bfa4-abfe7acb133f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{b962ce96-cb86-4a28-9f1a-e0989ea18d9a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{4183208c-458a-4765-a8b1-ff6acc9bb0d4}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{598aefba-1a59-4886-bd02-780af81d6638}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{eb89c2e1-5bc8-4f52-83ce-0125f4d9611a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{43184983-50bf-4340-9cd2-754e168f33df}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b3b0d8ae-3283-467d-a95e-6479f3b40403}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{7333424e-4bf9-4010-b437-292189cc29a9}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ba13c9c1-e117-46e9-9a44-bdc919b22a4d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{707bd34c-f898-44c3-b84f-aa054b51ad34}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{ab03a138-9354-44e3-8f79-28f87197680f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{ab03a138-9354-44e3-8f79-28f87197680f}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{ab03a138-9354-44e3-8f79-28f87197680f}",
   "sourcePort": "mixed",
   "targetUuid": "{a7be6d7a-56c4-4446-8c49-9db6574cc632}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a7be6d7a-56c4-4446-8c49-9db6574cc632}",
   "sourcePort": "output0",
   "targetUuid": "{ba45584e-fa3d-4973-bf29-22d3e918f9bc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ba45584e-fa3d-4973-bf29-22d3e918f9bc}",
   "sourcePort": "output0",
   "targetUuid": "{d751d7a2-9c74-4b80-ac0b-3913a6b7a6bb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d751d7a2-9c74-4b80-ac0b-3913a6b7a6bb}",
   "sourcePort": "output0",
   "targetUuid": "{149e05c1-ac3f-44e4-a7fb-c09940bbd2f6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{ba45584e-fa3d-4973-bf29-22d3e918f9bc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3e37110b-414c-4607-b6f6-8c6e97245c76}",
   "sourcePort": "normal",
   "targetUuid": "{ace5c458-f400-4f75-ac83-cbc93bd03109}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{ace5c458-f400-4f75-ac83-cbc93bd03109}",
   "sourcePort": "transformed",
   "targetUuid": "{fc03e718-23f4-4b65-b3ee-0a83784c0265}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fc03e718-23f4-4b65-b3ee-0a83784c0265}",
   "sourcePort": "output0",
   "targetUuid": "{588c05ad-2b12-4f87-a566-daf28f4ae28d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{588c05ad-2b12-4f87-a566-daf28f4ae28d}",
   "sourcePort": "output0",
   "targetUuid": "{1824d113-03e6-4a34-bfea-a2660fe04286}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{45dfd3f8-1956-4faf-8efb-c5f037c6e7ba}",
   "sourcePort": "output0",
   "targetUuid": "{1824d113-03e6-4a34-bfea-a2660fe04286}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1824d113-03e6-4a34-bfea-a2660fe04286}",
   "sourcePort": "output0",
   "targetUuid": "{bbecb32d-48b5-41f9-8e85-68875f34fcd1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "normalScaling",
   "targetUuid": "{4183208c-458a-4765-a8b1-ff6acc9bb0d4}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{45dfd3f8-1956-4faf-8efb-c5f037c6e7ba}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{da593670-232e-40e6-8674-73d9d10afe0f}",
   "sourcePort": "output0",
   "targetUuid": "{0c256196-3249-492a-a1fa-0605787d9b37}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bbecb32d-48b5-41f9-8e85-68875f34fcd1}",
   "sourcePort": "output0",
   "targetUuid": "{da593670-232e-40e6-8674-73d9d10afe0f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ade02174-80b4-44ff-9d9d-4e68e3bda209}",
   "sourcePort": "z",
   "targetUuid": "{2b23c3eb-711c-49f1-b4aa-eced9aa2f5a7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2b23c3eb-711c-49f1-b4aa-eced9aa2f5a7}",
   "sourcePort": "output0",
   "targetUuid": "{eb7b215a-1da0-4a3e-b1e1-0eef45a2b7d4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2b23c3eb-711c-49f1-b4aa-eced9aa2f5a7}",
   "sourcePort": "output0",
   "targetUuid": "{eb7b215a-1da0-4a3e-b1e1-0eef45a2b7d4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb7b215a-1da0-4a3e-b1e1-0eef45a2b7d4}",
   "sourcePort": "output0",
   "targetUuid": "{ab03a138-9354-44e3-8f79-28f87197680f}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{bbecb32d-48b5-41f9-8e85-68875f34fcd1}",
   "sourcePort": "output0",
   "targetUuid": "{ade02174-80b4-44ff-9d9d-4e68e3bda209}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{a5b61c66-534e-482a-ac90-dff9c572b8e1}",
   "sourcePort": "color",
   "targetUuid": "{b52285c2-c327-472a-9993-41d20d2025b0}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b52285c2-c327-472a-9993-41d20d2025b0}",
   "sourcePort": "mixed",
   "targetUuid": "{b6a23a79-7626-44f0-9620-7795c6070bf0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{b52285c2-c327-472a-9993-41d20d2025b0}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "postGain",
   "targetUuid": "{b6a23a79-7626-44f0-9620-7795c6070bf0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b6a23a79-7626-44f0-9620-7795c6070bf0}",
   "sourcePort": "output0",
   "targetUuid": "{149e05c1-ac3f-44e4-a7fb-c09940bbd2f6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{149e05c1-ac3f-44e4-a7fb-c09940bbd2f6}",
   "sourcePort": "output0",
   "targetUuid": "{3efdd416-894e-4d25-a391-3e4b91a9c915}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{1a61128b-ebf8-454f-9e36-05dd1515a45c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{1a61128b-ebf8-454f-9e36-05dd1515a45c}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{eb7b215a-1da0-4a3e-b1e1-0eef45a2b7d4}",
   "sourcePort": "output0",
   "targetUuid": "{1a61128b-ebf8-454f-9e36-05dd1515a45c}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{1a61128b-ebf8-454f-9e36-05dd1515a45c}",
   "sourcePort": "mixed",
   "targetUuid": "{39beafa0-c16d-4d39-a797-42335599b086}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{39beafa0-c16d-4d39-a797-42335599b086}",
   "sourcePort": "output0",
   "targetUuid": "{8db180e3-84db-493e-b8f2-32e36a039bdd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "alphaGain",
   "targetUuid": "{8db180e3-84db-493e-b8f2-32e36a039bdd}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8db180e3-84db-493e-b8f2-32e36a039bdd}",
   "sourcePort": "output0",
   "targetUuid": "{3efdd416-894e-4d25-a391-3e4b91a9c915}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{3efdd416-894e-4d25-a391-3e4b91a9c915}",
   "sourcePort": "shader",
   "targetUuid": "{bfa851cf-562f-4f58-857e-72d915aa7910}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0c256196-3249-492a-a1fa-0605787d9b37}",
   "sourcePort": "output0",
   "targetUuid": "{5787d5c2-2c18-412e-bfa4-abfe7acb133f}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{5787d5c2-2c18-412e-bfa4-abfe7acb133f}",
   "sourcePort": "color",
   "targetUuid": "{a7be6d7a-56c4-4446-8c49-9db6574cc632}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5787d5c2-2c18-412e-bfa4-abfe7acb133f}",
   "sourcePort": "alpha",
   "targetUuid": "{39beafa0-c16d-4d39-a797-42335599b086}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b962ce96-cb86-4a28-9f1a-e0989ea18d9a}",
   "sourcePort": "reflection",
   "targetUuid": "{5787d5c2-2c18-412e-bfa4-abfe7acb133f}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{4183208c-458a-4765-a8b1-ff6acc9bb0d4}",
   "sourcePort": "output",
   "targetUuid": "{588c05ad-2b12-4f87-a566-daf28f4ae28d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{598aefba-1a59-4886-bd02-780af81d6638}",
   "sourcePort": "value",
   "targetUuid": "{d751d7a2-9c74-4b80-ac0b-3913a6b7a6bb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb89c2e1-5bc8-4f52-83ce-0125f4d9611a}",
   "sourcePort": "value",
   "targetUuid": "{0c256196-3249-492a-a1fa-0605787d9b37}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{43184983-50bf-4340-9cd2-754e168f33df}",
   "sourcePort": "value",
   "targetUuid": "{da593670-232e-40e6-8674-73d9d10afe0f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3b0d8ae-3283-467d-a95e-6479f3b40403}",
   "sourcePort": "value",
   "targetUuid": "{fc03e718-23f4-4b65-b3ee-0a83784c0265}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7333424e-4bf9-4010-b437-292189cc29a9}",
   "sourcePort": "value",
   "targetUuid": "{45dfd3f8-1956-4faf-8efb-c5f037c6e7ba}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ba13c9c1-e117-46e9-9a44-bdc919b22a4d}",
   "sourcePort": "value",
   "targetUuid": "{b52285c2-c327-472a-9993-41d20d2025b0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{707bd34c-f898-44c3-b84f-aa054b51ad34}",
   "sourcePort": "value",
   "targetUuid": "{2b23c3eb-711c-49f1-b4aa-eced9aa2f5a7}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{5787d5c2-2c18-412e-bfa4-abfe7acb133f}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{5787d5c2-2c18-412e-bfa4-abfe7acb133f}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{5787d5c2-2c18-412e-bfa4-abfe7acb133f}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{5774b36b-d2e5-407c-8636-5d4ddb6a7ccf}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{4183208c-458a-4765-a8b1-ff6acc9bb0d4}",
   "targetPort": "gltfYUp"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "layout(location = 3) in vec3 worldNormal;",
      "layout(location = 2) in vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "layout(location = 0) in vec2 texCoord;",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "layout(location = 1) in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain",
    "gltfYUp"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float reflectionGain;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    bool projectReflectionMap;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D reflectionMap;\n"
     ],
     "substitution": "highp sampler2D $reflectionMap = reflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $reflectionGain = properties.reflectionGain;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float reflectionGain;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    bool projectReflectionMap;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;\nuniform sampler2D reflectionMap;\n"
     ],
     "substitution": "sampler2D $reflectionMap = reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $reflectionGain = properties.reflectionGain;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float reflectionGain;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    bool projectReflectionMap;\n    bool gltfYUp;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D reflectionMap;\n"
     ],
     "substitution": "sampler2D $reflectionMap = reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $reflectionGain = properties.reflectionGain;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $gltfYUp = properties.gltfYUp;"
    }
   ]
  }
 }
}