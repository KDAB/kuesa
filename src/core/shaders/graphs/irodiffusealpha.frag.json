{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{89507355-1bf3-4fb1-9c4f-74c8639a7493}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6e4b503d-bfdb-48a2-bf8f-af9f936e3e77}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4ba8e234-9607-440e-a5fe-9dfcfdc67dcd}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{32c5c7b2-a64c-4b27-b60c-8115444dd495}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{8d12e416-0b26-4712-80b0-14900c593b0a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1cda967e-8077-42e1-8ae9-2fb32028838e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e8403442-f77e-4fc8-bb00-656c5538f0d6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{348eb8e6-9798-41d1-adb9-8b6d5fe324b4}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{d5764710-76ce-4a38-8701-0d085775820f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3a09d02a-f576-4908-9df4-304f7a0c3245}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{16a13584-6e2c-4b7b-b1c7-c204ec2e5c03}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0cffdc4f-cc6f-4750-80fa-a0afadc60060}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9618a9dc-9e34-4ad1-b2f3-4b7f56aa89da}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{b693896b-e2b4-4f88-b67c-bdeab3594334}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{b7f4022a-fbdd-41d9-b08c-816e57aa9fcf}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{1201e9a4-cf57-455e-8e03-2ba7b9b7985e}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{cace01ad-fad8-4a70-ba0b-05c42f84ac13}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c450a7a9-135e-40fb-8a16-0cfda31a848c}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{3f63ee7d-ec33-4b33-9c0d-afd2b9f6b3c4}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2a828b01-d289-462d-8804-c3a19af9c07d}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6c9d335f-5a7b-4020-94a0-403f57f1b573}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{448c3e26-5673-4484-86fb-0c371fb6ba55}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{061a3840-9ade-4145-afe6-d4a866b739f4}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{1823aa3b-9850-4df7-94cc-0eb2fc8bed9c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{2298e9e6-2b29-4784-a3be-b9d343975282}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{9e3d0409-d417-4353-b2dc-2e03d2e306c4}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{c16c1093-4451-4a24-bf7d-27a414f5bedd}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ee98d5f6-738e-4e8a-b1c1-11379feb4408}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{8699ff0c-9da9-4cf6-8089-ce85d4f6fc4d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ef4b38aa-c8a6-4f55-a344-12a3cdd379c8}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e1abe93a-4c3a-4f9c-a651-12179d1aff9c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{682a513a-a19e-4da9-a0f1-f0a9495e2a29}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d2285eae-85f5-4dcb-acff-bbf274147da6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{8e2d7f6e-5593-4e95-b9cc-850ac4434f85}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{3f63ee7d-ec33-4b33-9c0d-afd2b9f6b3c4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{3f63ee7d-ec33-4b33-9c0d-afd2b9f6b3c4}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{3f63ee7d-ec33-4b33-9c0d-afd2b9f6b3c4}",
   "sourcePort": "mixed",
   "targetUuid": "{0cffdc4f-cc6f-4750-80fa-a0afadc60060}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0cffdc4f-cc6f-4750-80fa-a0afadc60060}",
   "sourcePort": "output0",
   "targetUuid": "{6e4b503d-bfdb-48a2-bf8f-af9f936e3e77}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6e4b503d-bfdb-48a2-bf8f-af9f936e3e77}",
   "sourcePort": "output0",
   "targetUuid": "{89507355-1bf3-4fb1-9c4f-74c8639a7493}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{89507355-1bf3-4fb1-9c4f-74c8639a7493}",
   "sourcePort": "output0",
   "targetUuid": "{448c3e26-5673-4484-86fb-0c371fb6ba55}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{6e4b503d-bfdb-48a2-bf8f-af9f936e3e77}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2298e9e6-2b29-4784-a3be-b9d343975282}",
   "sourcePort": "normal",
   "targetUuid": "{d5764710-76ce-4a38-8701-0d085775820f}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{d5764710-76ce-4a38-8701-0d085775820f}",
   "sourcePort": "transformed",
   "targetUuid": "{348eb8e6-9798-41d1-adb9-8b6d5fe324b4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{348eb8e6-9798-41d1-adb9-8b6d5fe324b4}",
   "sourcePort": "output0",
   "targetUuid": "{e8403442-f77e-4fc8-bb00-656c5538f0d6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e8403442-f77e-4fc8-bb00-656c5538f0d6}",
   "sourcePort": "output0",
   "targetUuid": "{1cda967e-8077-42e1-8ae9-2fb32028838e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3a09d02a-f576-4908-9df4-304f7a0c3245}",
   "sourcePort": "output0",
   "targetUuid": "{1cda967e-8077-42e1-8ae9-2fb32028838e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1cda967e-8077-42e1-8ae9-2fb32028838e}",
   "sourcePort": "output0",
   "targetUuid": "{8d12e416-0b26-4712-80b0-14900c593b0a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "normalScaling",
   "targetUuid": "{e8403442-f77e-4fc8-bb00-656c5538f0d6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{3a09d02a-f576-4908-9df4-304f7a0c3245}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{32c5c7b2-a64c-4b27-b60c-8115444dd495}",
   "sourcePort": "output0",
   "targetUuid": "{4ba8e234-9607-440e-a5fe-9dfcfdc67dcd}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8d12e416-0b26-4712-80b0-14900c593b0a}",
   "sourcePort": "output0",
   "targetUuid": "{32c5c7b2-a64c-4b27-b60c-8115444dd495}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{16a13584-6e2c-4b7b-b1c7-c204ec2e5c03}",
   "sourcePort": "z",
   "targetUuid": "{6c9d335f-5a7b-4020-94a0-403f57f1b573}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6c9d335f-5a7b-4020-94a0-403f57f1b573}",
   "sourcePort": "output0",
   "targetUuid": "{2a828b01-d289-462d-8804-c3a19af9c07d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6c9d335f-5a7b-4020-94a0-403f57f1b573}",
   "sourcePort": "output0",
   "targetUuid": "{2a828b01-d289-462d-8804-c3a19af9c07d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2a828b01-d289-462d-8804-c3a19af9c07d}",
   "sourcePort": "output0",
   "targetUuid": "{3f63ee7d-ec33-4b33-9c0d-afd2b9f6b3c4}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{8d12e416-0b26-4712-80b0-14900c593b0a}",
   "sourcePort": "output0",
   "targetUuid": "{16a13584-6e2c-4b7b-b1c7-c204ec2e5c03}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{b693896b-e2b4-4f88-b67c-bdeab3594334}",
   "sourcePort": "color",
   "targetUuid": "{b7f4022a-fbdd-41d9-b08c-816e57aa9fcf}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b7f4022a-fbdd-41d9-b08c-816e57aa9fcf}",
   "sourcePort": "mixed",
   "targetUuid": "{9618a9dc-9e34-4ad1-b2f3-4b7f56aa89da}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{b7f4022a-fbdd-41d9-b08c-816e57aa9fcf}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "postGain",
   "targetUuid": "{9618a9dc-9e34-4ad1-b2f3-4b7f56aa89da}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9618a9dc-9e34-4ad1-b2f3-4b7f56aa89da}",
   "sourcePort": "output0",
   "targetUuid": "{448c3e26-5673-4484-86fb-0c371fb6ba55}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{448c3e26-5673-4484-86fb-0c371fb6ba55}",
   "sourcePort": "output0",
   "targetUuid": "{061a3840-9ade-4145-afe6-d4a866b739f4}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{1201e9a4-cf57-455e-8e03-2ba7b9b7985e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{1201e9a4-cf57-455e-8e03-2ba7b9b7985e}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{2a828b01-d289-462d-8804-c3a19af9c07d}",
   "sourcePort": "output0",
   "targetUuid": "{1201e9a4-cf57-455e-8e03-2ba7b9b7985e}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{1201e9a4-cf57-455e-8e03-2ba7b9b7985e}",
   "sourcePort": "mixed",
   "targetUuid": "{cace01ad-fad8-4a70-ba0b-05c42f84ac13}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cace01ad-fad8-4a70-ba0b-05c42f84ac13}",
   "sourcePort": "output0",
   "targetUuid": "{c450a7a9-135e-40fb-8a16-0cfda31a848c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "alphaGain",
   "targetUuid": "{c450a7a9-135e-40fb-8a16-0cfda31a848c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c450a7a9-135e-40fb-8a16-0cfda31a848c}",
   "sourcePort": "output0",
   "targetUuid": "{061a3840-9ade-4145-afe6-d4a866b739f4}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{061a3840-9ade-4145-afe6-d4a866b739f4}",
   "sourcePort": "shader",
   "targetUuid": "{1823aa3b-9850-4df7-94cc-0eb2fc8bed9c}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{4ba8e234-9607-440e-a5fe-9dfcfdc67dcd}",
   "sourcePort": "output0",
   "targetUuid": "{9e3d0409-d417-4353-b2dc-2e03d2e306c4}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{9e3d0409-d417-4353-b2dc-2e03d2e306c4}",
   "sourcePort": "color",
   "targetUuid": "{0cffdc4f-cc6f-4750-80fa-a0afadc60060}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9e3d0409-d417-4353-b2dc-2e03d2e306c4}",
   "sourcePort": "alpha",
   "targetUuid": "{cace01ad-fad8-4a70-ba0b-05c42f84ac13}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c16c1093-4451-4a24-bf7d-27a414f5bedd}",
   "sourcePort": "reflection",
   "targetUuid": "{9e3d0409-d417-4353-b2dc-2e03d2e306c4}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{ee98d5f6-738e-4e8a-b1c1-11379feb4408}",
   "sourcePort": "value",
   "targetUuid": "{89507355-1bf3-4fb1-9c4f-74c8639a7493}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8699ff0c-9da9-4cf6-8089-ce85d4f6fc4d}",
   "sourcePort": "value",
   "targetUuid": "{4ba8e234-9607-440e-a5fe-9dfcfdc67dcd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ef4b38aa-c8a6-4f55-a344-12a3cdd379c8}",
   "sourcePort": "value",
   "targetUuid": "{32c5c7b2-a64c-4b27-b60c-8115444dd495}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e1abe93a-4c3a-4f9c-a651-12179d1aff9c}",
   "sourcePort": "value",
   "targetUuid": "{348eb8e6-9798-41d1-adb9-8b6d5fe324b4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{682a513a-a19e-4da9-a0f1-f0a9495e2a29}",
   "sourcePort": "value",
   "targetUuid": "{3a09d02a-f576-4908-9df4-304f7a0c3245}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d2285eae-85f5-4dcb-acff-bbf274147da6}",
   "sourcePort": "value",
   "targetUuid": "{b7f4022a-fbdd-41d9-b08c-816e57aa9fcf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8e2d7f6e-5593-4e95-b9cc-850ac4434f85}",
   "sourcePort": "value",
   "targetUuid": "{6c9d335f-5a7b-4020-94a0-403f57f1b573}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{9e3d0409-d417-4353-b2dc-2e03d2e306c4}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{9e3d0409-d417-4353-b2dc-2e03d2e306c4}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{938242c1-bd9a-410a-b532-3bba1ab594e8}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{9e3d0409-d417-4353-b2dc-2e03d2e306c4}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}