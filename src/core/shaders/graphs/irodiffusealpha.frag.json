{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5dcc152f-503a-456d-9218-97656fb266bc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b1503c2e-4117-4df9-9b67-7b2dec601785}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fb6c79b1-2053-46bd-8123-2a078290d179}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{54549f46-ee61-4765-8ae3-4a7ed9024351}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{4b345f20-f80e-43f6-b0bd-fb326f84aba9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e9410809-64a2-413a-b0ec-d4736002793d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{75e989ba-49fe-4fcc-a523-3ae50fbe14cf}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9aa3b596-72be-4d0a-a1b1-a0ec2937dc0f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{ff4b316f-a8d0-44d4-82b4-8a92a033e8db}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9af3b19a-61a1-401c-a012-1cbebe0c88c5}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{0b0c5a81-a9a5-4f09-b0b5-59be63e45607}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c60e4e59-aefb-419a-a7c6-aa2916621c31}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a52dd8f6-2f7a-4b78-9807-000b82393a94}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{447e2f25-9794-41e4-96f6-b1b09e9a59a7}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{d981f0bb-9c54-4a21-984e-faa150402887}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{b82222ef-f579-4cd0-9573-ff44abfeef61}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d2b369a8-ea85-4c17-80ce-e80d063d49c1}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7fcc0fbf-8903-4a86-acd7-b937659619ad}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{a88d4273-8ae4-44c2-bc3a-0e3068909770}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c03ba50a-5010-4840-9893-f3db544610d6}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4906f074-d97d-4d7d-b1ac-be35d4f6998e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{547b6268-67bb-4533-8436-8d3ff0d537f8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{c11d665d-417e-482e-b528-9be26c800900}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{f8093e91-91c6-4891-b1c3-317e4fead516}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{367f9eec-7ee7-4403-9149-1c70c7c4ab67}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{c7821074-b39b-4d97-84ce-bb6739dcd19c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{782bebaa-4582-4f30-9fc5-381b51027837}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{848aa22c-e992-4c9d-84b1-0a35ab260e79}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{80abb3f1-ff6b-4f20-9c2d-551edbfd1702}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{f04156db-77fd-4724-a338-bc12b3d52a09}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{61126abf-03ea-4973-bd9a-7ca45fa08b82}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{1744a1f7-4810-42a4-9e3a-bb87052a3463}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{fef7d816-97cb-40af-806b-9892e7c42dcc}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{80c55f50-2e9e-46aa-832e-36c34c231eec}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{a88d4273-8ae4-44c2-bc3a-0e3068909770}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{a88d4273-8ae4-44c2-bc3a-0e3068909770}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{a88d4273-8ae4-44c2-bc3a-0e3068909770}",
   "sourcePort": "mixed",
   "targetUuid": "{c60e4e59-aefb-419a-a7c6-aa2916621c31}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c60e4e59-aefb-419a-a7c6-aa2916621c31}",
   "sourcePort": "output0",
   "targetUuid": "{b1503c2e-4117-4df9-9b67-7b2dec601785}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b1503c2e-4117-4df9-9b67-7b2dec601785}",
   "sourcePort": "output0",
   "targetUuid": "{5dcc152f-503a-456d-9218-97656fb266bc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5dcc152f-503a-456d-9218-97656fb266bc}",
   "sourcePort": "output0",
   "targetUuid": "{547b6268-67bb-4533-8436-8d3ff0d537f8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{b1503c2e-4117-4df9-9b67-7b2dec601785}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{367f9eec-7ee7-4403-9149-1c70c7c4ab67}",
   "sourcePort": "normal",
   "targetUuid": "{ff4b316f-a8d0-44d4-82b4-8a92a033e8db}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{ff4b316f-a8d0-44d4-82b4-8a92a033e8db}",
   "sourcePort": "transformed",
   "targetUuid": "{9aa3b596-72be-4d0a-a1b1-a0ec2937dc0f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9aa3b596-72be-4d0a-a1b1-a0ec2937dc0f}",
   "sourcePort": "output0",
   "targetUuid": "{75e989ba-49fe-4fcc-a523-3ae50fbe14cf}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{75e989ba-49fe-4fcc-a523-3ae50fbe14cf}",
   "sourcePort": "output0",
   "targetUuid": "{e9410809-64a2-413a-b0ec-d4736002793d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9af3b19a-61a1-401c-a012-1cbebe0c88c5}",
   "sourcePort": "output0",
   "targetUuid": "{e9410809-64a2-413a-b0ec-d4736002793d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e9410809-64a2-413a-b0ec-d4736002793d}",
   "sourcePort": "output0",
   "targetUuid": "{4b345f20-f80e-43f6-b0bd-fb326f84aba9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "normalScaling",
   "targetUuid": "{75e989ba-49fe-4fcc-a523-3ae50fbe14cf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{9af3b19a-61a1-401c-a012-1cbebe0c88c5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{54549f46-ee61-4765-8ae3-4a7ed9024351}",
   "sourcePort": "output0",
   "targetUuid": "{fb6c79b1-2053-46bd-8123-2a078290d179}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4b345f20-f80e-43f6-b0bd-fb326f84aba9}",
   "sourcePort": "output0",
   "targetUuid": "{54549f46-ee61-4765-8ae3-4a7ed9024351}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0b0c5a81-a9a5-4f09-b0b5-59be63e45607}",
   "sourcePort": "z",
   "targetUuid": "{4906f074-d97d-4d7d-b1ac-be35d4f6998e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4906f074-d97d-4d7d-b1ac-be35d4f6998e}",
   "sourcePort": "output0",
   "targetUuid": "{c03ba50a-5010-4840-9893-f3db544610d6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4906f074-d97d-4d7d-b1ac-be35d4f6998e}",
   "sourcePort": "output0",
   "targetUuid": "{c03ba50a-5010-4840-9893-f3db544610d6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c03ba50a-5010-4840-9893-f3db544610d6}",
   "sourcePort": "output0",
   "targetUuid": "{a88d4273-8ae4-44c2-bc3a-0e3068909770}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{4b345f20-f80e-43f6-b0bd-fb326f84aba9}",
   "sourcePort": "output0",
   "targetUuid": "{0b0c5a81-a9a5-4f09-b0b5-59be63e45607}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{447e2f25-9794-41e4-96f6-b1b09e9a59a7}",
   "sourcePort": "color",
   "targetUuid": "{d981f0bb-9c54-4a21-984e-faa150402887}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{d981f0bb-9c54-4a21-984e-faa150402887}",
   "sourcePort": "mixed",
   "targetUuid": "{a52dd8f6-2f7a-4b78-9807-000b82393a94}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{d981f0bb-9c54-4a21-984e-faa150402887}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "postGain",
   "targetUuid": "{a52dd8f6-2f7a-4b78-9807-000b82393a94}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a52dd8f6-2f7a-4b78-9807-000b82393a94}",
   "sourcePort": "output0",
   "targetUuid": "{547b6268-67bb-4533-8436-8d3ff0d537f8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{547b6268-67bb-4533-8436-8d3ff0d537f8}",
   "sourcePort": "output0",
   "targetUuid": "{c11d665d-417e-482e-b528-9be26c800900}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{b82222ef-f579-4cd0-9573-ff44abfeef61}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{b82222ef-f579-4cd0-9573-ff44abfeef61}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{c03ba50a-5010-4840-9893-f3db544610d6}",
   "sourcePort": "output0",
   "targetUuid": "{b82222ef-f579-4cd0-9573-ff44abfeef61}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b82222ef-f579-4cd0-9573-ff44abfeef61}",
   "sourcePort": "mixed",
   "targetUuid": "{d2b369a8-ea85-4c17-80ce-e80d063d49c1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d2b369a8-ea85-4c17-80ce-e80d063d49c1}",
   "sourcePort": "output0",
   "targetUuid": "{7fcc0fbf-8903-4a86-acd7-b937659619ad}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "alphaGain",
   "targetUuid": "{7fcc0fbf-8903-4a86-acd7-b937659619ad}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7fcc0fbf-8903-4a86-acd7-b937659619ad}",
   "sourcePort": "output0",
   "targetUuid": "{c11d665d-417e-482e-b528-9be26c800900}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{c11d665d-417e-482e-b528-9be26c800900}",
   "sourcePort": "shader",
   "targetUuid": "{f8093e91-91c6-4891-b1c3-317e4fead516}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{fb6c79b1-2053-46bd-8123-2a078290d179}",
   "sourcePort": "output0",
   "targetUuid": "{c7821074-b39b-4d97-84ce-bb6739dcd19c}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{c7821074-b39b-4d97-84ce-bb6739dcd19c}",
   "sourcePort": "color",
   "targetUuid": "{c60e4e59-aefb-419a-a7c6-aa2916621c31}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c7821074-b39b-4d97-84ce-bb6739dcd19c}",
   "sourcePort": "alpha",
   "targetUuid": "{d2b369a8-ea85-4c17-80ce-e80d063d49c1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{782bebaa-4582-4f30-9fc5-381b51027837}",
   "sourcePort": "reflection",
   "targetUuid": "{c7821074-b39b-4d97-84ce-bb6739dcd19c}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{848aa22c-e992-4c9d-84b1-0a35ab260e79}",
   "sourcePort": "value",
   "targetUuid": "{5dcc152f-503a-456d-9218-97656fb266bc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{80abb3f1-ff6b-4f20-9c2d-551edbfd1702}",
   "sourcePort": "value",
   "targetUuid": "{fb6c79b1-2053-46bd-8123-2a078290d179}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f04156db-77fd-4724-a338-bc12b3d52a09}",
   "sourcePort": "value",
   "targetUuid": "{54549f46-ee61-4765-8ae3-4a7ed9024351}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{61126abf-03ea-4973-bd9a-7ca45fa08b82}",
   "sourcePort": "value",
   "targetUuid": "{9aa3b596-72be-4d0a-a1b1-a0ec2937dc0f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1744a1f7-4810-42a4-9e3a-bb87052a3463}",
   "sourcePort": "value",
   "targetUuid": "{9af3b19a-61a1-401c-a012-1cbebe0c88c5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fef7d816-97cb-40af-806b-9892e7c42dcc}",
   "sourcePort": "value",
   "targetUuid": "{d981f0bb-9c54-4a21-984e-faa150402887}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{80c55f50-2e9e-46aa-832e-36c34c231eec}",
   "sourcePort": "value",
   "targetUuid": "{4906f074-d97d-4d7d-b1ac-be35d4f6998e}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{c7821074-b39b-4d97-84ce-bb6739dcd19c}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{c7821074-b39b-4d97-84ce-bb6739dcd19c}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{e60a62f2-1f15-4b97-8153-e91b676f9ec5}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{c7821074-b39b-4d97-84ce-bb6739dcd19c}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}