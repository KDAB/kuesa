{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{30485a3a-428f-45b6-9964-34b86ee98d99}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c9e61995-fb64-4995-9719-b3e58c6a04c0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{17d70217-dc21-49b6-8db2-35bd67f38a03}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7205e6d7-a011-4e1e-ba1d-7c40e9b4e11b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{956283b6-71dc-45d8-bbe9-2e5e0cd51107}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{af51b56f-af54-43ba-9d09-b5f7d67c52e1}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{177acbef-f6f3-4cb0-81ca-bbf8fe361672}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e5c24103-0586-4d8a-a95c-e179cc27018d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{a5bfc909-9ee7-48c7-8511-71b2873375b9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{38602774-e15c-4505-8bfa-a44fb20a72fb}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{9d475e5b-6ae8-42db-9534-76e730e32400}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ce8553b2-7ecf-4c31-ac59-86db5931f173}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1955fd8a-763a-4d70-803d-1e9e604081ce}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{5e920acd-ebd3-4ae4-8a3a-0ee47ff5c75e}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{d2d20471-e715-4d67-bbfc-5394a55f39ed}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{b7baaecf-5236-4412-8297-3cacf2ab4358}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8d9a3597-b865-457e-8336-3e1007cf040c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{16200927-ff45-4d55-bde2-8acb078f04e4}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{cd75f527-08af-4f10-8c7a-b3ff757ffc48}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{62f66ab7-aeab-4976-a72d-5d842a33292b}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{61643fae-a70b-4929-adb5-a5d9a92a8253}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8ed88a87-f7d4-4bea-8bab-de2d8d0189bc}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{e778442c-7038-4c09-85cd-4d152e831599}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{6d312949-313d-432c-b56d-a4b77a22373d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{6064853a-68b3-4e89-89df-3e700b7f5936}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{738679a7-3f9f-4a11-a5ef-04bc04de2c2b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{5b3b271f-38da-4521-9452-495c9d17dc46}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d086c55c-c03f-4aa7-9e55-49cb061194ba}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{346f071b-ac11-4fdc-946f-5b2e70010007}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{bc619121-6487-463b-bc3a-24eecc282a94}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{63390e06-4811-424f-9918-04d41889555b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{eebaea6a-d876-423f-9bd7-aa106a50609c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{8d13b35e-19cc-4f5a-bb21-d468022ffc34}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{cd75f527-08af-4f10-8c7a-b3ff757ffc48}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{cd75f527-08af-4f10-8c7a-b3ff757ffc48}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{cd75f527-08af-4f10-8c7a-b3ff757ffc48}",
   "sourcePort": "mixed",
   "targetUuid": "{ce8553b2-7ecf-4c31-ac59-86db5931f173}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ce8553b2-7ecf-4c31-ac59-86db5931f173}",
   "sourcePort": "output0",
   "targetUuid": "{c9e61995-fb64-4995-9719-b3e58c6a04c0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c9e61995-fb64-4995-9719-b3e58c6a04c0}",
   "sourcePort": "output0",
   "targetUuid": "{30485a3a-428f-45b6-9964-34b86ee98d99}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{30485a3a-428f-45b6-9964-34b86ee98d99}",
   "sourcePort": "output0",
   "targetUuid": "{8ed88a87-f7d4-4bea-8bab-de2d8d0189bc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{c9e61995-fb64-4995-9719-b3e58c6a04c0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6064853a-68b3-4e89-89df-3e700b7f5936}",
   "sourcePort": "normal",
   "targetUuid": "{a5bfc909-9ee7-48c7-8511-71b2873375b9}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{a5bfc909-9ee7-48c7-8511-71b2873375b9}",
   "sourcePort": "transformed",
   "targetUuid": "{e5c24103-0586-4d8a-a95c-e179cc27018d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e5c24103-0586-4d8a-a95c-e179cc27018d}",
   "sourcePort": "output0",
   "targetUuid": "{177acbef-f6f3-4cb0-81ca-bbf8fe361672}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{177acbef-f6f3-4cb0-81ca-bbf8fe361672}",
   "sourcePort": "output0",
   "targetUuid": "{af51b56f-af54-43ba-9d09-b5f7d67c52e1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{38602774-e15c-4505-8bfa-a44fb20a72fb}",
   "sourcePort": "output0",
   "targetUuid": "{af51b56f-af54-43ba-9d09-b5f7d67c52e1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{af51b56f-af54-43ba-9d09-b5f7d67c52e1}",
   "sourcePort": "output0",
   "targetUuid": "{956283b6-71dc-45d8-bbe9-2e5e0cd51107}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "normalScaling",
   "targetUuid": "{177acbef-f6f3-4cb0-81ca-bbf8fe361672}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{38602774-e15c-4505-8bfa-a44fb20a72fb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7205e6d7-a011-4e1e-ba1d-7c40e9b4e11b}",
   "sourcePort": "output0",
   "targetUuid": "{17d70217-dc21-49b6-8db2-35bd67f38a03}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{956283b6-71dc-45d8-bbe9-2e5e0cd51107}",
   "sourcePort": "output0",
   "targetUuid": "{7205e6d7-a011-4e1e-ba1d-7c40e9b4e11b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9d475e5b-6ae8-42db-9534-76e730e32400}",
   "sourcePort": "z",
   "targetUuid": "{61643fae-a70b-4929-adb5-a5d9a92a8253}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{61643fae-a70b-4929-adb5-a5d9a92a8253}",
   "sourcePort": "output0",
   "targetUuid": "{62f66ab7-aeab-4976-a72d-5d842a33292b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{61643fae-a70b-4929-adb5-a5d9a92a8253}",
   "sourcePort": "output0",
   "targetUuid": "{62f66ab7-aeab-4976-a72d-5d842a33292b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{62f66ab7-aeab-4976-a72d-5d842a33292b}",
   "sourcePort": "output0",
   "targetUuid": "{cd75f527-08af-4f10-8c7a-b3ff757ffc48}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{956283b6-71dc-45d8-bbe9-2e5e0cd51107}",
   "sourcePort": "output0",
   "targetUuid": "{9d475e5b-6ae8-42db-9534-76e730e32400}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{5e920acd-ebd3-4ae4-8a3a-0ee47ff5c75e}",
   "sourcePort": "color",
   "targetUuid": "{d2d20471-e715-4d67-bbfc-5394a55f39ed}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{d2d20471-e715-4d67-bbfc-5394a55f39ed}",
   "sourcePort": "mixed",
   "targetUuid": "{1955fd8a-763a-4d70-803d-1e9e604081ce}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{d2d20471-e715-4d67-bbfc-5394a55f39ed}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "postGain",
   "targetUuid": "{1955fd8a-763a-4d70-803d-1e9e604081ce}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1955fd8a-763a-4d70-803d-1e9e604081ce}",
   "sourcePort": "output0",
   "targetUuid": "{8ed88a87-f7d4-4bea-8bab-de2d8d0189bc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8ed88a87-f7d4-4bea-8bab-de2d8d0189bc}",
   "sourcePort": "output0",
   "targetUuid": "{e778442c-7038-4c09-85cd-4d152e831599}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "reflectionInnerAlpha",
   "targetUuid": "{b7baaecf-5236-4412-8297-3cacf2ab4358}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "reflectionOuterAlpha",
   "targetUuid": "{b7baaecf-5236-4412-8297-3cacf2ab4358}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{62f66ab7-aeab-4976-a72d-5d842a33292b}",
   "sourcePort": "output0",
   "targetUuid": "{b7baaecf-5236-4412-8297-3cacf2ab4358}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b7baaecf-5236-4412-8297-3cacf2ab4358}",
   "sourcePort": "mixed",
   "targetUuid": "{8d9a3597-b865-457e-8336-3e1007cf040c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8d9a3597-b865-457e-8336-3e1007cf040c}",
   "sourcePort": "output0",
   "targetUuid": "{16200927-ff45-4d55-bde2-8acb078f04e4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "alphaGain",
   "targetUuid": "{16200927-ff45-4d55-bde2-8acb078f04e4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{16200927-ff45-4d55-bde2-8acb078f04e4}",
   "sourcePort": "output0",
   "targetUuid": "{e778442c-7038-4c09-85cd-4d152e831599}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{e778442c-7038-4c09-85cd-4d152e831599}",
   "sourcePort": "shader",
   "targetUuid": "{6d312949-313d-432c-b56d-a4b77a22373d}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{17d70217-dc21-49b6-8db2-35bd67f38a03}",
   "sourcePort": "output0",
   "targetUuid": "{738679a7-3f9f-4a11-a5ef-04bc04de2c2b}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{6064853a-68b3-4e89-89df-3e700b7f5936}",
   "sourcePort": "position",
   "targetUuid": "{738679a7-3f9f-4a11-a5ef-04bc04de2c2b}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{738679a7-3f9f-4a11-a5ef-04bc04de2c2b}",
   "sourcePort": "color",
   "targetUuid": "{ce8553b2-7ecf-4c31-ac59-86db5931f173}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{738679a7-3f9f-4a11-a5ef-04bc04de2c2b}",
   "sourcePort": "alpha",
   "targetUuid": "{8d9a3597-b865-457e-8336-3e1007cf040c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5b3b271f-38da-4521-9452-495c9d17dc46}",
   "sourcePort": "value",
   "targetUuid": "{30485a3a-428f-45b6-9964-34b86ee98d99}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d086c55c-c03f-4aa7-9e55-49cb061194ba}",
   "sourcePort": "value",
   "targetUuid": "{17d70217-dc21-49b6-8db2-35bd67f38a03}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{346f071b-ac11-4fdc-946f-5b2e70010007}",
   "sourcePort": "value",
   "targetUuid": "{7205e6d7-a011-4e1e-ba1d-7c40e9b4e11b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{bc619121-6487-463b-bc3a-24eecc282a94}",
   "sourcePort": "value",
   "targetUuid": "{e5c24103-0586-4d8a-a95c-e179cc27018d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{63390e06-4811-424f-9918-04d41889555b}",
   "sourcePort": "value",
   "targetUuid": "{38602774-e15c-4505-8bfa-a44fb20a72fb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eebaea6a-d876-423f-9bd7-aa106a50609c}",
   "sourcePort": "value",
   "targetUuid": "{d2d20471-e715-4d67-bbfc-5394a55f39ed}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8d13b35e-19cc-4f5a-bb21-d468022ffc34}",
   "sourcePort": "value",
   "targetUuid": "{61643fae-a70b-4929-adb5-a5d9a92a8253}",
   "targetPort": "input0"
  },
  {
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{738679a7-3f9f-4a11-a5ef-04bc04de2c2b}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{738679a7-3f9f-4a11-a5ef-04bc04de2c2b}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{9fe4d938-12bf-49f7-b447-d084a0f6e1b0}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{738679a7-3f9f-4a11-a5ef-04bc04de2c2b}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "alphaGain",
    "reflectionInnerAlpha",
    "reflectionOuterAlpha",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float reflectionInnerAlpha;\n    highp float reflectionOuterAlpha;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $reflectionInnerAlpha = properties.reflectionInnerAlpha;highp float $reflectionOuterAlpha = properties.reflectionOuterAlpha;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float reflectionInnerAlpha;\n    float reflectionOuterAlpha;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $reflectionInnerAlpha = properties.reflectionInnerAlpha;float $reflectionOuterAlpha = properties.reflectionOuterAlpha;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}