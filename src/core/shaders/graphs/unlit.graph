{
    "edges": [
        {
            "layers": [
                "noBaseColorMap"
            ],
            "sourcePort": "value",
            "sourceUuid": "{604bed2b-e8b8-44a7-8a81-763c0cdae7b3}",
            "targetPort": "first",
            "targetUuid": "{60f02f4c-5ef1-4100-aa1a-771cc6a2a0e0}"
        },
        {
            "layers": [
            ],
            "sourcePort": "product",
            "sourceUuid": "{60f02f4c-5ef1-4100-aa1a-771cc6a2a0e0}",
            "targetPort": "first",
            "targetUuid": "{3ab1a915-4a49-4a23-9a7d-aa1df544e466}"
        },
        {
            "layers": [
                "hasColorAttr"
            ],
            "sourcePort": "value",
            "sourceUuid": "{0050769e-ab6d-47a4-9785-7f77e1c6536c}",
            "targetPort": "second",
            "targetUuid": "{3ab1a915-4a49-4a23-9a7d-aa1df544e466}"
        },
        {
            "layers": [
                "noHasColorAttr"
            ],
            "sourcePort": "value",
            "sourceUuid": "{bcc2abdd-2459-48cb-8dea-eba19d1257b1}",
            "targetPort": "second",
            "targetUuid": "{3ab1a915-4a49-4a23-9a7d-aa1df544e466}"
        },
        {
            "layers": [
                "hasAlphaCutoff"
            ],
            "sourcePort": "output",
            "sourceUuid": "{8d4f938f-9d7a-4487-b4de-366206faea13}",
            "targetPort": "input2",
            "targetUuid": "{5dd3d862-88da-4941-a71f-e3850ccb6cd0}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{5dd3d862-88da-4941-a71f-e3850ccb6cd0}",
            "targetPort": "condition",
            "targetUuid": "{8d0e8185-312f-44db-81f2-d92f5a947939}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "value",
            "sourceUuid": "{a7843be5-3dcc-4ca3-9585-48240b4455a9}",
            "targetPort": "true",
            "targetUuid": "{7d0a9038-3d59-402c-82cc-9aef74ecb82f}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "value",
            "sourceUuid": "{00000000-0000-0000-0000-000000000005}",
            "targetPort": "false",
            "targetUuid": "{7d0a9038-3d59-402c-82cc-9aef74ecb82f}"
        },
        {
            "layers": [
                "hasColorAttr"
            ],
            "sourcePort": "value",
            "sourceUuid": "{0050769e-ab6d-47a4-9785-7f77e1c6536c}",
            "targetPort": "second",
            "targetUuid": "{3ab1a915-4a49-4a23-9a7d-aa1df544e466}"
        },
        {
            "layers": [
                "hasAlphaCutoff"
            ],
            "sourcePort": "product",
            "sourceUuid": "{3ab1a915-4a49-4a23-9a7d-aa1df544e466}",
            "targetPort": "value",
            "targetUuid": "{8d0e8185-312f-44db-81f2-d92f5a947939}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{8d0e8185-312f-44db-81f2-d92f5a947939}",
            "targetPort": "input",
            "targetUuid": "{20729cbb-3d98-4560-ac04-f4bd20d86902}"
        },
        {
            "layers": [
            ],
            "sourcePort": "product",
            "sourceUuid": "{3ab1a915-4a49-4a23-9a7d-aa1df544e466}",
            "targetPort": "input",
            "targetUuid": "{8d4f938f-9d7a-4487-b4de-366206faea13}"
        },
        {
            "layers": [
                "noHasAlphaCutoff"
            ],
            "sourcePort": "product",
            "sourceUuid": "{3ab1a915-4a49-4a23-9a7d-aa1df544e466}",
            "targetPort": "input",
            "targetUuid": "{24430ddb-f1fb-46a8-a99c-d1e06f515e06}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "shaderData",
            "sourceUuid": "{1b3b008c-9502-4281-80a3-52b4cd6f6441}",
            "targetPort": "shaderData",
            "targetUuid": "{dbe44db5-4ca8-4158-a0d6-7faf1696e3ed}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "value",
            "sourceUuid": "{dbe44db5-4ca8-4158-a0d6-7faf1696e3ed}",
            "targetPort": "condition",
            "targetUuid": "{7d0a9038-3d59-402c-82cc-9aef74ecb82f}"
        },
        {
            "layers": [
            ],
            "sourcePort": "value",
            "sourceUuid": "{a2297c96-6d42-497d-b2e3-1c81eb2c9d63}",
            "targetPort": "second",
            "targetUuid": "{60f02f4c-5ef1-4100-aa1a-771cc6a2a0e0}"
        },
        {
            "layers": [
            ],
            "sourcePort": "shaderData",
            "sourceUuid": "{1b3b008c-9502-4281-80a3-52b4cd6f6441}",
            "targetPort": "shaderData",
            "targetUuid": "{a2297c96-6d42-497d-b2e3-1c81eb2c9d63}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "shaderData",
            "sourceUuid": "{1b3b008c-9502-4281-80a3-52b4cd6f6441}",
            "targetPort": "shaderData",
            "targetUuid": "{462d5577-43ef-4318-98a0-0f655d860bcc}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "value",
            "sourceUuid": "{462d5577-43ef-4318-98a0-0f655d860bcc}",
            "targetPort": "texture",
            "targetUuid": "{1ff6c48f-b296-4b94-94e3-e34fb0600d79}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "output",
            "sourceUuid": "{7d0a9038-3d59-402c-82cc-9aef74ecb82f}",
            "targetPort": "coord",
            "targetUuid": "{1ff6c48f-b296-4b94-94e3-e34fb0600d79}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "color",
            "sourceUuid": "{1ff6c48f-b296-4b94-94e3-e34fb0600d79}",
            "targetPort": "sRGB",
            "targetUuid": "{16e8ae76-66c5-4d14-b7f0-f38d7d3f3e03}"
        },
        {
            "layers": [
                "baseColorMap"
            ],
            "sourcePort": "linear",
            "sourceUuid": "{16e8ae76-66c5-4d14-b7f0-f38d7d3f3e03}",
            "targetPort": "first",
            "targetUuid": "{60f02f4c-5ef1-4100-aa1a-771cc6a2a0e0}"
        },
        {
            "layers": [
            ],
            "sourcePort": "value",
            "sourceUuid": "{9a26a443-1e02-44a3-87d0-14d1f8e7b6f0}",
            "targetPort": "input1",
            "targetUuid": "{5dd3d862-88da-4941-a71f-e3850ccb6cd0}"
        },
        {
            "layers": [
                "hasAlphaCutoff"
            ],
            "sourcePort": "shaderData",
            "sourceUuid": "{1b3b008c-9502-4281-80a3-52b4cd6f6441}",
            "targetPort": "shaderData",
            "targetUuid": "{9a26a443-1e02-44a3-87d0-14d1f8e7b6f0}"
        },
        {
            "layers": [
                "hasAlphaCutoff"
            ],
            "sourcePort": "output",
            "sourceUuid": "{20729cbb-3d98-4560-ac04-f4bd20d86902}",
            "targetPort": "first",
            "targetUuid": "{fddddf5a-a44f-44a6-9b84-79a100c8540c}"
        },
        {
            "layers": [
                "noHasAlphaCutoff"
            ],
            "sourcePort": "output",
            "sourceUuid": "{24430ddb-f1fb-46a8-a99c-d1e06f515e06}",
            "targetPort": "first",
            "targetUuid": "{fddddf5a-a44f-44a6-9b84-79a100c8540c}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{8d4f938f-9d7a-4487-b4de-366206faea13}",
            "targetPort": "second",
            "targetUuid": "{fddddf5a-a44f-44a6-9b84-79a100c8540c}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{fddddf5a-a44f-44a6-9b84-79a100c8540c}",
            "targetPort": "fragColor",
            "targetUuid": "{a62ff8d2-694b-46b4-a3cf-e15b2660ac28}"
        }
    ],
    "groups": [
        {
            "id": 0,
            "name": "Alpha Cutoff",
            "position": {
                "x": 1704,
                "y": 903
            }
        },
        {
            "id": 2,
            "name": "Ambient Occlusion",
            "position": {
                "x": 592,
                "y": -551
            }
        },
        {
            "id": 4,
            "name": "Base Color",
            "position": {
                "x": -369,
                "y": 1126
            }
        },
        {
            "id": 6,
            "name": "Double Sided",
            "position": {
                "x": 137,
                "y": 2424
            }
        },
        {
            "id": 11,
            "name": "Emissive tex coord selector",
            "position": {
                "x": -125,
                "y": 285
            }
        }
    ],
    "layers": [
        {
            "enabled": true,
            "name": "baseColorMap"
        },
        {
            "enabled": true,
            "name": "noBaseColorMap"
        },
        {
            "enabled": true,
            "name": "hasColorAttr"
        },
        {
            "enabled": true,
            "name": "noHasColorAttr"
        },
        {
            "enabled": true,
            "name": "hasAlphaCutoff"
        },
        {
            "enabled": true,
            "name": "noHasAlphaCutoff"
        },
        {
            "enabled": true,
            "name": "noDoubleSided"
        }
    ],
    "nodes": [
        {
            "collapsed": false,
            "displayName": "",
            "group": -1,
            "id": 4,
            "inputValues": {
            },
            "layers": [
                "baseColorMap"
            ],
            "parameters": {
                "name": "texCoord",
                "qualifier": {
                    "type": "QShaderLanguage::StorageQualifier",
                    "value": "QShaderLanguage::Input"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                }
            },
            "position": {
                "x": -1348,
                "y": 1047
            },
            "type": "input",
            "uuid": "{00000000-0000-0000-0000-000000000005}"
        },
        {
            "collapsed": false,
            "displayName": "fragColor",
            "group": -1,
            "id": 32,
            "inputValues": {
                "fragColor": ""
            },
            "layers": [
            ],
            "parameters": {
            },
            "position": {
                "x": 2938,
                "y": 1245
            },
            "type": "fragColor",
            "uuid": "{a62ff8d2-694b-46b4-a3cf-e15b2660ac28}"
        },
        {
            "collapsed": false,
            "displayName": "multiply",
            "group": 4,
            "id": 34,
            "inputValues": {
                "first": "",
                "second": ""
            },
            "layers": [
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "position": {
                "x": 158,
                "y": 1208
            },
            "type": "multiply",
            "uuid": "{60f02f4c-5ef1-4100-aa1a-771cc6a2a0e0}"
        },
        {
            "collapsed": false,
            "displayName": "constant",
            "group": 4,
            "id": 35,
            "inputValues": {
            },
            "layers": [
                "noBaseColorMap"
            ],
            "parameters": {
                "constant": "1.0,1.0,1.0,1.0",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "position": {
                "x": -359,
                "y": 1201
            },
            "type": "constant",
            "uuid": "{604bed2b-e8b8-44a7-8a81-763c0cdae7b3}"
        },
        {
            "collapsed": false,
            "displayName": "input",
            "group": 4,
            "id": 51,
            "inputValues": {
            },
            "layers": [
                "hasColorAttr"
            ],
            "parameters": {
                "name": "color",
                "qualifier": {
                    "type": "QShaderLanguage::StorageQualifier",
                    "value": "QShaderLanguage::Input"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "position": {
                "x": 152,
                "y": 1472
            },
            "type": "input",
            "uuid": "{0050769e-ab6d-47a4-9785-7f77e1c6536c}"
        },
        {
            "collapsed": false,
            "displayName": "multiply",
            "group": 4,
            "id": 52,
            "inputValues": {
                "first": "",
                "second": ""
            },
            "layers": [
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "position": {
                "x": 497,
                "y": 1247
            },
            "type": "multiply",
            "uuid": "{3ab1a915-4a49-4a23-9a7d-aa1df544e466}"
        },
        {
            "collapsed": false,
            "displayName": "constant",
            "group": 4,
            "id": 53,
            "inputValues": {
            },
            "layers": [
                "noHasColorAttr"
            ],
            "parameters": {
                "constant": "1,1,1,1",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "position": {
                "x": 140,
                "y": 1309
            },
            "type": "constant",
            "uuid": "{bcc2abdd-2459-48cb-8dea-eba19d1257b1}"
        },
        {
            "collapsed": false,
            "displayName": "swizzle",
            "group": 4,
            "id": 77,
            "inputValues": {
                "input": ""
            },
            "layers": [
            ],
            "parameters": {
                "fields": "a",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "position": {
                "x": 940,
                "y": 1161
            },
            "type": "swizzle",
            "uuid": "{8d4f938f-9d7a-4487-b4de-366206faea13}"
        },
        {
            "collapsed": false,
            "displayName": "greater",
            "group": 0,
            "id": 90,
            "inputValues": {
                "input1": "0.0",
                "input2": "0.0"
            },
            "layers": [
                "hasAlphaCutoff"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "valueType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "position": {
                "x": 1714,
                "y": 938
            },
            "type": "greater",
            "uuid": "{5dd3d862-88da-4941-a71f-e3850ccb6cd0}"
        },
        {
            "collapsed": false,
            "displayName": "discard_if",
            "group": 0,
            "id": 92,
            "inputValues": {
                "condition": "",
                "value": ""
            },
            "layers": [
                "hasAlphaCutoff"
            ],
            "parameters": {
                "conditionType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "position": {
                "x": 1934,
                "y": 1037
            },
            "type": "discard_if",
            "uuid": "{8d0e8185-312f-44db-81f2-d92f5a947939}"
        },
        {
            "collapsed": false,
            "displayName": "input: texCoord1",
            "group": -1,
            "id": 100,
            "inputValues": {
            },
            "layers": [
                "baseColorMap"
            ],
            "parameters": {
                "name": "texCoord1",
                "qualifier": {
                    "type": "QShaderLanguage::StorageQualifier",
                    "value": "QShaderLanguage::Input"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                }
            },
            "position": {
                "x": -1343,
                "y": 1209
            },
            "type": "input",
            "uuid": "{a7843be5-3dcc-4ca3-9585-48240b4455a9}"
        },
        {
            "collapsed": false,
            "displayName": "if",
            "group": -1,
            "id": 108,
            "inputValues": {
                "condition": "",
                "false": "",
                "true": ""
            },
            "layers": [
                "baseColorMap"
            ],
            "parameters": {
                "conditionType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                }
            },
            "position": {
                "x": -839,
                "y": 1083
            },
            "type": "if",
            "uuid": "{7d0a9038-3d59-402c-82cc-9aef74ecb82f}"
        },
        {
            "collapsed": false,
            "displayName": "swizzle",
            "group": -1,
            "id": 111,
            "inputValues": {
                "input": ""
            },
            "layers": [
                "hasAlphaCutoff"
            ],
            "parameters": {
                "fields": "rgb",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "position": {
                "x": 2079,
                "y": 1180
            },
            "type": "swizzle",
            "uuid": "{20729cbb-3d98-4560-ac04-f4bd20d86902}"
        },
        {
            "collapsed": false,
            "displayName": "swizzle",
            "group": -1,
            "id": 117,
            "inputValues": {
                "input": ""
            },
            "layers": [
                "noHasAlphaCutoff"
            ],
            "parameters": {
                "fields": "rgb",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "position": {
                "x": 1517,
                "y": 1310
            },
            "type": "swizzle",
            "uuid": "{24430ddb-f1fb-46a8-a99c-d1e06f515e06}"
        },
        {
            "collapsed": false,
            "displayName": "kuesa_unlitShaderData",
            "group": -1,
            "id": 118,
            "inputValues": {
            },
            "layers": [
            ],
            "parameters": {
            },
            "position": {
                "x": -1539,
                "y": 767
            },
            "type": "kuesa_unlitShaderData",
            "uuid": "{1b3b008c-9502-4281-80a3-52b4cd6f6441}"
        },
        {
            "collapsed": false,
            "displayName": "kuesa_ShaderDataInput",
            "group": -1,
            "id": 119,
            "inputValues": {
                "shaderData": ""
            },
            "layers": [
                "baseColorMap"
            ],
            "parameters": {
                "name": "baseColorUsesTexCoord1",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            },
            "position": {
                "x": -1246,
                "y": 960
            },
            "type": "kuesa_ShaderDataInput",
            "uuid": "{dbe44db5-4ca8-4158-a0d6-7faf1696e3ed}"
        },
        {
            "collapsed": false,
            "displayName": "kuesa_ShaderDataInput",
            "group": -1,
            "id": 120,
            "inputValues": {
                "shaderData": ""
            },
            "layers": [
            ],
            "parameters": {
                "name": "baseColorFactor",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "position": {
                "x": -594,
                "y": 1446
            },
            "type": "kuesa_ShaderDataInput",
            "uuid": "{a2297c96-6d42-497d-b2e3-1c81eb2c9d63}"
        },
        {
            "collapsed": false,
            "displayName": "kuesa_sampleTexture",
            "group": -1,
            "id": 121,
            "inputValues": {
                "coord": "",
                "texture": ""
            },
            "layers": [
                "baseColorMap"
            ],
            "parameters": {
            },
            "position": {
                "x": -261,
                "y": 1000
            },
            "type": "kuesa_sampleTexture",
            "uuid": "{1ff6c48f-b296-4b94-94e3-e34fb0600d79}"
        },
        {
            "collapsed": false,
            "displayName": "kuesa_ShaderDataInput",
            "group": -1,
            "id": 122,
            "inputValues": {
                "shaderData": ""
            },
            "layers": [
                "baseColorMap"
            ],
            "parameters": {
                "name": "baseColorMap",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Sampler2D"
                }
            },
            "position": {
                "x": -624,
                "y": 975
            },
            "type": "kuesa_ShaderDataInput",
            "uuid": "{462d5577-43ef-4318-98a0-0f655d860bcc}"
        },
        {
            "collapsed": false,
            "displayName": "sRGBtoLinear",
            "group": -1,
            "id": 123,
            "inputValues": {
                "sRGB": ""
            },
            "layers": [
                "baseColorMap"
            ],
            "parameters": {
            },
            "position": {
                "x": -37,
                "y": 1032
            },
            "type": "sRGBtoLinear",
            "uuid": "{16e8ae76-66c5-4d14-b7f0-f38d7d3f3e03}"
        },
        {
            "collapsed": false,
            "displayName": "kuesa_ShaderDataInput",
            "group": -1,
            "id": 124,
            "inputValues": {
                "shaderData": ""
            },
            "layers": [
                "hasAlphaCutoff"
            ],
            "parameters": {
                "name": "alphaCutoff",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "position": {
                "x": 1273,
                "y": 944
            },
            "type": "kuesa_ShaderDataInput",
            "uuid": "{9a26a443-1e02-44a3-87d0-14d1f8e7b6f0}"
        },
        {
            "collapsed": false,
            "displayName": "join2",
            "group": -1,
            "id": 125,
            "inputValues": {
                "first": "0.0",
                "second": "0.0"
            },
            "layers": [
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "position": {
                "x": 2519,
                "y": 1258
            },
            "type": "join2",
            "uuid": "{fddddf5a-a44f-44a6-9b84-79a100c8540c}"
        }
    ],
    "project": {
        "position": {
            "x": 124.33464313464401,
            "y": 727.4347874347882
        },
        "scale": 0.3125
    },
    "prototypes": {
        "add": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "sum"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $sum = $first + $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $sum = $first + $second;"
                }
            ]
        },
        "and": {
            "inputs": [
                "input1",
                "input2"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 && $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 && $input2;"
                }
            ]
        },
        "atIndex": {
            "inputs": [
                "index",
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "indexType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Int"
                },
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "outType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outType $output = $input[$index];"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outType $output = $input[$index];"
                }
            ]
        },
        "cast": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($input);"
                }
            ]
        },
        "constant": {
            "outputs": [
                "value"
            ],
            "parameters": {
                "constant": "0.0",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = $type($constant);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = $type($constant);"
                }
            ]
        },
        "discard": {
            "outputs": [
                "output"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "discard;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "discard;"
                }
            ]
        },
        "discard_if": {
            "inputs": [
                "condition",
                "value"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "conditionType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp $type discard_if_$type(bool shouldDiscard, highp $type value) { if (shouldDiscard) discard; return value; }"
                    ],
                    "substitution": "highp $type $output = discard_if_$type($condition, $value);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$type discard_if_$type(bool shouldDiscard, $type value) { if (shouldDiscard) discard; return value; }"
                    ],
                    "substitution": "$type $output = discard_if_$type($condition, $value);"
                }
            ]
        },
        "divide": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "quotient"
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $quotient = $first / $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $quotient = $first / $second;"
                }
            ]
        },
        "dot": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outputType $value = dot($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outputType $value = dot($first, $second);"
                }
            ]
        },
        "equal": {
            "inputs": [
                "input1",
                "input2"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "valueType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 == $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 == $input2;"
                }
            ]
        },
        "eyePosition": {
            "outputs": [
                "eyePosition"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp vec3 eyePosition;"
                    ],
                    "substitution": "highp vec3 $eyePosition = eyePosition;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform vec3 eyePosition;"
                    ],
                    "substitution": "vec3 $eyePosition = eyePosition;"
                }
            ]
        },
        "fragColor": {
            "inputs": [
                "fragColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "gl_FragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                }
            ]
        },
        "gl_Position": {
            "inputs": [
                "position"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "gl_Position = $position;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "gl_Position = $position;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "gl_Position = $position;"
                }
            ]
        },
        "greater": {
            "inputs": [
                "input1",
                "input2"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "valueType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 > $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 > $input2;"
                }
            ]
        },
        "if": {
            "inputs": [
                "condition",
                "false",
                "true"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "conditionType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = ($condition) ? $true : $false;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = ($condition) ? $true : $false;"
                }
            ]
        },
        "input": {
            "outputs": [
                "value"
            ],
            "parameters": {
                "name": "defaultName",
                "qualifier": {
                    "type": "QShaderLanguage::StorageQualifier",
                    "value": "QShaderLanguage::Input"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        "join2": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($first, $second);"
                }
            ]
        },
        "join3": {
            "inputs": [
                "first",
                "second",
                "third"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfThird": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($first, $second, $third);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($first, $second, $third);"
                }
            ]
        },
        "join4d": {
            "inputs": [
                "first",
                "fourth",
                "second",
                "third"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfFourth": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfThird": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($first, $second, $third, $fourth);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($first, $second, $third, $fourth);"
                }
            ]
        },
        "kuesa_ShaderDataInput": {
            "inputs": [
                "shaderData"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "name": "defaultName",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = $shaderData.$name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = $shaderData.$name;"
                }
            ]
        },
        "kuesa_exposureCorrect": {
            "inputs": [
                "color",
                "exposure"
            ],
            "outputs": [
                "outputColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "substitution": "vec3 $outputColor = $color * pow(2.0, $exposure);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = $color * pow(2.0, $exposure);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = $color * pow(2.0, $exposure);"
                }
            ]
        },
        "kuesa_filmicToneMap": {
            "inputs": [
                "color"
            ],
            "outputs": [
                "outputColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "vec3 filmicToneMap(const in vec3 c) {\n                                           vec3 x = max(vec3(0.0), c - vec3(0.4));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "vec3 $outputColor = filmicToneMap($color);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 filmicToneMap(const in highp vec3 c) {\n                                           highp vec3 x = max(vec3(0.0), c - vec3(0.4));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "highp vec3 $outputColor = filmicToneMap($color);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 filmicToneMap(const in highp vec3 c) {\n                                           highp vec3 x = max(vec3(0.0), c - vec3(0.4));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "highp vec3 $outputColor = filmicToneMap($color);"
                }
            ]
        },
        "kuesa_gammaCorrect": {
            "inputs": [
                "color",
                "gamma"
            ],
            "outputs": [
                "outputColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "substitution": "vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                }
            ]
        },
        "kuesa_metalRoughFunction": {
            "inputs": [
                "ambientOcclusion",
                "baseColor",
                "emissive",
                "metalness",
                "roughness",
                "worldNormal",
                "worldPosition",
                "worldView"
            ],
            "outputs": [
                "outputColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_metalrough.inc.frag"
                    ],
                    "substitution": "vec3 $outputColor = kuesa_metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $emissive, $worldPosition, $worldView, $worldNormal);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_metalrough.inc.frag"
                    ],
                    "substitution": "highp vec3 $outputColor = kuesa_metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $emissive, $worldPosition, $worldView, $worldNormal);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_metalrough.inc.frag"
                    ],
                    "substitution": "highp vec3 $outputColor = kuesa_metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $emissive, $worldPosition, $worldView, $worldNormal);"
                }
            ]
        },
        "kuesa_reinhardToneMap": {
            "inputs": [
                "color"
            ],
            "outputs": [
                "outputColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "substitution": "vec3 $outputColor = $color / ($color + vec3(1.0));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = $color / ($color + vec3(1.0));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = $color / ($color + vec3(1.0));"
                }
            ]
        },
        "kuesa_sampleTexture": {
            "inputs": [
                "coord",
                "texture"
            ],
            "outputs": [
                "color"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $color = texture2D($texture, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $color = texture($texture, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $color = texture($texture, $coord);"
                }
            ]
        },
        "kuesa_unlitShaderData": {
            "outputs": [
                "shaderData"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_unlitShaderData.inc.frag"
                    ],
                    "substitution": "Unlit $shaderData = unlit;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_unlitShaderData.inc.frag"
                    ],
                    "substitution": "Unlit $shaderData = unlit;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_unlitShaderData.inc.frag"
                    ],
                    "substitution": "Unlit $shaderData = unlit;"
                }
            ]
        },
        "max": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = max($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = max($first, $second);"
                }
            ]
        },
        "metalRoughFunction": {
            "inputs": [
                "ambientOcclusion",
                "baseColor",
                "metalness",
                "roughness",
                "worldNormal",
                "worldPosition",
                "worldView"
            ],
            "outputs": [
                "outputColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/gl3/metalrough.inc.frag"
                    ],
                    "substitution": "vec4 $outputColor = metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $worldPosition, $worldView, $worldNormal);"
                }
            ]
        },
        "min": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = min($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = min($first, $second);"
                }
            ]
        },
        "multiply": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "product"
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $product = $first * $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $product = $first * $second;"
                }
            ]
        },
        "normalize": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = normalize($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = normalize($input);"
                }
            ]
        },
        "not": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = !$input1;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = !$input1;"
                }
            ]
        },
        "or": {
            "inputs": [
                "input1",
                "input2"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 || $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 || $input2;"
                }
            ]
        },
        "output": {
            "inputs": [
                "value"
            ],
            "parameters": {
                "name": "defaultName",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "varying highp $type $name;"
                    ],
                    "substitution": "$name = $value;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp $type $name;"
                    ],
                    "substitution": "$name = $value;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out $type $name;"
                    ],
                    "substitution": "$name = $value;"
                }
            ]
        },
        "pow": {
            "inputs": [
                "base",
                "power"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = pow($base, $power);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = pow($base, $power);"
                }
            ]
        },
        "sRGBtoLinear": {
            "inputs": [
                "sRGB"
            ],
            "outputs": [
                "linear"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $linear = vec4(pow($sRGB.rgb, vec3(2.2)), $sRGB.a);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $linear = vec4(pow($sRGB.rgb, vec3(2.2)), $sRGB.a);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $linear = $sRGB;"
                }
            ]
        },
        "sampleTexture": {
            "inputs": [
                "coord"
            ],
            "outputs": [
                "color"
            ],
            "parameters": {
                "name": "defaultName"
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "highp vec4 $color = texture2D($name, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "highp vec4 $color = texture($name, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "vec4 $color = texture($name, $coord);"
                }
            ]
        },
        "subtract": {
            "inputs": [
                "minuend",
                "subtrahend"
            ],
            "outputs": [
                "difference"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $difference = $minuend - $subtrahend;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $difference = $minuend - $subtrahend;"
                }
            ]
        },
        "swizzle": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "fields": "x",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $input.$fields;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input.$fields;"
                }
            ]
        },
        "time": {
            "outputs": [
                "time"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp float time;"
                    ],
                    "substitution": "highp float $time = time;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform float time;"
                    ],
                    "substitution": "float $time = time;"
                }
            ]
        },
        "transpose": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Mat3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = transpose($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = transpose($input);"
                }
            ]
        },
        "worldSpaceToTangentSpaceMatrix": {
            "inputs": [
                "worldNormal",
                "worldTangent"
            ],
            "outputs": [
                "matrix"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/es2/coordinatesystems.inc"
                    ],
                    "substitution": "highp mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/es3/coordinatesystems.inc"
                    ],
                    "substitution": "highp mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/gl3/coordinatesystems.inc"
                    ],
                    "substitution": "mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                }
            ]
        }
    },
    "subgraph": [
    ]
}
