{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{54651cac-a2dc-4cfb-b04d-9ab13f371f70}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{85433887-7e7a-46c7-bbee-bf9b8af775e9}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{6a6fe663-840a-4c46-a8af-1697f988bae1}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{caa598d7-ad5a-47c3-a3dd-a0f30d85f9e6}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e0910b88-ddb0-4749-b1a5-9cee3210c71b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c4d79e56-a9f4-44d3-bde8-88e528eea5a0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{cc3c321d-8cc8-457e-8c74-74a62ec03319}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{337eda8a-584f-4503-a5f6-e6f832175b3e}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4762065b-4ef7-42de-a03c-29635d327e00}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{a0f04531-14f6-4294-930e-656bdd89dc74}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{32ec3d6b-e4c3-4427-853c-0e78fe59962a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{7aac8399-5e17-4f86-b94b-90a02e8580ae}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c227a6d3-79e8-487c-80e3-8d60482aff2a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{17436a4f-4690-43b4-bc1f-e44a1c272a72}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2d0cd037-9c26-4d38-acd7-c2087ab3e6e0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{018644cc-608a-4db2-982e-059a9154fd41}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ff3e23ec-eb85-4651-a1f4-e040eb24524b}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1, 1, -1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{ce9d58d0-1d62-4635-b4c1-8e79c49f9a7a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b55758ca-8e4a-4966-950d-d68e08f8eb59}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{9eb02819-2a52-4ee8-a152-f8b8174bcf34}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "PLANAR_REFLECTION_ALPHA_BLEND",
   "uuid": "{7f184a09-b740-449f-a342-4e4618ef3e33}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NORMAL_MAP",
   "uuid": "{9d8744ee-7a60-4a62-9cbe-5e4d2613c658}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "max",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_FUNCTION",
   "uuid": "{deab263f-6af2-4089-85e9-65f13174f8b1}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{aff90d04-9ff8-42a0-92d1-e3b6c2ea19af}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{3192f70b-8652-4ae2-8e41-28a42ba2533e}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{e45c50de-5c21-416f-aa06-71777e0d14b7}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4b1eb37d-75b0-46e9-af8f-df1fdc69e5eb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c6607ef5-bb22-4608-9628-2a7a1631819f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{a09c68ef-b36f-4b88-aefb-3be0a942fb50}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{a807f222-ce2c-4f5a-832d-576d9c8e7bd6}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{9eb02819-2a52-4ee8-a152-f8b8174bcf34}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{9eb02819-2a52-4ee8-a152-f8b8174bcf34}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b55758ca-8e4a-4966-950d-d68e08f8eb59}",
   "sourcePort": "output0",
   "targetUuid": "{c4d79e56-a9f4-44d3-bde8-88e528eea5a0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{b55758ca-8e4a-4966-950d-d68e08f8eb59}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9d8744ee-7a60-4a62-9cbe-5e4d2613c658}",
   "sourcePort": "normal",
   "targetUuid": "{ce9d58d0-1d62-4635-b4c1-8e79c49f9a7a}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{018644cc-608a-4db2-982e-059a9154fd41}",
   "sourcePort": "output0",
   "targetUuid": "{2d0cd037-9c26-4d38-acd7-c2087ab3e6e0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ff3e23ec-eb85-4651-a1f4-e040eb24524b}",
   "sourcePort": "output0",
   "targetUuid": "{2d0cd037-9c26-4d38-acd7-c2087ab3e6e0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2d0cd037-9c26-4d38-acd7-c2087ab3e6e0}",
   "sourcePort": "output0",
   "targetUuid": "{17436a4f-4690-43b4-bc1f-e44a1c272a72}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7aac8399-5e17-4f86-b94b-90a02e8580ae}",
   "sourcePort": "z",
   "targetUuid": "{32ec3d6b-e4c3-4427-853c-0e78fe59962a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{32ec3d6b-e4c3-4427-853c-0e78fe59962a}",
   "sourcePort": "output0",
   "targetUuid": "{c227a6d3-79e8-487c-80e3-8d60482aff2a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{32ec3d6b-e4c3-4427-853c-0e78fe59962a}",
   "sourcePort": "output0",
   "targetUuid": "{c227a6d3-79e8-487c-80e3-8d60482aff2a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c227a6d3-79e8-487c-80e3-8d60482aff2a}",
   "sourcePort": "output0",
   "targetUuid": "{9eb02819-2a52-4ee8-a152-f8b8174bcf34}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{85433887-7e7a-46c7-bbee-bf9b8af775e9}",
   "sourcePort": "color",
   "targetUuid": "{6a6fe663-840a-4c46-a8af-1697f988bae1}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{6a6fe663-840a-4c46-a8af-1697f988bae1}",
   "sourcePort": "mixed",
   "targetUuid": "{54651cac-a2dc-4cfb-b04d-9ab13f371f70}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{6a6fe663-840a-4c46-a8af-1697f988bae1}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "postGain",
   "targetUuid": "{54651cac-a2dc-4cfb-b04d-9ab13f371f70}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{54651cac-a2dc-4cfb-b04d-9ab13f371f70}",
   "sourcePort": "output0",
   "targetUuid": "{c4d79e56-a9f4-44d3-bde8-88e528eea5a0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "innerAlpha",
   "targetUuid": "{caa598d7-ad5a-47c3-a3dd-a0f30d85f9e6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "outerAlpha",
   "targetUuid": "{caa598d7-ad5a-47c3-a3dd-a0f30d85f9e6}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{c227a6d3-79e8-487c-80e3-8d60482aff2a}",
   "sourcePort": "output0",
   "targetUuid": "{caa598d7-ad5a-47c3-a3dd-a0f30d85f9e6}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{caa598d7-ad5a-47c3-a3dd-a0f30d85f9e6}",
   "sourcePort": "mixed",
   "targetUuid": "{e0910b88-ddb0-4749-b1a5-9cee3210c71b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "alphaGain",
   "targetUuid": "{e0910b88-ddb0-4749-b1a5-9cee3210c71b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "normalScaling",
   "targetUuid": "{018644cc-608a-4db2-982e-059a9154fd41}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e0910b88-ddb0-4749-b1a5-9cee3210c71b}",
   "sourcePort": "output0",
   "targetUuid": "{4762065b-4ef7-42de-a03c-29635d327e00}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{ff3e23ec-eb85-4651-a1f4-e040eb24524b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cc3c321d-8cc8-457e-8c74-74a62ec03319}",
   "sourcePort": "uv",
   "targetUuid": "{a0f04531-14f6-4294-930e-656bdd89dc74}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{a0f04531-14f6-4294-930e-656bdd89dc74}",
   "sourcePort": "color",
   "targetUuid": "{9d8744ee-7a60-4a62-9cbe-5e4d2613c658}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{9d8744ee-7a60-4a62-9cbe-5e4d2613c658}",
   "targetPort": "strength"
  },
  {
   "layers": [],
   "sourceUuid": "{a0f04531-14f6-4294-930e-656bdd89dc74}",
   "sourcePort": "alpha",
   "targetUuid": "{4762065b-4ef7-42de-a03c-29635d327e00}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{17436a4f-4690-43b4-bc1f-e44a1c272a72}",
   "sourcePort": "output0",
   "targetUuid": "{7aac8399-5e17-4f86-b94b-90a02e8580ae}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{ce9d58d0-1d62-4635-b4c1-8e79c49f9a7a}",
   "sourcePort": "transformed",
   "targetUuid": "{018644cc-608a-4db2-982e-059a9154fd41}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9eb02819-2a52-4ee8-a152-f8b8174bcf34}",
   "sourcePort": "mixed",
   "targetUuid": "{b55758ca-8e4a-4966-950d-d68e08f8eb59}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c4d79e56-a9f4-44d3-bde8-88e528eea5a0}",
   "sourcePort": "output0",
   "targetUuid": "{deab263f-6af2-4089-85e9-65f13174f8b1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4762065b-4ef7-42de-a03c-29635d327e00}",
   "sourcePort": "output0",
   "targetUuid": "{aff90d04-9ff8-42a0-92d1-e3b6c2ea19af}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{7f184a09-b740-449f-a342-4e4618ef3e33}",
   "sourcePort": "shader",
   "targetUuid": "{337eda8a-584f-4503-a5f6-e6f832175b3e}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{deab263f-6af2-4089-85e9-65f13174f8b1}",
   "sourcePort": "output0",
   "targetUuid": "{7f184a09-b740-449f-a342-4e4618ef3e33}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{aff90d04-9ff8-42a0-92d1-e3b6c2ea19af}",
   "sourcePort": "result",
   "targetUuid": "{7f184a09-b740-449f-a342-4e4618ef3e33}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{3192f70b-8652-4ae2-8e41-28a42ba2533e}",
   "sourcePort": "value",
   "targetUuid": "{6a6fe663-840a-4c46-a8af-1697f988bae1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e45c50de-5c21-416f-aa06-71777e0d14b7}",
   "sourcePort": "value",
   "targetUuid": "{32ec3d6b-e4c3-4427-853c-0e78fe59962a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4b1eb37d-75b0-46e9-af8f-df1fdc69e5eb}",
   "sourcePort": "value",
   "targetUuid": "{ff3e23ec-eb85-4651-a1f4-e040eb24524b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c6607ef5-bb22-4608-9628-2a7a1631819f}",
   "sourcePort": "value",
   "targetUuid": "{deab263f-6af2-4089-85e9-65f13174f8b1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a09c68ef-b36f-4b88-aefb-3be0a942fb50}",
   "sourcePort": "value",
   "targetUuid": "{aff90d04-9ff8-42a0-92d1-e3b6c2ea19af}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{a807f222-ce2c-4f5a-832d-576d9c8e7bd6}",
   "sourcePort": "value",
   "targetUuid": "{aff90d04-9ff8-42a0-92d1-e3b6c2ea19af}",
   "targetPort": "max"
  },
  {
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{a0f04531-14f6-4294-930e-656bdd89dc74}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{c130cdf4-a87c-49ca-90f5-66d922f78ac9}",
   "sourcePort": "normalMap",
   "targetUuid": "{a0f04531-14f6-4294-930e-656bdd89dc74}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "CAMERA": {
   "outputs": [
    "view_vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif",
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $view_vector = (viewMatrix * vec4(normalize(eyePosition - worldPosition), 0.0)).xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif",
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform mat4 viewMatrix;",
      "   uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $view_vector = (viewMatrix * vec4(normalize(eyePosition - worldPosition), 0.0)).xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $view_vector = (viewMatrix * vec4(normalize(eyePosition - worldPosition), 0.0)).xyz;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(set = 0, binding = 1) uniform SerenityEntity {",
      "    mat4 model;",
      "} entity;",
      "layout(set = 1, binding = 0) uniform SerenityCamera {",
      "    mat4 viewMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "  } camera;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "vec3 eyePosition() { return camera.inverseViewMatrix[3].xyz; }",
      "#endif"
     ],
     "substitution": "vec3 $view_vector = (camera.viewMatrix * vec4(normalize(eyePosition() - worldPosition), 0.0)).xyz;"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1)"
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(set = 0, binding = 1) uniform SerenityEntity {",
      "    mat4 model;",
      "} entity;",
      "layout(set = 1, binding = 0) uniform SerenityCamera {",
      "    mat4 viewMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "  } camera;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (camera.$transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(set = 0, binding = 1) uniform SerenityEntity {",
      "    mat4 model;",
      "} entity;",
      "layout(set = 1, binding = 0) uniform SerenityCamera {",
      "    mat4 viewMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "  } camera;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "vec3 eyePosition() { return camera.inverseViewMatrix[3].xyz; }",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition()), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef READ_TEXTURE",
      "#define READ_TEXTURE(S, U, T, D) readTexture_ ## S (U, T, D)",
      "#endif"
     ],
     "substitution": "vec4 $inter = READ_TEXTURE($texture, $useTexture, vec2($vector.x, 1.0 - $vector.y), vec4($defaultColor)); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "#extension GL_OES_standard_derivatives : enable",
      "highp vec2 equiRectangular(highp vec3 pos) {",
      "highp vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "highp vec2 equiRectangular(highp vec3 pos) {",
      "highp vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif",
      "#ifndef READ_TEXTURE",
      "#define READ_TEXTURE(S, U, T, D) readTexture_ ## S (U, T, D)",
      "#endif"
     ],
     "substitution": "vec4 $inter = READ_TEXTURE($texture, $useTexture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y), vec4($defaultColor)); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "#extension GL_OES_standard_derivatives : enable",
      "highp vec2 equiRectangular(highp vec3 pos) {",
      "highp vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "highp vec2 equiRectangular(highp vec3 pos) {",
      "highp vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "#define RECIPROCAL_PI 0.318309886",
      "#define RECIPROCAL_PI_2 0.159154943",
      "vec2 equiRectangular(vec3 pos) {",
      "vec2 t = vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(RECIPROCAL_PI_2, RECIPROCAL_PI) + vec2(0.5);",
      "// Use partial derivative to check that we aren't switching tcoord too abruptly (e.g going from 1 to 0.0 on 2 adjacent fragments)",
      "// which could result in invalid mipmap selection and artifacts",
      "if (fwidth(t.x) > 0.25 && t.x < 0.5)",
      "    t.x += 1.0; // Increase tcoord by 1 which should prevent invalid mipMap selection (and still yield same actual texel if using Repeat wrap mode)",
      "return t;",
      "}",
      "#endif",
      "#ifndef READ_TEXTURE",
      "#define READ_TEXTURE(S, U, T, D) readTexture_ ## S (U, T, D)",
      "#endif"
     ],
     "substitution": "vec4 $inter = READ_TEXTURE($texture, $useTexture, equiRectangular($position), vec4($defaultColor)); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "PLANAR_REFLECTION_ALPHA_BLEND": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform highp mat4 viewMatrix;",
      "   uniform highp mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform highp mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform highp sampler2D kuesa_reflectionPlaneMap;",
      "uniform highp vec4 kuesa_reflectionPlane;",
      "highp mat4 reflectionMatrix(vec4 n)",
      "{",
      "    highp vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "highp vec4 reflectedColor(vec4 c)",
      "{",
      "    highp vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    highp vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    highp vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    highp vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform mat4 viewMatrix;",
      "   uniform mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform sampler2D kuesa_reflectionPlaneMap;",
      "uniform vec4 kuesa_reflectionPlane;",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "layout(binding=0) uniform sampler2D kuesa_reflectionPlaneMap;",
      "layout(std140, binding = 12) uniform qt3d_shadergraph_reflection_plane_uniforms {",
      "    vec4 kuesa_reflectionPlane;",
      "};",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(set = 0, binding = 1) uniform SerenityEntity {",
      "    mat4 model;",
      "} entity;",
      "layout(set = 1, binding = 0) uniform SerenityCamera {",
      "    mat4 viewMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "  } camera;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 0) in vec3 worldNormal;",
      "layout(location = 1) in vec3 worldPosition;",
      "layout(location = 2) in vec2 texCoord;",
      "layout(location = 3) in vec2 texCoord1;",
      "layout(location = 4) in vec4 color;",
      "layout(location = 5) in vec4 tangent;",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "layout(binding=0) uniform sampler2D kuesa_reflectionPlaneMap;",
      "layout(std140, binding = 12) uniform qt3d_shadergraph_reflection_plane_uniforms {",
      "    vec4 kuesa_reflectionPlane;",
      "};",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = camera.projectionMatrix * camera.viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesNormalMap",
    "normalMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "reflectionGain",
    "innerAlpha",
    "outerAlpha",
    "alphaGain",
    "postVertexColor",
    "postGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalDisturb;\n    highp vec3 normalScaling;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float alphaGain;\n    highp float innerAlpha;\n    highp float normalMapGain;\n    highp float outerAlpha;\n    highp float postGain;\n    highp float postVertexColor;\n    highp float reflectionGain;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D normalMap;\n"
     ],
     "substitution": "highp sampler2D $normalMap = normalMap;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $alphaGain = properties.alphaGain;highp float $innerAlpha = properties.innerAlpha;highp float $normalMapGain = properties.normalMapGain;highp float $outerAlpha = properties.outerAlpha;highp float $postGain = properties.postGain;highp float $postVertexColor = properties.postVertexColor;highp float $reflectionGain = properties.reflectionGain;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalDisturb;\n    vec3 normalScaling;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float innerAlpha;\n    float normalMapGain;\n    float outerAlpha;\n    float postGain;\n    float postVertexColor;\n    float reflectionGain;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $normalMap = normalMap;vec3 $normalDisturb = properties.normalDisturb;vec3 $normalScaling = properties.normalScaling;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $innerAlpha = properties.innerAlpha;float $normalMapGain = properties.normalMapGain;float $outerAlpha = properties.outerAlpha;float $postGain = properties.postGain;float $postVertexColor = properties.postVertexColor;float $reflectionGain = properties.reflectionGain;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalDisturb;\n    vec3 normalScaling;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float innerAlpha;\n    float normalMapGain;\n    float outerAlpha;\n    float postGain;\n    float postVertexColor;\n    float reflectionGain;\n    bool usesNormalMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $normalMap = normalMap;vec3 $normalDisturb = properties.normalDisturb;vec3 $normalScaling = properties.normalScaling;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $innerAlpha = properties.innerAlpha;float $normalMapGain = properties.normalMapGain;float $outerAlpha = properties.outerAlpha;float $postGain = properties.postGain;float $postVertexColor = properties.postVertexColor;float $reflectionGain = properties.reflectionGain;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "VulkanFlavoredGLSL",
      "major": 4,
      "minor": 5
     },
     "headerSnippets": [
      "layout(std140, set = 2, binding = 3) uniform Material {\n    vec3 normalDisturb;\n    float _pad0;\n    vec3 normalScaling;\n    float _pad1;\n    vec3 reflectionInnerFilter;\n    float _pad2;\n    vec3 reflectionOuterFilter;\n    float alphaGain;\n    float innerAlpha;\n    float normalMapGain;\n    float outerAlpha;\n    float postGain;\n    float postVertexColor;\n    float reflectionGain;\n    bool usesNormalMap;\n} properties;\n#ifndef READ_TEXTURE_IMPL\n#define READ_TEXTURE_IMPL\nvec4 readTexture(const in sampler2D t, bool useTexture, vec2 tCoord, vec4 defaultValue) { return ((useTexture) ? texture(t, tCoord) : defaultValue); }\n#endif\n#ifdef LAYER_normalMap\nlayout(set = 3, binding = 0) uniform sampler2D normalMap;\n#endif\nvec4 readTexture_normalMap(bool useTexture, vec2 tCoord, vec4 defaultValue) {\n#ifdef LAYER_normalMap\n    return readTexture(normalMap, useTexture, tCoord, defaultValue);\n#else\n    return defaultValue;\n#endif\n}\n"
     ],
     "substitution": "sampler2D $normalMap = normalMap;vec3 $normalDisturb = properties.normalDisturb;vec3 $normalScaling = properties.normalScaling;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $alphaGain = properties.alphaGain;float $innerAlpha = properties.innerAlpha;float $normalMapGain = properties.normalMapGain;float $outerAlpha = properties.outerAlpha;float $postGain = properties.postGain;float $postVertexColor = properties.postVertexColor;float $reflectionGain = properties.reflectionGain;bool $usesNormalMap = properties.usesNormalMap;"
    }
   ]
  }
 }
}