{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{665106b9-f7fa-4123-a9c8-7d9bfaf92a9a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{b0a34230-70f5-40c6-b93c-aa85429f3bb7}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{92459c37-e977-49bb-bfdf-71af72e87a17}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{45875d42-9504-4eb1-ab0a-548c333b3272}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ae451e45-50b7-4753-88b8-db1c6ba3488c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{af01099f-a823-49d4-949a-d4baec229e35}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{3ae140b9-b5fe-4911-8680-4dc7e957b55a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{88e04ef0-7ab3-4899-badd-17cf5fbcb8f2}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d363df8f-9f8e-4ff7-b0c0-fd0a3dc16142}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{22661297-c713-498b-90b0-4984c76b0f58}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9a66eaf0-8671-4c74-bead-f054ab8ec24f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{918d3d9b-9b03-47b4-b8af-691e27504269}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7f6e635a-ffbc-451a-9f58-acfb70474901}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{66e8e634-9271-4509-abb5-daf31cdfdca8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7fb00c73-6f97-46d4-8221-00db8cddb466}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{33d5028c-fead-47e6-af9c-151551bbb679}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6a89b74a-5cfa-4cc6-8115-90e63539d1f6}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1, 1, -1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{6926b2ef-56bd-44cd-898a-d4fa8bfde3a9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2b910a11-8b0f-4fc3-a8eb-381c921c4c1a}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{63e7f033-82e9-480e-8ebc-fe5a6cddc5f5}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{e2216f75-e570-42ed-9508-6de18b252031}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "PLANAR_REFLECTION_ALPHA_BLEND",
   "uuid": "{c433093c-fef4-4aff-a259-8132896acb55}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NORMAL_MAP",
   "uuid": "{6d83f854-f589-498b-9de6-19d28490031d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{b6076095-41a1-481f-8b99-549f0006d08c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0315dccc-67ec-43c1-a68e-1b75a05e83a9}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{a5b2d57b-a84e-403f-8c30-2d08052fb65c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{aea5ad17-81a4-4af5-ab86-af2fbcc0da86}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{63e7f033-82e9-480e-8ebc-fe5a6cddc5f5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{63e7f033-82e9-480e-8ebc-fe5a6cddc5f5}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{2b910a11-8b0f-4fc3-a8eb-381c921c4c1a}",
   "sourcePort": "output0",
   "targetUuid": "{af01099f-a823-49d4-949a-d4baec229e35}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{2b910a11-8b0f-4fc3-a8eb-381c921c4c1a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6d83f854-f589-498b-9de6-19d28490031d}",
   "sourcePort": "normal",
   "targetUuid": "{6926b2ef-56bd-44cd-898a-d4fa8bfde3a9}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{33d5028c-fead-47e6-af9c-151551bbb679}",
   "sourcePort": "output0",
   "targetUuid": "{7fb00c73-6f97-46d4-8221-00db8cddb466}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6a89b74a-5cfa-4cc6-8115-90e63539d1f6}",
   "sourcePort": "output0",
   "targetUuid": "{7fb00c73-6f97-46d4-8221-00db8cddb466}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7fb00c73-6f97-46d4-8221-00db8cddb466}",
   "sourcePort": "output0",
   "targetUuid": "{66e8e634-9271-4509-abb5-daf31cdfdca8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{918d3d9b-9b03-47b4-b8af-691e27504269}",
   "sourcePort": "z",
   "targetUuid": "{9a66eaf0-8671-4c74-bead-f054ab8ec24f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9a66eaf0-8671-4c74-bead-f054ab8ec24f}",
   "sourcePort": "output0",
   "targetUuid": "{7f6e635a-ffbc-451a-9f58-acfb70474901}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9a66eaf0-8671-4c74-bead-f054ab8ec24f}",
   "sourcePort": "output0",
   "targetUuid": "{7f6e635a-ffbc-451a-9f58-acfb70474901}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7f6e635a-ffbc-451a-9f58-acfb70474901}",
   "sourcePort": "output0",
   "targetUuid": "{63e7f033-82e9-480e-8ebc-fe5a6cddc5f5}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b0a34230-70f5-40c6-b93c-aa85429f3bb7}",
   "sourcePort": "color",
   "targetUuid": "{92459c37-e977-49bb-bfdf-71af72e87a17}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{92459c37-e977-49bb-bfdf-71af72e87a17}",
   "sourcePort": "mixed",
   "targetUuid": "{665106b9-f7fa-4123-a9c8-7d9bfaf92a9a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{92459c37-e977-49bb-bfdf-71af72e87a17}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "postGain",
   "targetUuid": "{665106b9-f7fa-4123-a9c8-7d9bfaf92a9a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{665106b9-f7fa-4123-a9c8-7d9bfaf92a9a}",
   "sourcePort": "output0",
   "targetUuid": "{af01099f-a823-49d4-949a-d4baec229e35}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "innerAlpha",
   "targetUuid": "{45875d42-9504-4eb1-ab0a-548c333b3272}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "outerAlpha",
   "targetUuid": "{45875d42-9504-4eb1-ab0a-548c333b3272}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{7f6e635a-ffbc-451a-9f58-acfb70474901}",
   "sourcePort": "output0",
   "targetUuid": "{45875d42-9504-4eb1-ab0a-548c333b3272}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{45875d42-9504-4eb1-ab0a-548c333b3272}",
   "sourcePort": "mixed",
   "targetUuid": "{ae451e45-50b7-4753-88b8-db1c6ba3488c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "alphaGain",
   "targetUuid": "{ae451e45-50b7-4753-88b8-db1c6ba3488c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "normalScaling",
   "targetUuid": "{33d5028c-fead-47e6-af9c-151551bbb679}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ae451e45-50b7-4753-88b8-db1c6ba3488c}",
   "sourcePort": "output0",
   "targetUuid": "{d363df8f-9f8e-4ff7-b0c0-fd0a3dc16142}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{6a89b74a-5cfa-4cc6-8115-90e63539d1f6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3ae140b9-b5fe-4911-8680-4dc7e957b55a}",
   "sourcePort": "uv",
   "targetUuid": "{22661297-c713-498b-90b0-4984c76b0f58}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{22661297-c713-498b-90b0-4984c76b0f58}",
   "sourcePort": "color",
   "targetUuid": "{6d83f854-f589-498b-9de6-19d28490031d}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{6d83f854-f589-498b-9de6-19d28490031d}",
   "targetPort": "strength"
  },
  {
   "layers": [],
   "sourceUuid": "{d363df8f-9f8e-4ff7-b0c0-fd0a3dc16142}",
   "sourcePort": "output0",
   "targetUuid": "{e2216f75-e570-42ed-9508-6de18b252031}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{22661297-c713-498b-90b0-4984c76b0f58}",
   "sourcePort": "alpha",
   "targetUuid": "{d363df8f-9f8e-4ff7-b0c0-fd0a3dc16142}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{66e8e634-9271-4509-abb5-daf31cdfdca8}",
   "sourcePort": "output0",
   "targetUuid": "{918d3d9b-9b03-47b4-b8af-691e27504269}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{6926b2ef-56bd-44cd-898a-d4fa8bfde3a9}",
   "sourcePort": "transformed",
   "targetUuid": "{33d5028c-fead-47e6-af9c-151551bbb679}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{af01099f-a823-49d4-949a-d4baec229e35}",
   "sourcePort": "output0",
   "targetUuid": "{e2216f75-e570-42ed-9508-6de18b252031}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{63e7f033-82e9-480e-8ebc-fe5a6cddc5f5}",
   "sourcePort": "mixed",
   "targetUuid": "{2b910a11-8b0f-4fc3-a8eb-381c921c4c1a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e2216f75-e570-42ed-9508-6de18b252031}",
   "sourcePort": "color_out",
   "targetUuid": "{c433093c-fef4-4aff-a259-8132896acb55}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{e2216f75-e570-42ed-9508-6de18b252031}",
   "sourcePort": "alpha_out",
   "targetUuid": "{c433093c-fef4-4aff-a259-8132896acb55}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{c433093c-fef4-4aff-a259-8132896acb55}",
   "sourcePort": "shader",
   "targetUuid": "{88e04ef0-7ab3-4899-badd-17cf5fbcb8f2}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0315dccc-67ec-43c1-a68e-1b75a05e83a9}",
   "sourcePort": "value",
   "targetUuid": "{92459c37-e977-49bb-bfdf-71af72e87a17}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a5b2d57b-a84e-403f-8c30-2d08052fb65c}",
   "sourcePort": "value",
   "targetUuid": "{9a66eaf0-8671-4c74-bead-f054ab8ec24f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{aea5ad17-81a4-4af5-ab86-af2fbcc0da86}",
   "sourcePort": "value",
   "targetUuid": "{6a89b74a-5cfa-4cc6-8115-90e63539d1f6}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{22661297-c713-498b-90b0-4984c76b0f58}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{b6076095-41a1-481f-8b99-549f0006d08c}",
   "sourcePort": "normalMap",
   "targetUuid": "{22661297-c713-498b-90b0-4984c76b0f58}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1)"
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "PLANAR_REFLECTION_ALPHA_BLEND": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform highp mat4 viewMatrix;",
      "   uniform highp mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform highp mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform highp sampler2D kuesa_reflectionPlaneMap;",
      "uniform highp vec4 kuesa_reflectionPlane;",
      "highp mat4 reflectionMatrix(vec4 n)",
      "{",
      "    highp vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "highp vec4 reflectedColor(vec4 c)",
      "{",
      "    highp vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    highp vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    highp vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    highp vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform mat4 viewMatrix;",
      "   uniform mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform sampler2D kuesa_reflectionPlaneMap;",
      "uniform vec4 kuesa_reflectionPlane;",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "layout(binding=0) uniform sampler2D kuesa_reflectionPlaneMap;",
      "add-uniform vec4 kuesa_reflectionPlane;",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesNormalMap",
    "normalMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "reflectionGain",
    "innerAlpha",
    "outerAlpha",
    "alphaGain",
    "postVertexColor",
    "postGain"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float normalMapGain;\n    highp float reflectionGain;\n    highp float innerAlpha;\n    highp float outerAlpha;\n    highp float alphaGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D normalMap;\n"
     ],
     "substitution": "highp sampler2D $normalMap = normalMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $normalMapGain = properties.normalMapGain;highp float $reflectionGain = properties.reflectionGain;highp float $innerAlpha = properties.innerAlpha;highp float $outerAlpha = properties.outerAlpha;highp float $alphaGain = properties.alphaGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float innerAlpha;\n    float outerAlpha;\n    float alphaGain;\n    float postVertexColor;\n    float postGain;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $normalMap = normalMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $innerAlpha = properties.innerAlpha;float $outerAlpha = properties.outerAlpha;float $alphaGain = properties.alphaGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float innerAlpha;\n    float outerAlpha;\n    float alphaGain;\n    float postVertexColor;\n    float postGain;\n    bool usesNormalMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $normalMap = normalMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $innerAlpha = properties.innerAlpha;float $outerAlpha = properties.outerAlpha;float $alphaGain = properties.alphaGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesNormalMap = properties.usesNormalMap;"
    }
   ]
  }
 }
}