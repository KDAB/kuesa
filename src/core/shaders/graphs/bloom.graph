{
    "edges": [
        {
            "layers": [
            ],
            "sourcePort": "value",
            "sourceUuid": "{e002f10c-0f16-4549-922f-8841953f1886}",
            "targetPort": "coord",
            "targetUuid": "{1929dd54-dcd0-46e2-b6a8-2e44e37032c5}"
        },
        {
            "layers": [
            ],
            "sourcePort": "value",
            "sourceUuid": "{e002f10c-0f16-4549-922f-8841953f1886}",
            "targetPort": "coord",
            "targetUuid": "{ba7592c8-a9ec-4b85-b1e5-ad22dfcdbe89}"
        },
        {
            "layers": [
            ],
            "sourcePort": "color",
            "sourceUuid": "{1929dd54-dcd0-46e2-b6a8-2e44e37032c5}",
            "targetPort": "first",
            "targetUuid": "{a4a7ebcb-8a2c-4bee-8e3c-6067a3a43186}"
        },
        {
            "layers": [
            ],
            "sourcePort": "color",
            "sourceUuid": "{ba7592c8-a9ec-4b85-b1e5-ad22dfcdbe89}",
            "targetPort": "second",
            "targetUuid": "{a4a7ebcb-8a2c-4bee-8e3c-6067a3a43186}"
        },
        {
            "layers": [
            ],
            "sourcePort": "sum",
            "sourceUuid": "{a4a7ebcb-8a2c-4bee-8e3c-6067a3a43186}",
            "targetPort": "input",
            "targetUuid": "{fa35e6b4-bc6c-4d2d-9ebb-35782ee99924}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{fa35e6b4-bc6c-4d2d-9ebb-35782ee99924}",
            "targetPort": "first",
            "targetUuid": "{37bdcb8c-00e5-4acf-99e3-56ee324d9b6b}"
        },
        {
            "layers": [
            ],
            "sourcePort": "value",
            "sourceUuid": "{d5732eff-9364-492d-88e8-6c37eb6d87be}",
            "targetPort": "second",
            "targetUuid": "{37bdcb8c-00e5-4acf-99e3-56ee324d9b6b}"
        },
        {
            "layers": [
            ],
            "sourcePort": "sum",
            "sourceUuid": "{a4a7ebcb-8a2c-4bee-8e3c-6067a3a43186}",
            "targetPort": "input",
            "targetUuid": "{57ec5431-db75-4c45-9e8c-98ef256b862b}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{57ec5431-db75-4c45-9e8c-98ef256b862b}",
            "targetPort": "first",
            "targetUuid": "{ce367ac6-2367-40ca-a796-7bf9859a41b7}"
        },
        {
            "layers": [
            ],
            "sourcePort": "value",
            "sourceUuid": "{37bdcb8c-00e5-4acf-99e3-56ee324d9b6b}",
            "targetPort": "second",
            "targetUuid": "{ce367ac6-2367-40ca-a796-7bf9859a41b7}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{ce367ac6-2367-40ca-a796-7bf9859a41b7}",
            "targetPort": "fragColor",
            "targetUuid": "{12685ae4-eaee-430e-92e9-3884f9857f99}"
        }
    ],
    "groups": [
    ],
    "layers": [
    ],
    "nodes": [
        {
            "collapsed": false,
            "displayName": "input",
            "group": -1,
            "id": 0,
            "inputValues": {
            },
            "layers": [
            ],
            "parameters": {
                "name": "texCoord",
                "qualifier": {
                    "type": "QShaderLanguage::StorageQualifier",
                    "value": "QShaderLanguage::Input"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                }
            },
            "position": {
                "x": 252,
                "y": 126
            },
            "type": "input",
            "uuid": "{e002f10c-0f16-4549-922f-8841953f1886}"
        },
        {
            "collapsed": false,
            "displayName": "sampleTexture",
            "group": -1,
            "id": 1,
            "inputValues": {
                "coord": ""
            },
            "layers": [
            ],
            "parameters": {
                "name": "texture0"
            },
            "position": {
                "x": 671,
                "y": 116
            },
            "type": "sampleTexture",
            "uuid": "{1929dd54-dcd0-46e2-b6a8-2e44e37032c5}"
        },
        {
            "collapsed": false,
            "displayName": "sampleTexture",
            "group": -1,
            "id": 2,
            "inputValues": {
                "coord": ""
            },
            "layers": [
            ],
            "parameters": {
                "name": "texture1"
            },
            "position": {
                "x": 660,
                "y": 268
            },
            "type": "sampleTexture",
            "uuid": "{ba7592c8-a9ec-4b85-b1e5-ad22dfcdbe89}"
        },
        {
            "collapsed": false,
            "displayName": "fragColor",
            "group": -1,
            "id": 22,
            "inputValues": {
                "fragColor": ""
            },
            "layers": [
            ],
            "parameters": {
            },
            "position": {
                "x": 1912,
                "y": 303
            },
            "type": "fragColor",
            "uuid": "{12685ae4-eaee-430e-92e9-3884f9857f99}"
        },
        {
            "collapsed": false,
            "displayName": "add",
            "group": -1,
            "id": 23,
            "inputValues": {
                "first": "",
                "second": ""
            },
            "layers": [
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "position": {
                "x": 939,
                "y": 208
            },
            "type": "add",
            "uuid": "{a4a7ebcb-8a2c-4bee-8e3c-6067a3a43186}"
        },
        {
            "collapsed": false,
            "displayName": "swizzle",
            "group": -1,
            "id": 24,
            "inputValues": {
                "input": "0.0"
            },
            "layers": [
            ],
            "parameters": {
                "fields": "a",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "position": {
                "x": 1125,
                "y": 303
            },
            "type": "swizzle",
            "uuid": "{fa35e6b4-bc6c-4d2d-9ebb-35782ee99924}"
        },
        {
            "collapsed": false,
            "displayName": "min",
            "group": -1,
            "id": 26,
            "inputValues": {
                "first": "0.0",
                "second": "0.0"
            },
            "layers": [
            ],
            "parameters": {
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "position": {
                "x": 1447,
                "y": 390
            },
            "type": "min",
            "uuid": "{37bdcb8c-00e5-4acf-99e3-56ee324d9b6b}"
        },
        {
            "collapsed": false,
            "displayName": "constant",
            "group": -1,
            "id": 27,
            "inputValues": {
            },
            "layers": [
            ],
            "parameters": {
                "constant": "1.0",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "position": {
                "x": 1120,
                "y": 437
            },
            "type": "constant",
            "uuid": "{d5732eff-9364-492d-88e8-6c37eb6d87be}"
        },
        {
            "collapsed": false,
            "displayName": "swizzle",
            "group": -1,
            "id": 28,
            "inputValues": {
                "input": ""
            },
            "layers": [
            ],
            "parameters": {
                "fields": "rgb",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "position": {
                "x": 1445,
                "y": 222
            },
            "type": "swizzle",
            "uuid": "{57ec5431-db75-4c45-9e8c-98ef256b862b}"
        },
        {
            "collapsed": false,
            "displayName": "join2",
            "group": -1,
            "id": 29,
            "inputValues": {
                "first": "0.0",
                "second": "0.0"
            },
            "layers": [
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "position": {
                "x": 1627,
                "y": 293
            },
            "type": "join2",
            "uuid": "{ce367ac6-2367-40ca-a796-7bf9859a41b7}"
        }
    ],
    "project": {
        "position": {
            "x": 432.3879747096365,
            "y": -290.5796783196165
        },
        "scale": 0.6875
    },
    "prototypes": {
        "add": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "sum"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $sum = $first + $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $sum = $first + $second;"
                }
            ]
        },
        "and": {
            "inputs": [
                "input1",
                "input2"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 && $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 && $input2;"
                }
            ]
        },
        "atIndex": {
            "inputs": [
                "index",
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "indexType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Int"
                },
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "outType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outType $output = $input[$index];"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outType $output = $input[$index];"
                }
            ]
        },
        "cast": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($input);"
                }
            ]
        },
        "constant": {
            "outputs": [
                "value"
            ],
            "parameters": {
                "constant": "0.0",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = $type($constant);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = $type($constant);"
                }
            ]
        },
        "discard_if": {
            "inputs": [
                "condition",
                "value"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "conditionType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp $type discard_if_$type(bool shouldDiscard, highp $type value) { if (shouldDiscard) discard; return value; }"
                    ],
                    "substitution": "highp $type $output = discard_if_$type($condition, $value);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$type discard_if_$type(bool shouldDiscard, $type value) { if (shouldDiscard) discard; return value; }"
                    ],
                    "substitution": "$type $output = discard_if_$type($condition, $value);"
                }
            ]
        },
        "divide": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "quotient"
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $quotient = $first / $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $quotient = $first / $second;"
                }
            ]
        },
        "dot": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outputType $value = dot($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outputType $value = dot($first, $second);"
                }
            ]
        },
        "equal": {
            "inputs": [
                "input1",
                "input2"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "valueType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 == $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 == $input2;"
                }
            ]
        },
        "eyePosition": {
            "outputs": [
                "eyePosition"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp vec3 eyePosition;"
                    ],
                    "substitution": "highp vec3 $eyePosition = eyePosition;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform vec3 eyePosition;"
                    ],
                    "substitution": "vec3 $eyePosition = eyePosition;"
                }
            ]
        },
        "fragColor": {
            "inputs": [
                "fragColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "gl_FragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                }
            ]
        },
        "gl_Position": {
            "inputs": [
                "position"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "gl_Position = $position;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "gl_Position = $position;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "gl_Position = $position;"
                }
            ]
        },
        "greater": {
            "inputs": [
                "input1",
                "input2"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "valueType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 > $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 > $input2;"
                }
            ]
        },
        "if": {
            "inputs": [
                "condition",
                "false",
                "true"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "conditionType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = ($condition) ? $true : $false;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = ($condition) ? $true : $false;"
                }
            ]
        },
        "input": {
            "outputs": [
                "value"
            ],
            "parameters": {
                "name": "defaultName",
                "qualifier": {
                    "type": "QShaderLanguage::StorageQualifier",
                    "value": "QShaderLanguage::Input"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        "join2": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($first, $second);"
                }
            ]
        },
        "join3": {
            "inputs": [
                "first",
                "second",
                "third"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfThird": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($first, $second, $third);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($first, $second, $third);"
                }
            ]
        },
        "join4d": {
            "inputs": [
                "first",
                "fourth",
                "second",
                "third"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfFourth": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfThird": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($first, $second, $third, $fourth);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($first, $second, $third, $fourth);"
                }
            ]
        },
        "max": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = max($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = max($first, $second);"
                }
            ]
        },
        "metalRoughFunction": {
            "inputs": [
                "ambientOcclusion",
                "baseColor",
                "metalness",
                "roughness",
                "worldNormal",
                "worldPosition",
                "worldView"
            ],
            "outputs": [
                "outputColor"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/gl3/metalrough.inc.frag"
                    ],
                    "substitution": "vec4 $outputColor = metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $worldPosition, $worldView, $worldNormal);"
                }
            ]
        },
        "min": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = min($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = min($first, $second);"
                }
            ]
        },
        "multiply": {
            "inputs": [
                "first",
                "second"
            ],
            "outputs": [
                "product"
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $product = $first * $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $product = $first * $second;"
                }
            ]
        },
        "normalize": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = normalize($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = normalize($input);"
                }
            ]
        },
        "not": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = !$input1;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = !$input1;"
                }
            ]
        },
        "or": {
            "inputs": [
                "input1",
                "input2"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 || $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input1 || $input2;"
                }
            ]
        },
        "output": {
            "inputs": [
                "value"
            ],
            "parameters": {
                "name": "defaultName",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "varying highp $type $name;"
                    ],
                    "substitution": "$name = $value;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp $type $name;"
                    ],
                    "substitution": "$name = $value;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out $type $name;"
                    ],
                    "substitution": "$name = $value;"
                }
            ]
        },
        "pow": {
            "inputs": [
                "base",
                "power"
            ],
            "outputs": [
                "value"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = pow($base, $power);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = pow($base, $power);"
                }
            ]
        },
        "sampleTexture": {
            "inputs": [
                "coord"
            ],
            "outputs": [
                "color"
            ],
            "parameters": {
                "name": "defaultName"
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "highp vec4 $color = texture2D($name, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "highp vec4 $color = texture($name, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "vec4 $color = texture($name, $coord);"
                }
            ]
        },
        "subtract": {
            "inputs": [
                "minuend",
                "subtrahend"
            ],
            "outputs": [
                "difference"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $difference = $minuend - $subtrahend;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $difference = $minuend - $subtrahend;"
                }
            ]
        },
        "swizzle": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "fields": "x",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $input.$fields;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $input.$fields;"
                }
            ]
        },
        "time": {
            "outputs": [
                "time"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp float time;"
                    ],
                    "substitution": "highp float $time = time;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform float time;"
                    ],
                    "substitution": "float $time = time;"
                }
            ]
        },
        "transpose": {
            "inputs": [
                "input"
            ],
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Mat3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = transpose($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = transpose($input);"
                }
            ]
        },
        "worldSpaceToTangentSpaceMatrix": {
            "inputs": [
                "worldNormal",
                "worldTangent"
            ],
            "outputs": [
                "matrix"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/es2/coordinatesystems.inc"
                    ],
                    "substitution": "highp mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/es3/coordinatesystems.inc"
                    ],
                    "substitution": "highp mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/gl3/coordinatesystems.inc"
                    ],
                    "substitution": "mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                }
            ]
        }
    },
    "subgraph": [
    ]
}
