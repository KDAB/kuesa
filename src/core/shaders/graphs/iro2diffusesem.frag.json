{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3e18c106-437c-4fff-a4d4-bca9fb2f7d95}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{36d21080-7a61-4a65-8185-91c17f84117c}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{936f2d45-aa27-4e1e-a8b7-b24c2a38d138}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{19f2c273-6fb1-48d9-8350-62a8e27b7eb3}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{e80618e5-82e1-4e3e-b618-deaf4463aaeb}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2a00f5a9-6216-47e0-82ab-51b4b74099ed}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{aa6e1072-6b64-4277-9627-89384a090b6e}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a28a66d0-c88b-4387-a9bd-4eb83a151c0a}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{eeabff05-e331-4931-ba43-3f177e7e68ed}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{53ebacee-cc25-457a-822a-d5ca9701afb1}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{bb8618a0-ffb5-4894-a021-df965a722722}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{41b5175c-89fc-4783-b6ab-73b25cddf1d3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{06173858-98e0-437a-828b-2319d42a4c91}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{d202d938-6ae1-4c15-a05f-fa0620aaaf40}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{277ca4a5-caa9-4174-84e1-86ccc090526c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{daa13ffb-0289-4f76-8fa0-9763be230e94}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{6868710f-57ea-49e4-9214-34d0712d1e0a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{398442c8-17f7-4873-992d-f36a338c3a9c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{16b881fa-2a31-49f0-8988-36fe19e15d6a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c38763fe-d774-4606-996c-30da45e66431}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{027d546a-f648-4311-8e6b-1045f585f99d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{ca2af613-793b-4660-8c82-fa3f3a5d3d0e}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2da1c619-9c7d-4b38-8525-0f1228f29d99}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{5ed42cef-7ce0-47fb-a3b4-f077640c1c28}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{7b9dcbc1-223e-449e-a3b3-e25b93f0ee24}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{cb3647f2-a54c-42ff-896c-64bfc57c374f}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{419437c9-f733-4752-a242-715fed887c05}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e008c3f6-a2ac-4039-a2ff-231581fb1e08}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4515f88a-1129-4688-aaa6-18070f91b20f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3a6814c5-a0fa-4ab6-a1a8-e7f461cfab9f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{0361545c-594c-482e-9b02-96b421201b2e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e15f57ac-ebd2-4549-87b9-98224c712a20}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{5bf4e68a-2590-43c1-b672-da294201c5f9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6a47b870-da19-4c4a-af93-aca31f688f19}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{5e014791-07a8-4e36-b155-b09f36bd7849}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e2a1b859-fe15-466f-859f-f1431e19c075}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b769db80-fff6-438f-bf3c-8d2b55cbcf28}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{390951d9-63b2-4b1e-ab64-47768b217491}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{76ada27c-b0a2-468a-890b-12cd19f69a89}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1, 1, -1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{8ab527a7-a6a5-4030-8119-6ea16cabe64e}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "inverseViewMatrix",
    "preFactor": "vec3(1, 1, -1)",
    "postFactor": "vec3(1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{f0a3816f-5095-4507-bada-8a6944c25a5d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{d2739ec6-1655-4aa6-9435-7d25a9ef21c6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a045ddca-784f-4bcb-a9d4-3a3c75725e4c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{270b2549-316f-4291-b329-697dbb86bf11}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e797ff2d-e57f-46cd-a613-9ff1b07e8e59}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{369b4938-e56e-4b6e-81d7-25b5271fc6ac}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{db078c58-d39c-446b-a79a-eded89bc8eac}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{04d3d98c-c4d3-42ac-b6ed-7049c719c81e}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "2.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{f1276c70-03d6-4c70-83c2-d124608c2c52}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{40e82fbe-2659-42e6-917a-306ab4db2c96}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4b91c4a0-fc4b-45d1-b80a-1566a27cdc88}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{02c67dc5-2272-4e0d-830f-07f869603532}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a4a56908-53d2-46a9-8786-93dfa53d5f4e}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{41b5175c-89fc-4783-b6ab-73b25cddf1d3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{41b5175c-89fc-4783-b6ab-73b25cddf1d3}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{936f2d45-aa27-4e1e-a8b7-b24c2a38d138}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{936f2d45-aa27-4e1e-a8b7-b24c2a38d138}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{41b5175c-89fc-4783-b6ab-73b25cddf1d3}",
   "sourcePort": "mixed",
   "targetUuid": "{aa6e1072-6b64-4277-9627-89384a090b6e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{936f2d45-aa27-4e1e-a8b7-b24c2a38d138}",
   "sourcePort": "mixed",
   "targetUuid": "{277ca4a5-caa9-4174-84e1-86ccc090526c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{aa6e1072-6b64-4277-9627-89384a090b6e}",
   "sourcePort": "output0",
   "targetUuid": "{36d21080-7a61-4a65-8185-91c17f84117c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{36d21080-7a61-4a65-8185-91c17f84117c}",
   "sourcePort": "output0",
   "targetUuid": "{3e18c106-437c-4fff-a4d4-bca9fb2f7d95}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{19f2c273-6fb1-48d9-8350-62a8e27b7eb3}",
   "sourcePort": "output0",
   "targetUuid": "{3e18c106-437c-4fff-a4d4-bca9fb2f7d95}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3e18c106-437c-4fff-a4d4-bca9fb2f7d95}",
   "sourcePort": "output0",
   "targetUuid": "{06173858-98e0-437a-828b-2319d42a4c91}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{36d21080-7a61-4a65-8185-91c17f84117c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{19f2c273-6fb1-48d9-8350-62a8e27b7eb3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{277ca4a5-caa9-4174-84e1-86ccc090526c}",
   "sourcePort": "output0",
   "targetUuid": "{19f2c273-6fb1-48d9-8350-62a8e27b7eb3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e80618e5-82e1-4e3e-b618-deaf4463aaeb}",
   "sourcePort": "normal",
   "targetUuid": "{8ab527a7-a6a5-4030-8119-6ea16cabe64e}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{76ada27c-b0a2-468a-890b-12cd19f69a89}",
   "sourcePort": "output0",
   "targetUuid": "{b769db80-fff6-438f-bf3c-8d2b55cbcf28}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6a47b870-da19-4c4a-af93-aca31f688f19}",
   "sourcePort": "output0",
   "targetUuid": "{b769db80-fff6-438f-bf3c-8d2b55cbcf28}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b769db80-fff6-438f-bf3c-8d2b55cbcf28}",
   "sourcePort": "output0",
   "targetUuid": "{390951d9-63b2-4b1e-ab64-47768b217491}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{16b881fa-2a31-49f0-8988-36fe19e15d6a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e2a1b859-fe15-466f-859f-f1431e19c075}",
   "sourcePort": "output0",
   "targetUuid": "{e15f57ac-ebd2-4549-87b9-98224c712a20}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5e014791-07a8-4e36-b155-b09f36bd7849}",
   "sourcePort": "z",
   "targetUuid": "{a28a66d0-c88b-4387-a9bd-4eb83a151c0a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a28a66d0-c88b-4387-a9bd-4eb83a151c0a}",
   "sourcePort": "output0",
   "targetUuid": "{eeabff05-e331-4931-ba43-3f177e7e68ed}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a28a66d0-c88b-4387-a9bd-4eb83a151c0a}",
   "sourcePort": "output0",
   "targetUuid": "{eeabff05-e331-4931-ba43-3f177e7e68ed}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eeabff05-e331-4931-ba43-3f177e7e68ed}",
   "sourcePort": "output0",
   "targetUuid": "{41b5175c-89fc-4783-b6ab-73b25cddf1d3}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{eeabff05-e331-4931-ba43-3f177e7e68ed}",
   "sourcePort": "output0",
   "targetUuid": "{936f2d45-aa27-4e1e-a8b7-b24c2a38d138}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{bb8618a0-ffb5-4894-a021-df965a722722}",
   "sourcePort": "color",
   "targetUuid": "{53ebacee-cc25-457a-822a-d5ca9701afb1}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{53ebacee-cc25-457a-822a-d5ca9701afb1}",
   "sourcePort": "mixed",
   "targetUuid": "{2a00f5a9-6216-47e0-82ab-51b4b74099ed}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{53ebacee-cc25-457a-822a-d5ca9701afb1}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "postGain",
   "targetUuid": "{2a00f5a9-6216-47e0-82ab-51b4b74099ed}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2a00f5a9-6216-47e0-82ab-51b4b74099ed}",
   "sourcePort": "output0",
   "targetUuid": "{06173858-98e0-437a-828b-2319d42a4c91}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2da1c619-9c7d-4b38-8525-0f1228f29d99}",
   "sourcePort": "output0",
   "targetUuid": "{ca2af613-793b-4660-8c82-fa3f3a5d3d0e}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{ca2af613-793b-4660-8c82-fa3f3a5d3d0e}",
   "sourcePort": "result",
   "targetUuid": "{027d546a-f648-4311-8e6b-1045f585f99d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{027d546a-f648-4311-8e6b-1045f585f99d}",
   "sourcePort": "mixed",
   "targetUuid": "{c38763fe-d774-4606-996c-30da45e66431}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{06173858-98e0-437a-828b-2319d42a4c91}",
   "sourcePort": "output0",
   "targetUuid": "{c38763fe-d774-4606-996c-30da45e66431}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{027d546a-f648-4311-8e6b-1045f585f99d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{6868710f-57ea-49e4-9214-34d0712d1e0a}",
   "sourcePort": "shader",
   "targetUuid": "{daa13ffb-0289-4f76-8fa0-9763be230e94}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{7b9dcbc1-223e-449e-a3b3-e25b93f0ee24}",
   "sourcePort": "output",
   "targetUuid": "{5ed42cef-7ce0-47fb-a3b4-f077640c1c28}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{5ed42cef-7ce0-47fb-a3b4-f077640c1c28}",
   "sourcePort": "z",
   "targetUuid": "{2da1c619-9c7d-4b38-8525-0f1228f29d99}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "normalScaling",
   "targetUuid": "{76ada27c-b0a2-468a-890b-12cd19f69a89}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c38763fe-d774-4606-996c-30da45e66431}",
   "sourcePort": "output0",
   "targetUuid": "{398442c8-17f7-4873-992d-f36a338c3a9c}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{398442c8-17f7-4873-992d-f36a338c3a9c}",
   "sourcePort": "color_out",
   "targetUuid": "{6868710f-57ea-49e4-9214-34d0712d1e0a}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{16b881fa-2a31-49f0-8988-36fe19e15d6a}",
   "sourcePort": "output0",
   "targetUuid": "{6a47b870-da19-4c4a-af93-aca31f688f19}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cb3647f2-a54c-42ff-896c-64bfc57c374f}",
   "sourcePort": "uv",
   "targetUuid": "{419437c9-f733-4752-a242-715fed887c05}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{d202d938-6ae1-4c15-a05f-fa0620aaaf40}",
   "sourcePort": "color",
   "targetUuid": "{277ca4a5-caa9-4174-84e1-86ccc090526c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0361545c-594c-482e-9b02-96b421201b2e}",
   "sourcePort": "uv",
   "targetUuid": "{d202d938-6ae1-4c15-a05f-fa0620aaaf40}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{419437c9-f733-4752-a242-715fed887c05}",
   "sourcePort": "color",
   "targetUuid": "{e008c3f6-a2ac-4039-a2ff-231581fb1e08}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e008c3f6-a2ac-4039-a2ff-231581fb1e08}",
   "sourcePort": "output0",
   "targetUuid": "{4515f88a-1129-4688-aaa6-18070f91b20f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4515f88a-1129-4688-aaa6-18070f91b20f}",
   "sourcePort": "output0",
   "targetUuid": "{3a6814c5-a0fa-4ab6-a1a8-e7f461cfab9f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3a6814c5-a0fa-4ab6-a1a8-e7f461cfab9f}",
   "sourcePort": "output0",
   "targetUuid": "{16b881fa-2a31-49f0-8988-36fe19e15d6a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{3a6814c5-a0fa-4ab6-a1a8-e7f461cfab9f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{390951d9-63b2-4b1e-ab64-47768b217491}",
   "sourcePort": "output0",
   "targetUuid": "{f0a3816f-5095-4507-bada-8a6944c25a5d}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{e15f57ac-ebd2-4549-87b9-98224c712a20}",
   "sourcePort": "output0",
   "targetUuid": "{5bf4e68a-2590-43c1-b672-da294201c5f9}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{5bf4e68a-2590-43c1-b672-da294201c5f9}",
   "sourcePort": "color",
   "targetUuid": "{aa6e1072-6b64-4277-9627-89384a090b6e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{390951d9-63b2-4b1e-ab64-47768b217491}",
   "sourcePort": "output0",
   "targetUuid": "{5e014791-07a8-4e36-b155-b09f36bd7849}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{390951d9-63b2-4b1e-ab64-47768b217491}",
   "sourcePort": "output0",
   "targetUuid": "{e2a1b859-fe15-466f-859f-f1431e19c075}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8ab527a7-a6a5-4030-8119-6ea16cabe64e}",
   "sourcePort": "transformed",
   "targetUuid": "{76ada27c-b0a2-468a-890b-12cd19f69a89}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f0a3816f-5095-4507-bada-8a6944c25a5d}",
   "sourcePort": "transformed",
   "targetUuid": "{7b9dcbc1-223e-449e-a3b3-e25b93f0ee24}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{d2739ec6-1655-4aa6-9435-7d25a9ef21c6}",
   "sourcePort": "value",
   "targetUuid": "{a28a66d0-c88b-4387-a9bd-4eb83a151c0a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a045ddca-784f-4bcb-a9d4-3a3c75725e4c}",
   "sourcePort": "value",
   "targetUuid": "{53ebacee-cc25-457a-822a-d5ca9701afb1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{270b2549-316f-4291-b329-697dbb86bf11}",
   "sourcePort": "value",
   "targetUuid": "{398442c8-17f7-4873-992d-f36a338c3a9c}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{e797ff2d-e57f-46cd-a613-9ff1b07e8e59}",
   "sourcePort": "value",
   "targetUuid": "{027d546a-f648-4311-8e6b-1045f585f99d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{369b4938-e56e-4b6e-81d7-25b5271fc6ac}",
   "sourcePort": "value",
   "targetUuid": "{ca2af613-793b-4660-8c82-fa3f3a5d3d0e}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{db078c58-d39c-446b-a79a-eded89bc8eac}",
   "sourcePort": "value",
   "targetUuid": "{ca2af613-793b-4660-8c82-fa3f3a5d3d0e}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{04d3d98c-c4d3-42ac-b6ed-7049c719c81e}",
   "sourcePort": "value",
   "targetUuid": "{2da1c619-9c7d-4b38-8525-0f1228f29d99}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f1276c70-03d6-4c70-83c2-d124608c2c52}",
   "sourcePort": "value",
   "targetUuid": "{e008c3f6-a2ac-4039-a2ff-231581fb1e08}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{40e82fbe-2659-42e6-917a-306ab4db2c96}",
   "sourcePort": "value",
   "targetUuid": "{4515f88a-1129-4688-aaa6-18070f91b20f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4b91c4a0-fc4b-45d1-b80a-1566a27cdc88}",
   "sourcePort": "value",
   "targetUuid": "{e15f57ac-ebd2-4549-87b9-98224c712a20}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{02c67dc5-2272-4e0d-830f-07f869603532}",
   "sourcePort": "value",
   "targetUuid": "{6a47b870-da19-4c4a-af93-aca31f688f19}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a4a56908-53d2-46a9-8786-93dfa53d5f4e}",
   "sourcePort": "value",
   "targetUuid": "{e2a1b859-fe15-466f-859f-f1431e19c075}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{d202d938-6ae1-4c15-a05f-fa0620aaaf40}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{d202d938-6ae1-4c15-a05f-fa0620aaaf40}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{7b9dcbc1-223e-449e-a3b3-e25b93f0ee24}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{419437c9-f733-4752-a242-715fed887c05}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "normalMap",
   "targetUuid": "{419437c9-f733-4752-a242-715fed887c05}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{5bf4e68a-2590-43c1-b672-da294201c5f9}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{05b565d1-7c6d-460b-830e-7519ec9f40b0}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{5bf4e68a-2590-43c1-b672-da294201c5f9}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1)"
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "varying highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "varying highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "layout(location = 3) in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "layout(location = 2) in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "varying highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "varying highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "layout(location = 3) in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "layout(location = 2) in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "reflectionGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "diffuseGain",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp",
    "usesNormalMap",
    "normalMap",
    "usesReflectionMap",
    "reflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float normalMapGain;\n    highp float reflectionGain;\n    highp float diffuseGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D diffuseMap;\nuniform highp sampler2D normalMap;\nuniform highp sampler2D reflectionMap;\n"
     ],
     "substitution": "highp sampler2D $diffuseMap = diffuseMap;highp sampler2D $normalMap = normalMap;highp sampler2D $reflectionMap = reflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $normalMapGain = properties.normalMapGain;highp float $reflectionGain = properties.reflectionGain;highp float $diffuseGain = properties.diffuseGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float diffuseGain;\n    float postVertexColor;\n    float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D diffuseMap;\nuniform sampler2D normalMap;\nuniform sampler2D reflectionMap;\n"
     ],
     "substitution": "sampler2D $diffuseMap = diffuseMap;sampler2D $normalMap = normalMap;sampler2D $reflectionMap = reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $diffuseGain = properties.diffuseGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float diffuseGain;\n    float postVertexColor;\n    float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D diffuseMap;\nlayout(binding = 4) uniform sampler2D normalMap;\nlayout(binding = 5) uniform sampler2D reflectionMap;\n"
     ],
     "substitution": "sampler2D $diffuseMap = diffuseMap;sampler2D $normalMap = normalMap;sampler2D $reflectionMap = reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $diffuseGain = properties.diffuseGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    }
   ]
  }
 }
}