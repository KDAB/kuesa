{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d31d4fce-948f-4218-9653-8f29ac2d60dc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{46856f02-09bf-49b6-ab87-c95a3713ab4e}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{c237ad0b-9148-491d-b6b3-1059d272c836}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d54aa8f9-eecb-4d33-948f-f79a041b175f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{153fe5e9-fef5-4c05-af97-a9da33fe9cf2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8f2b23bd-fe15-4203-9d7a-4cb1c96b9772}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e34a44b5-f0fd-484a-beb7-5c6d9554d366}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{762c45b7-887b-44e1-803e-5d05bc2dcd3f}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ad003b12-7f4d-4b32-aa87-f76f678f9b6d}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{d6e3b748-2bf1-4df1-8340-8e0cddc6afaa}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{55b81691-4bb4-43fc-8376-1e1d5b7e9c56}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{28727401-fd33-49ff-a13a-1aecf1fc6fdd}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d39d6a0e-a8c3-4282-8edb-d9d6292b6a39}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{ab4f0bc2-a6fb-4dd3-9f4e-2dab5f85a072}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{87197836-f512-437b-b1bb-490a6eb09089}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{9dc03170-8a2e-40bc-a12f-1724cff9ad52}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{7c2f7663-f7b5-4519-be5e-faab0fc783d8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{fa46cfd3-7910-4636-b959-b71d36f2d86b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{acf25d30-0d7a-48d5-9af6-30d284c474f7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6b2ba824-bea1-4cdf-8bd7-2538d172e619}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{4a639901-b282-48a6-a7c0-58c1a1f64060}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{c836054e-1cc0-408e-a2c6-24c49d72d533}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{96882ea0-3548-4f25-b04b-f43c7acc0e89}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{cb206a43-83d8-48fe-9438-a4911c015858}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{267aa0d6-6e1f-40ed-8f5c-004b6ec2398c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{1bfff759-a745-4a8a-8a1f-f1c8412a6284}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{bf887cda-b504-46d7-9b0e-aa561b3073ac}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{81dc1321-0ff1-43b5-afcd-069f811edd75}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bc686949-ccb3-4f9f-8250-e08b4bb1d80c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{90270e0d-64e3-4f77-9540-8b08e7bed048}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{a84b1fc4-1112-44a2-bcbc-4966ebe1fab4}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5dd5fc52-dd34-48cc-8861-71eb32210348}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{f9446c94-1c34-4377-955c-51a5e21a840a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7128269a-e723-49eb-a04c-b8045e770fe7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{22b04c92-7f69-4899-a502-bd60a0fd5292}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e22dbe20-24c2-4b27-a7d7-15c763240f1e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3b959f11-b322-4a3d-8373-73ce88d76465}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{165e2bee-c75c-4d90-aa70-3a166b49388f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{33f8bbef-0e86-48ac-9767-ae14731cae0c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{abba9726-6b02-4e7a-b10c-970df046fd01}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{668065f7-f07c-4bbf-80e5-3e52dcb2cf2e}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{fbe2240e-5906-4897-b829-d3378ac0d462}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{3b386cdd-1da0-4c5d-876d-92d2c8886827}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4fcf968c-5009-41c8-bc9a-d1d13eb2caf0}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{5698147a-b28d-4ca5-a6ba-636788193b3f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{a3ef761f-d718-45c0-b59d-7529a6437433}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{0c9d6126-39ed-4250-8df9-36ac4500393a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "2.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{c80916ac-22b6-4af8-a654-1d78d067a445}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{96b4a8f4-8788-4838-819f-e1d7cd94aac6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{65a95663-fa53-4d4e-87e4-bbe16e50a15b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{76067b76-f2da-4cf9-87d3-7925c5e0f1d3}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{56674a0b-5e6e-45f4-856f-2a5a5a91f3c5}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{28727401-fd33-49ff-a13a-1aecf1fc6fdd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{28727401-fd33-49ff-a13a-1aecf1fc6fdd}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{c237ad0b-9148-491d-b6b3-1059d272c836}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{c237ad0b-9148-491d-b6b3-1059d272c836}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{28727401-fd33-49ff-a13a-1aecf1fc6fdd}",
   "sourcePort": "mixed",
   "targetUuid": "{e34a44b5-f0fd-484a-beb7-5c6d9554d366}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c237ad0b-9148-491d-b6b3-1059d272c836}",
   "sourcePort": "mixed",
   "targetUuid": "{87197836-f512-437b-b1bb-490a6eb09089}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e34a44b5-f0fd-484a-beb7-5c6d9554d366}",
   "sourcePort": "output0",
   "targetUuid": "{46856f02-09bf-49b6-ab87-c95a3713ab4e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{46856f02-09bf-49b6-ab87-c95a3713ab4e}",
   "sourcePort": "output0",
   "targetUuid": "{d31d4fce-948f-4218-9653-8f29ac2d60dc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d54aa8f9-eecb-4d33-948f-f79a041b175f}",
   "sourcePort": "output0",
   "targetUuid": "{d31d4fce-948f-4218-9653-8f29ac2d60dc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d31d4fce-948f-4218-9653-8f29ac2d60dc}",
   "sourcePort": "output0",
   "targetUuid": "{d39d6a0e-a8c3-4282-8edb-d9d6292b6a39}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{46856f02-09bf-49b6-ab87-c95a3713ab4e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{d54aa8f9-eecb-4d33-948f-f79a041b175f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{87197836-f512-437b-b1bb-490a6eb09089}",
   "sourcePort": "output0",
   "targetUuid": "{d54aa8f9-eecb-4d33-948f-f79a041b175f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{153fe5e9-fef5-4c05-af97-a9da33fe9cf2}",
   "sourcePort": "normal",
   "targetUuid": "{3b959f11-b322-4a3d-8373-73ce88d76465}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3b959f11-b322-4a3d-8373-73ce88d76465}",
   "sourcePort": "output0",
   "targetUuid": "{165e2bee-c75c-4d90-aa70-3a166b49388f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7128269a-e723-49eb-a04c-b8045e770fe7}",
   "sourcePort": "output0",
   "targetUuid": "{165e2bee-c75c-4d90-aa70-3a166b49388f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{165e2bee-c75c-4d90-aa70-3a166b49388f}",
   "sourcePort": "output0",
   "targetUuid": "{33f8bbef-0e86-48ac-9767-ae14731cae0c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{acf25d30-0d7a-48d5-9af6-30d284c474f7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e22dbe20-24c2-4b27-a7d7-15c763240f1e}",
   "sourcePort": "output0",
   "targetUuid": "{5dd5fc52-dd34-48cc-8861-71eb32210348}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{22b04c92-7f69-4899-a502-bd60a0fd5292}",
   "sourcePort": "z",
   "targetUuid": "{762c45b7-887b-44e1-803e-5d05bc2dcd3f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{762c45b7-887b-44e1-803e-5d05bc2dcd3f}",
   "sourcePort": "output0",
   "targetUuid": "{ad003b12-7f4d-4b32-aa87-f76f678f9b6d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{762c45b7-887b-44e1-803e-5d05bc2dcd3f}",
   "sourcePort": "output0",
   "targetUuid": "{ad003b12-7f4d-4b32-aa87-f76f678f9b6d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ad003b12-7f4d-4b32-aa87-f76f678f9b6d}",
   "sourcePort": "output0",
   "targetUuid": "{28727401-fd33-49ff-a13a-1aecf1fc6fdd}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{ad003b12-7f4d-4b32-aa87-f76f678f9b6d}",
   "sourcePort": "output0",
   "targetUuid": "{c237ad0b-9148-491d-b6b3-1059d272c836}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{55b81691-4bb4-43fc-8376-1e1d5b7e9c56}",
   "sourcePort": "color",
   "targetUuid": "{d6e3b748-2bf1-4df1-8340-8e0cddc6afaa}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{d6e3b748-2bf1-4df1-8340-8e0cddc6afaa}",
   "sourcePort": "mixed",
   "targetUuid": "{8f2b23bd-fe15-4203-9d7a-4cb1c96b9772}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{d6e3b748-2bf1-4df1-8340-8e0cddc6afaa}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "postGain",
   "targetUuid": "{8f2b23bd-fe15-4203-9d7a-4cb1c96b9772}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8f2b23bd-fe15-4203-9d7a-4cb1c96b9772}",
   "sourcePort": "output0",
   "targetUuid": "{d39d6a0e-a8c3-4282-8edb-d9d6292b6a39}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{96882ea0-3548-4f25-b04b-f43c7acc0e89}",
   "sourcePort": "output0",
   "targetUuid": "{c836054e-1cc0-408e-a2c6-24c49d72d533}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{c836054e-1cc0-408e-a2c6-24c49d72d533}",
   "sourcePort": "result",
   "targetUuid": "{4a639901-b282-48a6-a7c0-58c1a1f64060}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{4a639901-b282-48a6-a7c0-58c1a1f64060}",
   "sourcePort": "mixed",
   "targetUuid": "{6b2ba824-bea1-4cdf-8bd7-2538d172e619}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d39d6a0e-a8c3-4282-8edb-d9d6292b6a39}",
   "sourcePort": "output0",
   "targetUuid": "{6b2ba824-bea1-4cdf-8bd7-2538d172e619}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{4a639901-b282-48a6-a7c0-58c1a1f64060}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{7c2f7663-f7b5-4519-be5e-faab0fc783d8}",
   "sourcePort": "shader",
   "targetUuid": "{9dc03170-8a2e-40bc-a12f-1724cff9ad52}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{267aa0d6-6e1f-40ed-8f5c-004b6ec2398c}",
   "sourcePort": "output",
   "targetUuid": "{cb206a43-83d8-48fe-9438-a4911c015858}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{cb206a43-83d8-48fe-9438-a4911c015858}",
   "sourcePort": "z",
   "targetUuid": "{96882ea0-3548-4f25-b04b-f43c7acc0e89}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "normalScaling",
   "targetUuid": "{3b959f11-b322-4a3d-8373-73ce88d76465}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6b2ba824-bea1-4cdf-8bd7-2538d172e619}",
   "sourcePort": "output0",
   "targetUuid": "{fa46cfd3-7910-4636-b959-b71d36f2d86b}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{fa46cfd3-7910-4636-b959-b71d36f2d86b}",
   "sourcePort": "color_out",
   "targetUuid": "{7c2f7663-f7b5-4519-be5e-faab0fc783d8}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{acf25d30-0d7a-48d5-9af6-30d284c474f7}",
   "sourcePort": "output0",
   "targetUuid": "{7128269a-e723-49eb-a04c-b8045e770fe7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1bfff759-a745-4a8a-8a1f-f1c8412a6284}",
   "sourcePort": "uv",
   "targetUuid": "{bf887cda-b504-46d7-9b0e-aa561b3073ac}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{ab4f0bc2-a6fb-4dd3-9f4e-2dab5f85a072}",
   "sourcePort": "color",
   "targetUuid": "{87197836-f512-437b-b1bb-490a6eb09089}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a84b1fc4-1112-44a2-bcbc-4966ebe1fab4}",
   "sourcePort": "uv",
   "targetUuid": "{ab4f0bc2-a6fb-4dd3-9f4e-2dab5f85a072}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{bf887cda-b504-46d7-9b0e-aa561b3073ac}",
   "sourcePort": "color",
   "targetUuid": "{81dc1321-0ff1-43b5-afcd-069f811edd75}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{81dc1321-0ff1-43b5-afcd-069f811edd75}",
   "sourcePort": "output0",
   "targetUuid": "{bc686949-ccb3-4f9f-8250-e08b4bb1d80c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bc686949-ccb3-4f9f-8250-e08b4bb1d80c}",
   "sourcePort": "output0",
   "targetUuid": "{90270e0d-64e3-4f77-9540-8b08e7bed048}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{90270e0d-64e3-4f77-9540-8b08e7bed048}",
   "sourcePort": "output0",
   "targetUuid": "{acf25d30-0d7a-48d5-9af6-30d284c474f7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{90270e0d-64e3-4f77-9540-8b08e7bed048}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{33f8bbef-0e86-48ac-9767-ae14731cae0c}",
   "sourcePort": "output0",
   "targetUuid": "{267aa0d6-6e1f-40ed-8f5c-004b6ec2398c}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{5dd5fc52-dd34-48cc-8861-71eb32210348}",
   "sourcePort": "output0",
   "targetUuid": "{f9446c94-1c34-4377-955c-51a5e21a840a}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{f9446c94-1c34-4377-955c-51a5e21a840a}",
   "sourcePort": "color",
   "targetUuid": "{e34a44b5-f0fd-484a-beb7-5c6d9554d366}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{33f8bbef-0e86-48ac-9767-ae14731cae0c}",
   "sourcePort": "output0",
   "targetUuid": "{abba9726-6b02-4e7a-b10c-970df046fd01}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{abba9726-6b02-4e7a-b10c-970df046fd01}",
   "sourcePort": "transformed",
   "targetUuid": "{22b04c92-7f69-4899-a502-bd60a0fd5292}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{abba9726-6b02-4e7a-b10c-970df046fd01}",
   "sourcePort": "transformed",
   "targetUuid": "{e22dbe20-24c2-4b27-a7d7-15c763240f1e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{668065f7-f07c-4bbf-80e5-3e52dcb2cf2e}",
   "sourcePort": "value",
   "targetUuid": "{762c45b7-887b-44e1-803e-5d05bc2dcd3f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fbe2240e-5906-4897-b829-d3378ac0d462}",
   "sourcePort": "value",
   "targetUuid": "{d6e3b748-2bf1-4df1-8340-8e0cddc6afaa}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3b386cdd-1da0-4c5d-876d-92d2c8886827}",
   "sourcePort": "value",
   "targetUuid": "{fa46cfd3-7910-4636-b959-b71d36f2d86b}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{4fcf968c-5009-41c8-bc9a-d1d13eb2caf0}",
   "sourcePort": "value",
   "targetUuid": "{4a639901-b282-48a6-a7c0-58c1a1f64060}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5698147a-b28d-4ca5-a6ba-636788193b3f}",
   "sourcePort": "value",
   "targetUuid": "{c836054e-1cc0-408e-a2c6-24c49d72d533}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{a3ef761f-d718-45c0-b59d-7529a6437433}",
   "sourcePort": "value",
   "targetUuid": "{c836054e-1cc0-408e-a2c6-24c49d72d533}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{0c9d6126-39ed-4250-8df9-36ac4500393a}",
   "sourcePort": "value",
   "targetUuid": "{96882ea0-3548-4f25-b04b-f43c7acc0e89}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c80916ac-22b6-4af8-a654-1d78d067a445}",
   "sourcePort": "value",
   "targetUuid": "{81dc1321-0ff1-43b5-afcd-069f811edd75}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{96b4a8f4-8788-4838-819f-e1d7cd94aac6}",
   "sourcePort": "value",
   "targetUuid": "{bc686949-ccb3-4f9f-8250-e08b4bb1d80c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{65a95663-fa53-4d4e-87e4-bbe16e50a15b}",
   "sourcePort": "value",
   "targetUuid": "{5dd5fc52-dd34-48cc-8861-71eb32210348}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{76067b76-f2da-4cf9-87d3-7925c5e0f1d3}",
   "sourcePort": "value",
   "targetUuid": "{7128269a-e723-49eb-a04c-b8045e770fe7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{56674a0b-5e6e-45f4-856f-2a5a5a91f3c5}",
   "sourcePort": "value",
   "targetUuid": "{e22dbe20-24c2-4b27-a7d7-15c763240f1e}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{ab4f0bc2-a6fb-4dd3-9f4e-2dab5f85a072}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{ab4f0bc2-a6fb-4dd3-9f4e-2dab5f85a072}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{267aa0d6-6e1f-40ed-8f5c-004b6ec2398c}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{bf887cda-b504-46d7-9b0e-aa561b3073ac}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "normalMap",
   "targetUuid": "{bf887cda-b504-46d7-9b0e-aa561b3073ac}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{f9446c94-1c34-4377-955c-51a5e21a840a}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{cd9af22b-1c0c-4ba4-bac0-3ec544903627}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{f9446c94-1c34-4377-955c-51a5e21a840a}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "varying highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "varying highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "layout(location = 3) in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "layout(location = 2) in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "varying highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "varying highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "layout(location = 3) in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "layout(location = 2) in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "reflectionGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "diffuseGain",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp",
    "usesNormalMap",
    "normalMap",
    "usesReflectionMap",
    "reflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float normalMapGain;\n    highp float reflectionGain;\n    highp float diffuseGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D diffuseMap;\nuniform highp sampler2D normalMap;\nuniform highp sampler2D reflectionMap;\n"
     ],
     "substitution": "highp sampler2D $diffuseMap = diffuseMap;highp sampler2D $normalMap = normalMap;highp sampler2D $reflectionMap = reflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $normalMapGain = properties.normalMapGain;highp float $reflectionGain = properties.reflectionGain;highp float $diffuseGain = properties.diffuseGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float diffuseGain;\n    float postVertexColor;\n    float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D diffuseMap;\nuniform sampler2D normalMap;\nuniform sampler2D reflectionMap;\n"
     ],
     "substitution": "sampler2D $diffuseMap = diffuseMap;sampler2D $normalMap = normalMap;sampler2D $reflectionMap = reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $diffuseGain = properties.diffuseGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float diffuseGain;\n    float postVertexColor;\n    float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D diffuseMap;\nlayout(binding = 4) uniform sampler2D normalMap;\nlayout(binding = 5) uniform sampler2D reflectionMap;\n"
     ],
     "substitution": "sampler2D $diffuseMap = diffuseMap;sampler2D $normalMap = normalMap;sampler2D $reflectionMap = reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $diffuseGain = properties.diffuseGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    }
   ]
  }
 }
}