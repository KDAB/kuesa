{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f40fb027-33fb-47b0-9872-d5487395fe41}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{742977dd-0aed-4377-b41a-380e7fe93672}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{902d3485-4e79-4e67-b3ae-fa9daa511dcf}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4cb0a469-72eb-4712-8011-5b944f9d54cb}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{e8e45ad8-806c-4494-9d11-2238ceebdc6a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d5c30658-551f-481d-811a-dd0602fd17c5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5b8482fa-5413-4128-bd38-46dbabc643e1}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b451b475-9de3-4468-b306-95f15a2b9180}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1dce39b2-695f-40a1-98bc-9ece7f956553}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{b194c187-6b47-4a9e-a4bc-f427cf7e72d7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{70732b71-eca5-43ac-b1bb-9d3958e942d0}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{372e2d7b-3926-4bf1-8458-f400f92722c6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3977be14-15c8-43c7-955c-25fc02c7e51b}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{32cac1be-5d99-4b2c-8cac-959089960139}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{952bb768-cd40-4535-b226-e9ccad6ec96f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{72ac1b6d-22d1-453c-85ba-fc9fb3204b29}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{34cc4b73-551f-4684-a2bf-7a1b8f5466dd}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a4db76a5-aed5-49f2-b862-40392e606950}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e0151143-0ed0-4fbb-a9a8-f3dba94d27f8}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{d7d99586-859b-4798-9671-848f48ceff9f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{ced4863c-272b-4859-8fea-910e1a87dbd3}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b9be4b11-d739-47fa-b3ae-5a037261fe0a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{b386a678-371c-435c-8bc7-c541f8de9c36}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{587b27df-781f-4735-a49a-dee4d5351757}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{f7763d7e-7dac-4794-a03b-8de6e539af7f}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{acb56b82-d363-4b2d-80d5-55eafe19d503}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{14151fce-62cb-4bb2-8b46-44793d9dc0f0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fe0fe45c-2a16-466d-87e9-63cae06fcb4e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7eed252b-7757-4508-988b-a3885e31a81c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{e10bded8-5b1d-4600-9c21-e4519db9abe2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c75e5959-d394-4661-9650-850b7d37664e}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{15b7beea-7655-456f-9adf-4edc0ab02ca3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a630b941-3362-4137-bef6-5622fdbe1dd2}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{d423b272-d358-4e71-ae3a-ec49705259ae}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{475225ad-a555-4422-b4e6-cfe9ded1a757}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{827e3896-3fa3-44bf-b4b6-5ae46f1e6a32}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{b3230402-88b9-4ab0-933d-70ab51db3eac}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4305bb17-271c-4e98-8719-86250bfa2255}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1, 1, -1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{c70f5de1-57ce-4c5c-9c60-a3a82d32048b}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "inverseViewMatrix",
    "preFactor": "vec3(1, 1, -1)",
    "postFactor": "vec3(1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{757a3111-8296-44bc-9219-7110a2b36711}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "max",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_FUNCTION",
   "uuid": "{c537bdeb-cffc-4427-871e-6f8872b6309a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{531d033f-0776-426f-ad38-1a06363e1b1c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{acb4644a-22e4-43a1-bf23-cf82ea506aad}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{17117a77-effb-4e5c-8e28-f4281cfdcd58}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{48eac4d6-c91e-4271-837c-38d57be0679d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{bef73d78-8623-4c52-b98b-661bc6ec3176}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{728dae6c-7e1d-4489-ae9c-762f51e18048}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "2.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{6f4374a2-41fa-40e9-bcdb-6b9997fc9b27}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4ab00089-36ef-4ebc-88b7-6a5b5a246863}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{6b894ecc-29db-4ad9-b219-ca9bf580e6d3}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{010d5a05-85de-423c-b153-3bf0752a8df6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{2b3e7b05-7ffd-49bb-b933-9c2227efd300}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0,0.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{2a478c95-0fa1-4c33-a159-6a0ad9b0c8b0}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{372e2d7b-3926-4bf1-8458-f400f92722c6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{372e2d7b-3926-4bf1-8458-f400f92722c6}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{902d3485-4e79-4e67-b3ae-fa9daa511dcf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{902d3485-4e79-4e67-b3ae-fa9daa511dcf}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{372e2d7b-3926-4bf1-8458-f400f92722c6}",
   "sourcePort": "mixed",
   "targetUuid": "{5b8482fa-5413-4128-bd38-46dbabc643e1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{902d3485-4e79-4e67-b3ae-fa9daa511dcf}",
   "sourcePort": "mixed",
   "targetUuid": "{952bb768-cd40-4535-b226-e9ccad6ec96f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5b8482fa-5413-4128-bd38-46dbabc643e1}",
   "sourcePort": "output0",
   "targetUuid": "{742977dd-0aed-4377-b41a-380e7fe93672}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{742977dd-0aed-4377-b41a-380e7fe93672}",
   "sourcePort": "output0",
   "targetUuid": "{f40fb027-33fb-47b0-9872-d5487395fe41}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4cb0a469-72eb-4712-8011-5b944f9d54cb}",
   "sourcePort": "output0",
   "targetUuid": "{f40fb027-33fb-47b0-9872-d5487395fe41}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f40fb027-33fb-47b0-9872-d5487395fe41}",
   "sourcePort": "output0",
   "targetUuid": "{3977be14-15c8-43c7-955c-25fc02c7e51b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{742977dd-0aed-4377-b41a-380e7fe93672}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{4cb0a469-72eb-4712-8011-5b944f9d54cb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{952bb768-cd40-4535-b226-e9ccad6ec96f}",
   "sourcePort": "output0",
   "targetUuid": "{4cb0a469-72eb-4712-8011-5b944f9d54cb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e8e45ad8-806c-4494-9d11-2238ceebdc6a}",
   "sourcePort": "normal",
   "targetUuid": "{c70f5de1-57ce-4c5c-9c60-a3a82d32048b}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{4305bb17-271c-4e98-8719-86250bfa2255}",
   "sourcePort": "output0",
   "targetUuid": "{827e3896-3fa3-44bf-b4b6-5ae46f1e6a32}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a630b941-3362-4137-bef6-5622fdbe1dd2}",
   "sourcePort": "output0",
   "targetUuid": "{827e3896-3fa3-44bf-b4b6-5ae46f1e6a32}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{827e3896-3fa3-44bf-b4b6-5ae46f1e6a32}",
   "sourcePort": "output0",
   "targetUuid": "{b3230402-88b9-4ab0-933d-70ab51db3eac}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{a4db76a5-aed5-49f2-b862-40392e606950}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{475225ad-a555-4422-b4e6-cfe9ded1a757}",
   "sourcePort": "output0",
   "targetUuid": "{c75e5959-d394-4661-9650-850b7d37664e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d423b272-d358-4e71-ae3a-ec49705259ae}",
   "sourcePort": "z",
   "targetUuid": "{b451b475-9de3-4468-b306-95f15a2b9180}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b451b475-9de3-4468-b306-95f15a2b9180}",
   "sourcePort": "output0",
   "targetUuid": "{1dce39b2-695f-40a1-98bc-9ece7f956553}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b451b475-9de3-4468-b306-95f15a2b9180}",
   "sourcePort": "output0",
   "targetUuid": "{1dce39b2-695f-40a1-98bc-9ece7f956553}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1dce39b2-695f-40a1-98bc-9ece7f956553}",
   "sourcePort": "output0",
   "targetUuid": "{372e2d7b-3926-4bf1-8458-f400f92722c6}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{1dce39b2-695f-40a1-98bc-9ece7f956553}",
   "sourcePort": "output0",
   "targetUuid": "{902d3485-4e79-4e67-b3ae-fa9daa511dcf}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{70732b71-eca5-43ac-b1bb-9d3958e942d0}",
   "sourcePort": "color",
   "targetUuid": "{b194c187-6b47-4a9e-a4bc-f427cf7e72d7}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b194c187-6b47-4a9e-a4bc-f427cf7e72d7}",
   "sourcePort": "mixed",
   "targetUuid": "{d5c30658-551f-481d-811a-dd0602fd17c5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{b194c187-6b47-4a9e-a4bc-f427cf7e72d7}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "postGain",
   "targetUuid": "{d5c30658-551f-481d-811a-dd0602fd17c5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d5c30658-551f-481d-811a-dd0602fd17c5}",
   "sourcePort": "output0",
   "targetUuid": "{3977be14-15c8-43c7-955c-25fc02c7e51b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b9be4b11-d739-47fa-b3ae-5a037261fe0a}",
   "sourcePort": "output0",
   "targetUuid": "{ced4863c-272b-4859-8fea-910e1a87dbd3}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{ced4863c-272b-4859-8fea-910e1a87dbd3}",
   "sourcePort": "result",
   "targetUuid": "{d7d99586-859b-4798-9671-848f48ceff9f}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{d7d99586-859b-4798-9671-848f48ceff9f}",
   "sourcePort": "mixed",
   "targetUuid": "{e0151143-0ed0-4fbb-a9a8-f3dba94d27f8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3977be14-15c8-43c7-955c-25fc02c7e51b}",
   "sourcePort": "output0",
   "targetUuid": "{e0151143-0ed0-4fbb-a9a8-f3dba94d27f8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{d7d99586-859b-4798-9671-848f48ceff9f}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{34cc4b73-551f-4684-a2bf-7a1b8f5466dd}",
   "sourcePort": "shader",
   "targetUuid": "{72ac1b6d-22d1-453c-85ba-fc9fb3204b29}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{587b27df-781f-4735-a49a-dee4d5351757}",
   "sourcePort": "output",
   "targetUuid": "{b386a678-371c-435c-8bc7-c541f8de9c36}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{b386a678-371c-435c-8bc7-c541f8de9c36}",
   "sourcePort": "z",
   "targetUuid": "{b9be4b11-d739-47fa-b3ae-5a037261fe0a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "normalScaling",
   "targetUuid": "{4305bb17-271c-4e98-8719-86250bfa2255}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e0151143-0ed0-4fbb-a9a8-f3dba94d27f8}",
   "sourcePort": "output0",
   "targetUuid": "{c537bdeb-cffc-4427-871e-6f8872b6309a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a4db76a5-aed5-49f2-b862-40392e606950}",
   "sourcePort": "output0",
   "targetUuid": "{a630b941-3362-4137-bef6-5622fdbe1dd2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f7763d7e-7dac-4794-a03b-8de6e539af7f}",
   "sourcePort": "uv",
   "targetUuid": "{acb56b82-d363-4b2d-80d5-55eafe19d503}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{32cac1be-5d99-4b2c-8cac-959089960139}",
   "sourcePort": "color",
   "targetUuid": "{952bb768-cd40-4535-b226-e9ccad6ec96f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e10bded8-5b1d-4600-9c21-e4519db9abe2}",
   "sourcePort": "uv",
   "targetUuid": "{32cac1be-5d99-4b2c-8cac-959089960139}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{acb56b82-d363-4b2d-80d5-55eafe19d503}",
   "sourcePort": "color",
   "targetUuid": "{14151fce-62cb-4bb2-8b46-44793d9dc0f0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{14151fce-62cb-4bb2-8b46-44793d9dc0f0}",
   "sourcePort": "output0",
   "targetUuid": "{fe0fe45c-2a16-466d-87e9-63cae06fcb4e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fe0fe45c-2a16-466d-87e9-63cae06fcb4e}",
   "sourcePort": "output0",
   "targetUuid": "{7eed252b-7757-4508-988b-a3885e31a81c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7eed252b-7757-4508-988b-a3885e31a81c}",
   "sourcePort": "output0",
   "targetUuid": "{a4db76a5-aed5-49f2-b862-40392e606950}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{7eed252b-7757-4508-988b-a3885e31a81c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3230402-88b9-4ab0-933d-70ab51db3eac}",
   "sourcePort": "output0",
   "targetUuid": "{757a3111-8296-44bc-9219-7110a2b36711}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{c75e5959-d394-4661-9650-850b7d37664e}",
   "sourcePort": "output0",
   "targetUuid": "{15b7beea-7655-456f-9adf-4edc0ab02ca3}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{15b7beea-7655-456f-9adf-4edc0ab02ca3}",
   "sourcePort": "color",
   "targetUuid": "{5b8482fa-5413-4128-bd38-46dbabc643e1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3230402-88b9-4ab0-933d-70ab51db3eac}",
   "sourcePort": "output0",
   "targetUuid": "{d423b272-d358-4e71-ae3a-ec49705259ae}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{b3230402-88b9-4ab0-933d-70ab51db3eac}",
   "sourcePort": "output0",
   "targetUuid": "{475225ad-a555-4422-b4e6-cfe9ded1a757}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c70f5de1-57ce-4c5c-9c60-a3a82d32048b}",
   "sourcePort": "transformed",
   "targetUuid": "{4305bb17-271c-4e98-8719-86250bfa2255}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{757a3111-8296-44bc-9219-7110a2b36711}",
   "sourcePort": "transformed",
   "targetUuid": "{587b27df-781f-4735-a49a-dee4d5351757}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{c537bdeb-cffc-4427-871e-6f8872b6309a}",
   "sourcePort": "output0",
   "targetUuid": "{34cc4b73-551f-4684-a2bf-7a1b8f5466dd}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{531d033f-0776-426f-ad38-1a06363e1b1c}",
   "sourcePort": "value",
   "targetUuid": "{b451b475-9de3-4468-b306-95f15a2b9180}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{acb4644a-22e4-43a1-bf23-cf82ea506aad}",
   "sourcePort": "value",
   "targetUuid": "{b194c187-6b47-4a9e-a4bc-f427cf7e72d7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{17117a77-effb-4e5c-8e28-f4281cfdcd58}",
   "sourcePort": "value",
   "targetUuid": "{d7d99586-859b-4798-9671-848f48ceff9f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{48eac4d6-c91e-4271-837c-38d57be0679d}",
   "sourcePort": "value",
   "targetUuid": "{ced4863c-272b-4859-8fea-910e1a87dbd3}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{bef73d78-8623-4c52-b98b-661bc6ec3176}",
   "sourcePort": "value",
   "targetUuid": "{ced4863c-272b-4859-8fea-910e1a87dbd3}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{728dae6c-7e1d-4489-ae9c-762f51e18048}",
   "sourcePort": "value",
   "targetUuid": "{b9be4b11-d739-47fa-b3ae-5a037261fe0a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6f4374a2-41fa-40e9-bcdb-6b9997fc9b27}",
   "sourcePort": "value",
   "targetUuid": "{14151fce-62cb-4bb2-8b46-44793d9dc0f0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4ab00089-36ef-4ebc-88b7-6a5b5a246863}",
   "sourcePort": "value",
   "targetUuid": "{fe0fe45c-2a16-466d-87e9-63cae06fcb4e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6b894ecc-29db-4ad9-b219-ca9bf580e6d3}",
   "sourcePort": "value",
   "targetUuid": "{c75e5959-d394-4661-9650-850b7d37664e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{010d5a05-85de-423c-b153-3bf0752a8df6}",
   "sourcePort": "value",
   "targetUuid": "{a630b941-3362-4137-bef6-5622fdbe1dd2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2b3e7b05-7ffd-49bb-b933-9c2227efd300}",
   "sourcePort": "value",
   "targetUuid": "{475225ad-a555-4422-b4e6-cfe9ded1a757}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2a478c95-0fa1-4c33-a159-6a0ad9b0c8b0}",
   "sourcePort": "value",
   "targetUuid": "{c537bdeb-cffc-4427-871e-6f8872b6309a}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{32cac1be-5d99-4b2c-8cac-959089960139}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{32cac1be-5d99-4b2c-8cac-959089960139}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{587b27df-781f-4735-a49a-dee4d5351757}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{acb56b82-d363-4b2d-80d5-55eafe19d503}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "normalMap",
   "targetUuid": "{acb56b82-d363-4b2d-80d5-55eafe19d503}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{15b7beea-7655-456f-9adf-4edc0ab02ca3}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{c1c74f90-68f9-4654-af66-dbd23cc905aa}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{15b7beea-7655-456f-9adf-4edc0ab02ca3}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1)"
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "PLANAR_REFLECTION_ALPHA_BLEND": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform highp mat4 viewMatrix;",
      "   uniform highp mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform highp mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   varying highp vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       varying highp vec3 worldNormal;",
      "   #else",
      "       const lowp vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       varying highp vec4 worldTangent;",
      "   #else",
      "       const lowp vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform highp sampler2D kuesa_reflectionPlaneMap;",
      "uniform highp vec4 kuesa_reflectionPlane;",
      "highp mat4 reflectionMatrix(vec4 n)",
      "{",
      "    highp vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "highp vec4 reflectedColor(vec4 c)",
      "{",
      "    highp vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    highp vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    highp vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    highp vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "highp vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "   uniform mat4 viewMatrix;",
      "   uniform mat4 inverseViewMatrix;",
      "#endif",
      "#ifndef PROJECTION_MATRIX",
      "#define PROJECTION_MATRIX",
      "   uniform mat4 projectionMatrix;",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "   in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "uniform sampler2D kuesa_reflectionPlaneMap;",
      "uniform vec4 kuesa_reflectionPlane;",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif",
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "   #ifdef LAYER_hasVertexNormal",
      "       layout(location = 3) in vec3 worldNormal;",
      "   #else",
      "       const vec3 worldNormal = vec3(0.0);",
      "   #endif",
      "   #ifdef LAYER_hasVertexTangent",
      "       layout(location = 2) in vec4 worldTangent;",
      "   #else",
      "       const vec4 worldTangent = vec4(0.0);",
      "   #endif",
      "#endif",
      "#ifndef PLANAR_REFLECTION",
      "#define PLANAR_REFLECTION",
      "layout(binding=0) uniform sampler2D kuesa_reflectionPlaneMap;",
      "layout(std140, binding = 12) uniform qt3d_shadergraph_reflection_plane_uniforms {",
      "    vec4 kuesa_reflectionPlane;",
      "};",
      "mat4 reflectionMatrix(vec4 n)",
      "{",
      "    vec4 n2 = n * n;",
      "    return mat4(1.0 - 2 * n2.x,    -2 * n.x * n.y,     -2 * n.x * n.z,    0,",
      "                -2 * n.x * n.y,     1.0 - 2 * n2.y,    -2 * n.y * n.z,    0,",
      "                -2 * n.x * n.z,    -2 * n.y * n.z,      1.0 -2 * n2.z,    0,",
      "                -2 * n.x * n.w ,   -2 * n.y * n.w,     -2 * n.z * n.w,    1);",
      "}",
      "vec4 reflectedColor(vec4 c)",
      "{",
      "    vec4 clipReflection = projectionMatrix * viewMatrix * reflectionMatrix(kuesa_reflectionPlane) * vec4(worldPosition, 1.0);",
      "    vec2 refCoords = clipReflection.xy / clipReflection.w;",
      "    vec2 texCoords = vec2(0.5) + 0.5 * refCoords;",
      "    vec4 reflectedColor = texture(kuesa_reflectionPlaneMap, texCoords);",
      "    return c * reflectedColor;",
      "}",
      "#endif"
     ],
     "substitution": "vec4 $shader = reflectedColor(vec4($color, pow($alpha, 2.4)));"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "reflectionGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "diffuseGain",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp",
    "usesNormalMap",
    "normalMap",
    "usesReflectionMap",
    "reflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float normalMapGain;\n    highp float reflectionGain;\n    highp float diffuseGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D diffuseMap;\nuniform highp sampler2D normalMap;\nuniform highp sampler2D reflectionMap;\n"
     ],
     "substitution": "highp sampler2D $diffuseMap = diffuseMap;highp sampler2D $normalMap = normalMap;highp sampler2D $reflectionMap = reflectionMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $normalMapGain = properties.normalMapGain;highp float $reflectionGain = properties.reflectionGain;highp float $diffuseGain = properties.diffuseGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float diffuseGain;\n    float postVertexColor;\n    float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D diffuseMap;\nuniform sampler2D normalMap;\nuniform sampler2D reflectionMap;\n"
     ],
     "substitution": "sampler2D $diffuseMap = diffuseMap;sampler2D $normalMap = normalMap;sampler2D $reflectionMap = reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $diffuseGain = properties.diffuseGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float diffuseGain;\n    float postVertexColor;\n    float postGain;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n    bool usesNormalMap;\n    bool usesReflectionMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D diffuseMap;\nlayout(binding = 4) uniform sampler2D normalMap;\nlayout(binding = 5) uniform sampler2D reflectionMap;\n"
     ],
     "substitution": "sampler2D $diffuseMap = diffuseMap;sampler2D $normalMap = normalMap;sampler2D $reflectionMap = reflectionMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $diffuseGain = properties.diffuseGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;bool $usesNormalMap = properties.usesNormalMap;bool $usesReflectionMap = properties.usesReflectionMap;"
    }
   ]
  }
 }
}
