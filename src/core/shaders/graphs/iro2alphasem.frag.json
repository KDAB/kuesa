{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2b0394ba-4bd7-4fd4-9a7b-b2b87d7fb2e9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{58eb380d-afab-48d5-bfea-fcf3b4a9f016}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{ccc848c3-6d8b-4b79-b983-7049cb41eafc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c20f63a7-ea2d-4364-880d-091bb46fcb40}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b514e030-2963-43f2-a618-b55c49ad8c87}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{43c9bdd6-1668-4f1e-87a7-a2034e9742c1}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{1cac7b39-58df-4c5a-9381-b99c4eb8f801}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{e7c311d4-9130-43f8-b7cd-ee851f1c09b0}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ac4800f4-8219-4c35-8de1-90de650203dd}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{69bcd929-8da7-4045-b5fe-7720d28b6411}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7fe230e7-317e-42d7-850f-755efdd365e2}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{654e1958-fc4d-4585-8f28-14245d429ba2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2d386cc3-60a0-41ec-9930-453342e5d512}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{977d4942-5699-461f-8bc0-895b62c31c6b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{20d5e5c2-f1cf-4f84-bef6-98e72eda831c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6dc5d81f-dd33-4eec-8c51-f2e6bbb6bd20}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{741c1fdd-047f-44ad-b8de-e23d6f394c8d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{dfdc325e-ef95-4926-b858-ce39bf3388ef}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d1baa605-323d-48c7-82ff-20a4199e08ca}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{ba44732b-7ba7-414e-ab5a-7171e6c97d97}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{0d363dad-d1c8-4d85-9017-db3397ca7b05}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{61a05278-1260-4276-a4d2-15eb00c83b40}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{6ff75a42-1a14-4646-b4f7-8637c2a8ce8e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{760c0741-393a-4ba1-bc7d-ba5e02d5a34a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{1d04c95b-c347-40f7-9c51-ce57983d09d7}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{68e88e0b-7cc6-4001-97ce-bebcc3cf9ebd}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{451bb6a0-91b3-4928-b84c-454f16e706d0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{d7238fd6-79e6-4a89-8cdb-e7a8c13eae2c}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{d7eb7e63-b087-4019-b96f-c37cd15455b4}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2ba7ef47-2e04-4db8-941b-200a19040274}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4b986800-8966-421a-9b85-344fe0d3f145}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9a36ccfe-be3f-4ece-9ae7-830e4b1dea17}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{42923fe5-b18d-48c8-a75a-54c9eb3cb258}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e2a3c2fb-87f1-4541-83fd-560a6fe2a87e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1134fcbf-1da3-40db-aa49-1e0f1806555b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d2fe8cb5-bf6f-44fb-a915-6c3ee283ac9a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{09e24e0f-e0a6-479d-a0fe-16e34bdb5af1}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "inverseViewMatrix",
    "preFactor": "vec3(1, 1, -1)",
    "postFactor": "vec3(1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{09629b6b-6631-4594-a457-958b43b9f11c}"
  },
  {
   "layers": [],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1, 1, -1)"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{c913d21b-8b81-4538-a811-b70dbf3d6c6f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{82efb28a-1223-48c1-91fc-fd46868c824b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c43c0428-db7a-4cfb-909f-7d45faa2708a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{f5c7d7f4-75f1-4ed4-837c-17e189f78033}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d7dd9169-6ed4-4427-9bde-b05ea1bf3004}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{f3efdd66-3ad6-41d5-95fd-f3683bd76dd5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{029f1ce0-8ae7-427a-b43a-cdd8cc2ca1c7}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{262adea0-4727-4335-a9ce-af3601aeff1c}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{0af0ba8c-020e-45d7-85af-98fb79c2c087}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{434be110-c85c-4482-b6eb-c1bae2732e67}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "2.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{ccda8735-6838-4627-a055-49f8aaea8858}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{5fe6f1df-19f0-4a1f-bab2-333f4b08ced7}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{69bcd929-8da7-4045-b5fe-7720d28b6411}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{69bcd929-8da7-4045-b5fe-7720d28b6411}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{69bcd929-8da7-4045-b5fe-7720d28b6411}",
   "sourcePort": "mixed",
   "targetUuid": "{c20f63a7-ea2d-4364-880d-091bb46fcb40}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c20f63a7-ea2d-4364-880d-091bb46fcb40}",
   "sourcePort": "output0",
   "targetUuid": "{2b0394ba-4bd7-4fd4-9a7b-b2b87d7fb2e9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2b0394ba-4bd7-4fd4-9a7b-b2b87d7fb2e9}",
   "sourcePort": "output0",
   "targetUuid": "{2d386cc3-60a0-41ec-9930-453342e5d512}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{2b0394ba-4bd7-4fd4-9a7b-b2b87d7fb2e9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{977d4942-5699-461f-8bc0-895b62c31c6b}",
   "sourcePort": "normal",
   "targetUuid": "{c913d21b-8b81-4538-a811-b70dbf3d6c6f}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{1134fcbf-1da3-40db-aa49-1e0f1806555b}",
   "sourcePort": "output0",
   "targetUuid": "{d2fe8cb5-bf6f-44fb-a915-6c3ee283ac9a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e2a3c2fb-87f1-4541-83fd-560a6fe2a87e}",
   "sourcePort": "output0",
   "targetUuid": "{d2fe8cb5-bf6f-44fb-a915-6c3ee283ac9a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d2fe8cb5-bf6f-44fb-a915-6c3ee283ac9a}",
   "sourcePort": "output0",
   "targetUuid": "{09e24e0f-e0a6-479d-a0fe-16e34bdb5af1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{58eb380d-afab-48d5-bfea-fcf3b4a9f016}",
   "sourcePort": "output0",
   "targetUuid": "{20d5e5c2-f1cf-4f84-bef6-98e72eda831c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ccc848c3-6d8b-4b79-b983-7049cb41eafc}",
   "sourcePort": "z",
   "targetUuid": "{654e1958-fc4d-4585-8f28-14245d429ba2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{654e1958-fc4d-4585-8f28-14245d429ba2}",
   "sourcePort": "output0",
   "targetUuid": "{7fe230e7-317e-42d7-850f-755efdd365e2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{654e1958-fc4d-4585-8f28-14245d429ba2}",
   "sourcePort": "output0",
   "targetUuid": "{7fe230e7-317e-42d7-850f-755efdd365e2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7fe230e7-317e-42d7-850f-755efdd365e2}",
   "sourcePort": "output0",
   "targetUuid": "{69bcd929-8da7-4045-b5fe-7720d28b6411}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{43c9bdd6-1668-4f1e-87a7-a2034e9742c1}",
   "sourcePort": "color",
   "targetUuid": "{1cac7b39-58df-4c5a-9381-b99c4eb8f801}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{1cac7b39-58df-4c5a-9381-b99c4eb8f801}",
   "sourcePort": "mixed",
   "targetUuid": "{b514e030-2963-43f2-a618-b55c49ad8c87}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{1cac7b39-58df-4c5a-9381-b99c4eb8f801}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "postGain",
   "targetUuid": "{b514e030-2963-43f2-a618-b55c49ad8c87}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b514e030-2963-43f2-a618-b55c49ad8c87}",
   "sourcePort": "output0",
   "targetUuid": "{2d386cc3-60a0-41ec-9930-453342e5d512}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "innerAlpha",
   "targetUuid": "{e7c311d4-9130-43f8-b7cd-ee851f1c09b0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "outerAlpha",
   "targetUuid": "{e7c311d4-9130-43f8-b7cd-ee851f1c09b0}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{7fe230e7-317e-42d7-850f-755efdd365e2}",
   "sourcePort": "output0",
   "targetUuid": "{e7c311d4-9130-43f8-b7cd-ee851f1c09b0}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{e7c311d4-9130-43f8-b7cd-ee851f1c09b0}",
   "sourcePort": "mixed",
   "targetUuid": "{ac4800f4-8219-4c35-8de1-90de650203dd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ac4800f4-8219-4c35-8de1-90de650203dd}",
   "sourcePort": "output0",
   "targetUuid": "{68e88e0b-7cc6-4001-97ce-bebcc3cf9ebd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "alphaGain",
   "targetUuid": "{68e88e0b-7cc6-4001-97ce-bebcc3cf9ebd}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1d04c95b-c347-40f7-9c51-ce57983d09d7}",
   "sourcePort": "shader",
   "targetUuid": "{6ff75a42-1a14-4646-b4f7-8637c2a8ce8e}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "normalScaling",
   "targetUuid": "{1134fcbf-1da3-40db-aa49-1e0f1806555b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{760c0741-393a-4ba1-bc7d-ba5e02d5a34a}",
   "sourcePort": "color_out",
   "targetUuid": "{1d04c95b-c347-40f7-9c51-ce57983d09d7}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{760c0741-393a-4ba1-bc7d-ba5e02d5a34a}",
   "sourcePort": "alpha_out",
   "targetUuid": "{1d04c95b-c347-40f7-9c51-ce57983d09d7}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{42923fe5-b18d-48c8-a75a-54c9eb3cb258}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{42923fe5-b18d-48c8-a75a-54c9eb3cb258}",
   "sourcePort": "output0",
   "targetUuid": "{e2a3c2fb-87f1-4541-83fd-560a6fe2a87e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d1baa605-323d-48c7-82ff-20a4199e08ca}",
   "sourcePort": "output0",
   "targetUuid": "{dfdc325e-ef95-4926-b858-ce39bf3388ef}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{dfdc325e-ef95-4926-b858-ce39bf3388ef}",
   "sourcePort": "result",
   "targetUuid": "{741c1fdd-047f-44ad-b8de-e23d6f394c8d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{741c1fdd-047f-44ad-b8de-e23d6f394c8d}",
   "sourcePort": "mixed",
   "targetUuid": "{6dc5d81f-dd33-4eec-8c51-f2e6bbb6bd20}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0d363dad-d1c8-4d85-9017-db3397ca7b05}",
   "sourcePort": "output",
   "targetUuid": "{ba44732b-7ba7-414e-ab5a-7171e6c97d97}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{ba44732b-7ba7-414e-ab5a-7171e6c97d97}",
   "sourcePort": "z",
   "targetUuid": "{d1baa605-323d-48c7-82ff-20a4199e08ca}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2d386cc3-60a0-41ec-9930-453342e5d512}",
   "sourcePort": "output0",
   "targetUuid": "{6dc5d81f-dd33-4eec-8c51-f2e6bbb6bd20}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6dc5d81f-dd33-4eec-8c51-f2e6bbb6bd20}",
   "sourcePort": "output0",
   "targetUuid": "{760c0741-393a-4ba1-bc7d-ba5e02d5a34a}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{741c1fdd-047f-44ad-b8de-e23d6f394c8d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{d7238fd6-79e6-4a89-8cdb-e7a8c13eae2c}",
   "sourcePort": "uv",
   "targetUuid": "{d7eb7e63-b087-4019-b96f-c37cd15455b4}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{61a05278-1260-4276-a4d2-15eb00c83b40}",
   "sourcePort": "color",
   "targetUuid": "{c20f63a7-ea2d-4364-880d-091bb46fcb40}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{61a05278-1260-4276-a4d2-15eb00c83b40}",
   "sourcePort": "alpha",
   "targetUuid": "{ac4800f4-8219-4c35-8de1-90de650203dd}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{20d5e5c2-f1cf-4f84-bef6-98e72eda831c}",
   "sourcePort": "output0",
   "targetUuid": "{61a05278-1260-4276-a4d2-15eb00c83b40}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{4b986800-8966-421a-9b85-344fe0d3f145}",
   "sourcePort": "output0",
   "targetUuid": "{2ba7ef47-2e04-4db8-941b-200a19040274}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d7eb7e63-b087-4019-b96f-c37cd15455b4}",
   "sourcePort": "color",
   "targetUuid": "{4b986800-8966-421a-9b85-344fe0d3f145}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{68e88e0b-7cc6-4001-97ce-bebcc3cf9ebd}",
   "sourcePort": "output0",
   "targetUuid": "{451bb6a0-91b3-4928-b84c-454f16e706d0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{451bb6a0-91b3-4928-b84c-454f16e706d0}",
   "sourcePort": "output0",
   "targetUuid": "{760c0741-393a-4ba1-bc7d-ba5e02d5a34a}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{d7eb7e63-b087-4019-b96f-c37cd15455b4}",
   "sourcePort": "alpha",
   "targetUuid": "{451bb6a0-91b3-4928-b84c-454f16e706d0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2ba7ef47-2e04-4db8-941b-200a19040274}",
   "sourcePort": "output0",
   "targetUuid": "{9a36ccfe-be3f-4ece-9ae7-830e4b1dea17}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{9a36ccfe-be3f-4ece-9ae7-830e4b1dea17}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9a36ccfe-be3f-4ece-9ae7-830e4b1dea17}",
   "sourcePort": "output0",
   "targetUuid": "{42923fe5-b18d-48c8-a75a-54c9eb3cb258}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{09e24e0f-e0a6-479d-a0fe-16e34bdb5af1}",
   "sourcePort": "output0",
   "targetUuid": "{09629b6b-6631-4594-a457-958b43b9f11c}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{09e24e0f-e0a6-479d-a0fe-16e34bdb5af1}",
   "sourcePort": "output0",
   "targetUuid": "{ccc848c3-6d8b-4b79-b983-7049cb41eafc}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{09e24e0f-e0a6-479d-a0fe-16e34bdb5af1}",
   "sourcePort": "output0",
   "targetUuid": "{58eb380d-afab-48d5-bfea-fcf3b4a9f016}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{09629b6b-6631-4594-a457-958b43b9f11c}",
   "sourcePort": "transformed",
   "targetUuid": "{0d363dad-d1c8-4d85-9017-db3397ca7b05}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{c913d21b-8b81-4538-a811-b70dbf3d6c6f}",
   "sourcePort": "transformed",
   "targetUuid": "{1134fcbf-1da3-40db-aa49-1e0f1806555b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{82efb28a-1223-48c1-91fc-fd46868c824b}",
   "sourcePort": "value",
   "targetUuid": "{58eb380d-afab-48d5-bfea-fcf3b4a9f016}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c43c0428-db7a-4cfb-909f-7d45faa2708a}",
   "sourcePort": "value",
   "targetUuid": "{1cac7b39-58df-4c5a-9381-b99c4eb8f801}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f5c7d7f4-75f1-4ed4-837c-17e189f78033}",
   "sourcePort": "value",
   "targetUuid": "{654e1958-fc4d-4585-8f28-14245d429ba2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d7dd9169-6ed4-4427-9bde-b05ea1bf3004}",
   "sourcePort": "value",
   "targetUuid": "{20d5e5c2-f1cf-4f84-bef6-98e72eda831c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f3efdd66-3ad6-41d5-95fd-f3683bd76dd5}",
   "sourcePort": "value",
   "targetUuid": "{741c1fdd-047f-44ad-b8de-e23d6f394c8d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{029f1ce0-8ae7-427a-b43a-cdd8cc2ca1c7}",
   "sourcePort": "value",
   "targetUuid": "{dfdc325e-ef95-4926-b858-ce39bf3388ef}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{262adea0-4727-4335-a9ce-af3601aeff1c}",
   "sourcePort": "value",
   "targetUuid": "{dfdc325e-ef95-4926-b858-ce39bf3388ef}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{0af0ba8c-020e-45d7-85af-98fb79c2c087}",
   "sourcePort": "value",
   "targetUuid": "{d1baa605-323d-48c7-82ff-20a4199e08ca}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{434be110-c85c-4482-b6eb-c1bae2732e67}",
   "sourcePort": "value",
   "targetUuid": "{2ba7ef47-2e04-4db8-941b-200a19040274}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ccda8735-6838-4627-a055-49f8aaea8858}",
   "sourcePort": "value",
   "targetUuid": "{4b986800-8966-421a-9b85-344fe0d3f145}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5fe6f1df-19f0-4a1f-bab2-333f4b08ced7}",
   "sourcePort": "value",
   "targetUuid": "{e2a3c2fb-87f1-4541-83fd-560a6fe2a87e}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{0d363dad-d1c8-4d85-9017-db3397ca7b05}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{61a05278-1260-4276-a4d2-15eb00c83b40}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{61a05278-1260-4276-a4d2-15eb00c83b40}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{d7eb7e63-b087-4019-b96f-c37cd15455b4}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{294d6e06-2846-42f8-ba85-96f833f2193a}",
   "sourcePort": "normalMap",
   "targetUuid": "{d7eb7e63-b087-4019-b96f-c37cd15455b4}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "parameters": {
    "transformMatrix": "viewMatrix",
    "preFactor": "vec3(1)",
    "postFactor": "vec3(1)"
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "uniform highp mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "uniform mat4 inverseViewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 uncorrectedProjectionMatrix;",
      "    mat4 clipCorrectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($transformMatrix * vec4($input * $preFactor, 0.0)).xyz * $postFactor;"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "varying highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "varying highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "layout(location = 3) in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "layout(location = 2) in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "varying highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "varying highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "layout(location = 3) in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "layout(location = 2) in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "gltfYUp",
    "usesReflectionMap",
    "reflectionMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "reflectionGain",
    "innerAlpha",
    "outerAlpha",
    "alphaGain",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "usesNormalMap",
    "normalMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float normalMapGain;\n    highp float reflectionGain;\n    highp float innerAlpha;\n    highp float outerAlpha;\n    highp float alphaGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D reflectionMap;\nuniform highp sampler2D normalMap;\n"
     ],
     "substitution": "highp sampler2D $reflectionMap = reflectionMap;highp sampler2D $normalMap = normalMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $normalMapGain = properties.normalMapGain;highp float $reflectionGain = properties.reflectionGain;highp float $innerAlpha = properties.innerAlpha;highp float $outerAlpha = properties.outerAlpha;highp float $alphaGain = properties.alphaGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float innerAlpha;\n    float outerAlpha;\n    float alphaGain;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D reflectionMap;\nuniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $reflectionMap = reflectionMap;sampler2D $normalMap = normalMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $innerAlpha = properties.innerAlpha;float $outerAlpha = properties.outerAlpha;float $alphaGain = properties.alphaGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float innerAlpha;\n    float outerAlpha;\n    float alphaGain;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    bool usesNormalMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D reflectionMap;\nlayout(binding = 4) uniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $reflectionMap = reflectionMap;sampler2D $normalMap = normalMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $innerAlpha = properties.innerAlpha;float $outerAlpha = properties.outerAlpha;float $alphaGain = properties.alphaGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;bool $usesNormalMap = properties.usesNormalMap;"
    }
   ]
  }
 }
}