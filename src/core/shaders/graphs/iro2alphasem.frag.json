{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c1f01b14-1134-467c-b87d-c5c08ddf776b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f9c97b54-89a2-4912-b008-712f31133633}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{94232472-eb22-401c-9fb3-5e148e7e6a49}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1d152ebc-d919-45e5-9108-eb56e65aa54a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c33f7b76-c6a9-4b8b-b589-e4d25db30e5b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{ecdd4d20-2fb4-4dcd-9572-6a47524f0e49}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{dbb591f0-bea2-420a-8ca4-f7d1874185fb}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "MIX",
   "uuid": "{4b5c7a0d-8f5a-48eb-bb47-253719705e0b}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0c7b5733-c0f9-4127-92d4-348e80dc36f7}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{a0f652db-e3f4-414a-8304-88a605a1e17b}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b80bc907-bcb8-40b2-813b-3515a107b58f}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4e78e7f5-5f62-4b6f-bffe-ebf4dfce02c5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{55bad1f7-ebd5-4d9a-a596-756f3b970af7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{2e1e2ac7-2092-4c2f-9fba-2f82e6add55f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5e648ce3-9ac0-4ecb-9666-6b14c6a09a14}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ccebe857-950c-415f-b52e-b96c5ff496a5}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{754db517-c01e-4bba-8fca-e82cb9fb26b6}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{9d21cd42-87f8-4ac6-8e4b-80f46d85bad6}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3a8f7889-7008-4ee0-a837-875de2c961f4}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{ba6c8932-aa05-4e90-8d0a-aeefc0882244}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{eb95cd64-5962-4fbf-8287-c818f0c6c43b}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{81298cb9-7426-418d-9505-3d89c5d934ec}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{8d3e4335-af3f-44e2-b1f1-b3617beafc34}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{d03a87b6-ca40-4f6f-8678-571a31c2a0ea}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "BLEND_ALPHA",
   "uuid": "{3d7ca4d8-e737-480f-b98b-eafd19f68673}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fb76f804-fd70-4431-9209-d431b4625e73}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{59d9e91f-d0cd-405c-be97-2c8502c65c3b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{ff1b38bf-9954-472e-9886-4cc6f1b0a7de}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "0.5, 0.5, 1.0, 1.0",
    "name": "normalMap",
    "condition": "usesNormalMap",
    "linearizer": ""
   },
   "type": "TEX_IMAGE",
   "uuid": "{c5b5ae79-2cc3-4776-9c1c-c722db804b75}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{92e3a89d-8df2-4239-a196-48c992c49a72}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{140bda59-8848-41d2-9236-e853f0e94673}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8f92c927-e155-4e3e-8d4f-31bbfdccdf5f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c2e0acb3-ac40-4a1e-80e9-0de68d26d7f2}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{91df3c9d-bad4-4c7b-bfa7-9a2a91ae49d6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{849d9ab4-0116-4b6f-9ec7-13cd8f84f6f6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5167e5a7-7e01-4f99-bd85-98a8bf3abc56}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{98f5081f-d7a7-4b74-b504-d331e2472b2f}"
  },
  {
   "layers": [],
   "parameters": {
    "conversionMatrix": "viewMatrix"
   },
   "type": "VECT_TRANSFORM",
   "uuid": "{999cd032-ab91-441d-9e9b-299d04705364}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{72340ae6-f385-40f2-9a12-989c1381fe52}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4ceb65cf-f6ad-4f9b-ad10-641473ab0b15}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{bcc8a2e1-ec28-4660-be1b-22db0839e265}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{59f30f6d-a5f5-46bb-88aa-a80453961fcc}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{795ccf35-cbff-4f5a-a93a-91834467a17b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{4803c73a-05af-48c8-884e-6971a7f2938a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{e5806e03-1b7d-4f35-8466-5414a21bf53d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{28ed9f41-01cd-4220-8fe3-bc8fb3a96b07}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{219ddeed-17f0-4596-aa03-a4d6548651f5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "2.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{c4b498d7-9ec1-44ec-9ca8-728d6ad6ce1d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a84a0832-bd63-4a7d-9615-f42fe919e918}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{a0f652db-e3f4-414a-8304-88a605a1e17b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{a0f652db-e3f4-414a-8304-88a605a1e17b}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{a0f652db-e3f4-414a-8304-88a605a1e17b}",
   "sourcePort": "mixed",
   "targetUuid": "{1d152ebc-d919-45e5-9108-eb56e65aa54a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1d152ebc-d919-45e5-9108-eb56e65aa54a}",
   "sourcePort": "output0",
   "targetUuid": "{c1f01b14-1134-467c-b87d-c5c08ddf776b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c1f01b14-1134-467c-b87d-c5c08ddf776b}",
   "sourcePort": "output0",
   "targetUuid": "{55bad1f7-ebd5-4d9a-a596-756f3b970af7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{c1f01b14-1134-467c-b87d-c5c08ddf776b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2e1e2ac7-2092-4c2f-9fba-2f82e6add55f}",
   "sourcePort": "normal",
   "targetUuid": "{849d9ab4-0116-4b6f-9ec7-13cd8f84f6f6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{849d9ab4-0116-4b6f-9ec7-13cd8f84f6f6}",
   "sourcePort": "output0",
   "targetUuid": "{5167e5a7-7e01-4f99-bd85-98a8bf3abc56}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{91df3c9d-bad4-4c7b-bfa7-9a2a91ae49d6}",
   "sourcePort": "output0",
   "targetUuid": "{5167e5a7-7e01-4f99-bd85-98a8bf3abc56}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5167e5a7-7e01-4f99-bd85-98a8bf3abc56}",
   "sourcePort": "output0",
   "targetUuid": "{98f5081f-d7a7-4b74-b504-d331e2472b2f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f9c97b54-89a2-4912-b008-712f31133633}",
   "sourcePort": "output0",
   "targetUuid": "{5e648ce3-9ac0-4ecb-9666-6b14c6a09a14}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{94232472-eb22-401c-9fb3-5e148e7e6a49}",
   "sourcePort": "z",
   "targetUuid": "{4e78e7f5-5f62-4b6f-bffe-ebf4dfce02c5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4e78e7f5-5f62-4b6f-bffe-ebf4dfce02c5}",
   "sourcePort": "output0",
   "targetUuid": "{b80bc907-bcb8-40b2-813b-3515a107b58f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4e78e7f5-5f62-4b6f-bffe-ebf4dfce02c5}",
   "sourcePort": "output0",
   "targetUuid": "{b80bc907-bcb8-40b2-813b-3515a107b58f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b80bc907-bcb8-40b2-813b-3515a107b58f}",
   "sourcePort": "output0",
   "targetUuid": "{a0f652db-e3f4-414a-8304-88a605a1e17b}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{98f5081f-d7a7-4b74-b504-d331e2472b2f}",
   "sourcePort": "output0",
   "targetUuid": "{999cd032-ab91-441d-9e9b-299d04705364}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{ecdd4d20-2fb4-4dcd-9572-6a47524f0e49}",
   "sourcePort": "color",
   "targetUuid": "{dbb591f0-bea2-420a-8ca4-f7d1874185fb}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{dbb591f0-bea2-420a-8ca4-f7d1874185fb}",
   "sourcePort": "mixed",
   "targetUuid": "{c33f7b76-c6a9-4b8b-b589-e4d25db30e5b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{dbb591f0-bea2-420a-8ca4-f7d1874185fb}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "postGain",
   "targetUuid": "{c33f7b76-c6a9-4b8b-b589-e4d25db30e5b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c33f7b76-c6a9-4b8b-b589-e4d25db30e5b}",
   "sourcePort": "output0",
   "targetUuid": "{55bad1f7-ebd5-4d9a-a596-756f3b970af7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "innerAlpha",
   "targetUuid": "{4b5c7a0d-8f5a-48eb-bb47-253719705e0b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "outerAlpha",
   "targetUuid": "{4b5c7a0d-8f5a-48eb-bb47-253719705e0b}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b80bc907-bcb8-40b2-813b-3515a107b58f}",
   "sourcePort": "output0",
   "targetUuid": "{4b5c7a0d-8f5a-48eb-bb47-253719705e0b}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{4b5c7a0d-8f5a-48eb-bb47-253719705e0b}",
   "sourcePort": "mixed",
   "targetUuid": "{0c7b5733-c0f9-4127-92d4-348e80dc36f7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0c7b5733-c0f9-4127-92d4-348e80dc36f7}",
   "sourcePort": "output0",
   "targetUuid": "{fb76f804-fd70-4431-9209-d431b4625e73}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "alphaGain",
   "targetUuid": "{fb76f804-fd70-4431-9209-d431b4625e73}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3d7ca4d8-e737-480f-b98b-eafd19f68673}",
   "sourcePort": "shader",
   "targetUuid": "{8d3e4335-af3f-44e2-b1f1-b3617beafc34}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "normalScaling",
   "targetUuid": "{849d9ab4-0116-4b6f-9ec7-13cd8f84f6f6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d03a87b6-ca40-4f6f-8678-571a31c2a0ea}",
   "sourcePort": "color_out",
   "targetUuid": "{3d7ca4d8-e737-480f-b98b-eafd19f68673}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{d03a87b6-ca40-4f6f-8678-571a31c2a0ea}",
   "sourcePort": "alpha_out",
   "targetUuid": "{3d7ca4d8-e737-480f-b98b-eafd19f68673}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{c2e0acb3-ac40-4a1e-80e9-0de68d26d7f2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c2e0acb3-ac40-4a1e-80e9-0de68d26d7f2}",
   "sourcePort": "output0",
   "targetUuid": "{91df3c9d-bad4-4c7b-bfa7-9a2a91ae49d6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3a8f7889-7008-4ee0-a837-875de2c961f4}",
   "sourcePort": "output0",
   "targetUuid": "{9d21cd42-87f8-4ac6-8e4b-80f46d85bad6}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{9d21cd42-87f8-4ac6-8e4b-80f46d85bad6}",
   "sourcePort": "result",
   "targetUuid": "{754db517-c01e-4bba-8fca-e82cb9fb26b6}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{754db517-c01e-4bba-8fca-e82cb9fb26b6}",
   "sourcePort": "mixed",
   "targetUuid": "{ccebe857-950c-415f-b52e-b96c5ff496a5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{eb95cd64-5962-4fbf-8287-c818f0c6c43b}",
   "sourcePort": "output",
   "targetUuid": "{ba6c8932-aa05-4e90-8d0a-aeefc0882244}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{ba6c8932-aa05-4e90-8d0a-aeefc0882244}",
   "sourcePort": "z",
   "targetUuid": "{3a8f7889-7008-4ee0-a837-875de2c961f4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{55bad1f7-ebd5-4d9a-a596-756f3b970af7}",
   "sourcePort": "output0",
   "targetUuid": "{ccebe857-950c-415f-b52e-b96c5ff496a5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ccebe857-950c-415f-b52e-b96c5ff496a5}",
   "sourcePort": "output0",
   "targetUuid": "{d03a87b6-ca40-4f6f-8678-571a31c2a0ea}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{754db517-c01e-4bba-8fca-e82cb9fb26b6}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{ff1b38bf-9954-472e-9886-4cc6f1b0a7de}",
   "sourcePort": "uv",
   "targetUuid": "{c5b5ae79-2cc3-4776-9c1c-c722db804b75}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{81298cb9-7426-418d-9505-3d89c5d934ec}",
   "sourcePort": "color",
   "targetUuid": "{1d152ebc-d919-45e5-9108-eb56e65aa54a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{81298cb9-7426-418d-9505-3d89c5d934ec}",
   "sourcePort": "alpha",
   "targetUuid": "{0c7b5733-c0f9-4127-92d4-348e80dc36f7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5e648ce3-9ac0-4ecb-9666-6b14c6a09a14}",
   "sourcePort": "output0",
   "targetUuid": "{81298cb9-7426-418d-9505-3d89c5d934ec}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{140bda59-8848-41d2-9236-e853f0e94673}",
   "sourcePort": "output0",
   "targetUuid": "{92e3a89d-8df2-4239-a196-48c992c49a72}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c5b5ae79-2cc3-4776-9c1c-c722db804b75}",
   "sourcePort": "color",
   "targetUuid": "{140bda59-8848-41d2-9236-e853f0e94673}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fb76f804-fd70-4431-9209-d431b4625e73}",
   "sourcePort": "output0",
   "targetUuid": "{59d9e91f-d0cd-405c-be97-2c8502c65c3b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{59d9e91f-d0cd-405c-be97-2c8502c65c3b}",
   "sourcePort": "output0",
   "targetUuid": "{d03a87b6-ca40-4f6f-8678-571a31c2a0ea}",
   "targetPort": "alpha"
  },
  {
   "layers": [],
   "sourceUuid": "{c5b5ae79-2cc3-4776-9c1c-c722db804b75}",
   "sourcePort": "alpha",
   "targetUuid": "{59d9e91f-d0cd-405c-be97-2c8502c65c3b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{92e3a89d-8df2-4239-a196-48c992c49a72}",
   "sourcePort": "output0",
   "targetUuid": "{8f92c927-e155-4e3e-8d4f-31bbfdccdf5f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "normalMapGain",
   "targetUuid": "{8f92c927-e155-4e3e-8d4f-31bbfdccdf5f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8f92c927-e155-4e3e-8d4f-31bbfdccdf5f}",
   "sourcePort": "output0",
   "targetUuid": "{c2e0acb3-ac40-4a1e-80e9-0de68d26d7f2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{98f5081f-d7a7-4b74-b504-d331e2472b2f}",
   "sourcePort": "output0",
   "targetUuid": "{eb95cd64-5962-4fbf-8287-c818f0c6c43b}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{999cd032-ab91-441d-9e9b-299d04705364}",
   "sourcePort": "transformed",
   "targetUuid": "{94232472-eb22-401c-9fb3-5e148e7e6a49}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{999cd032-ab91-441d-9e9b-299d04705364}",
   "sourcePort": "transformed",
   "targetUuid": "{f9c97b54-89a2-4912-b008-712f31133633}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{72340ae6-f385-40f2-9a12-989c1381fe52}",
   "sourcePort": "value",
   "targetUuid": "{f9c97b54-89a2-4912-b008-712f31133633}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4ceb65cf-f6ad-4f9b-ad10-641473ab0b15}",
   "sourcePort": "value",
   "targetUuid": "{dbb591f0-bea2-420a-8ca4-f7d1874185fb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{bcc8a2e1-ec28-4660-be1b-22db0839e265}",
   "sourcePort": "value",
   "targetUuid": "{4e78e7f5-5f62-4b6f-bffe-ebf4dfce02c5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{59f30f6d-a5f5-46bb-88aa-a80453961fcc}",
   "sourcePort": "value",
   "targetUuid": "{5e648ce3-9ac0-4ecb-9666-6b14c6a09a14}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{795ccf35-cbff-4f5a-a93a-91834467a17b}",
   "sourcePort": "value",
   "targetUuid": "{754db517-c01e-4bba-8fca-e82cb9fb26b6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4803c73a-05af-48c8-884e-6971a7f2938a}",
   "sourcePort": "value",
   "targetUuid": "{9d21cd42-87f8-4ac6-8e4b-80f46d85bad6}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{e5806e03-1b7d-4f35-8466-5414a21bf53d}",
   "sourcePort": "value",
   "targetUuid": "{9d21cd42-87f8-4ac6-8e4b-80f46d85bad6}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{28ed9f41-01cd-4220-8fe3-bc8fb3a96b07}",
   "sourcePort": "value",
   "targetUuid": "{3a8f7889-7008-4ee0-a837-875de2c961f4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{219ddeed-17f0-4596-aa03-a4d6548651f5}",
   "sourcePort": "value",
   "targetUuid": "{92e3a89d-8df2-4239-a196-48c992c49a72}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c4b498d7-9ec1-44ec-9ca8-728d6ad6ce1d}",
   "sourcePort": "value",
   "targetUuid": "{140bda59-8848-41d2-9236-e853f0e94673}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a84a0832-bd63-4a7d-9615-f42fe919e918}",
   "sourcePort": "value",
   "targetUuid": "{91df3c9d-bad4-4c7b-bfa7-9a2a91ae49d6}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{eb95cd64-5962-4fbf-8287-c818f0c6c43b}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{81298cb9-7426-418d-9505-3d89c5d934ec}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{81298cb9-7426-418d-9505-3d89c5d934ec}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "usesNormalMap",
   "targetUuid": "{c5b5ae79-2cc3-4776-9c1c-c722db804b75}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{be17dffa-1c5a-4edf-b3c5-dec280018f5f}",
   "sourcePort": "normalMap",
   "targetUuid": "{c5b5ae79-2cc3-4776-9c1c-c722db804b75}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "parameters": {
    "conversionMatrix": "viewMatrix"
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = ($conversionMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($conversionMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = ($conversionMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "varying highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "varying highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "layout(location = 3) in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "layout(location = 2) in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "varying highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);highp vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in highp vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "in vec2 texCoord;",
      "#else",
      "const vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "#ifdef LAYER_hasTexCoord",
      "layout(location = 0) in vec2 texCoord;",
      "#else",
      "const lowp vec2 texCoord = vec2(0.0);",
      "#endif",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "    float yUpInNDC;",
      "    float yUpInFBO;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);vec3 $normal = worldNormal;"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "EQUI_RECT_ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "position"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, equiRectangular($position)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "NORMAL_MAP": {
   "inputs": [
    "strength",
    "color"
   ],
   "outputs": [
    "tangentSpaceNormal",
    "normal"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "varying highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "varying highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in highp vec3 worldNormal;",
      "#else",
      "const lowp vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in highp vec4 worldTangent;",
      "#else",
      "const lowp vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); highp vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "#ifdef LAYER_hasVertexNormal",
      "layout(location = 3) in vec3 worldNormal;",
      "#else",
      "const vec3 worldNormal = vec3(0.0);",
      "#endif",
      "#ifdef LAYER_hasVertexTangent",
      "layout(location = 2) in vec4 worldTangent;",
      "#else",
      "const vec4 worldTangent = vec4(0.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $tangentSpaceNormal = $color.xyz * vec3(2) - vec3(1); vec3 $normal = normalize(mix(worldNormal, normalize($tangentSpaceNormal.x * worldTangent.xyz + $tangentSpaceNormal.y * cross(worldNormal, worldTangent.xyz) + $tangentSpaceNormal.z * worldNormal), max($strength, 0.0)));"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "varying highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in highp vec4 color;",
      "#else",
      "const lowp vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "#ifdef LAYER_hasVertexColor",
      "layout(location = 1) in vec4 color;",
      "#else",
      "const vec4 color = vec4(1.0);",
      "#endif",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "gltfYUp",
    "usesReflectionMap",
    "reflectionMap",
    "normalMapGain",
    "normalScaling",
    "normalDisturb",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "reflectionGain",
    "innerAlpha",
    "outerAlpha",
    "alphaGain",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "usesNormalMap",
    "normalMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float normalMapGain;\n    highp float reflectionGain;\n    highp float innerAlpha;\n    highp float outerAlpha;\n    highp float alphaGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D reflectionMap;\nuniform highp sampler2D normalMap;\n"
     ],
     "substitution": "highp sampler2D $reflectionMap = reflectionMap;highp sampler2D $normalMap = normalMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $normalMapGain = properties.normalMapGain;highp float $reflectionGain = properties.reflectionGain;highp float $innerAlpha = properties.innerAlpha;highp float $outerAlpha = properties.outerAlpha;highp float $alphaGain = properties.alphaGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float innerAlpha;\n    float outerAlpha;\n    float alphaGain;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    bool usesNormalMap;\n};\nuniform MaterialProperties properties;\nuniform sampler2D reflectionMap;\nuniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $reflectionMap = reflectionMap;sampler2D $normalMap = normalMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $innerAlpha = properties.innerAlpha;float $outerAlpha = properties.outerAlpha;float $alphaGain = properties.alphaGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;bool $usesNormalMap = properties.usesNormalMap;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 postHemiFilter;\n    float normalMapGain;\n    float reflectionGain;\n    float innerAlpha;\n    float outerAlpha;\n    float alphaGain;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    bool usesNormalMap;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D reflectionMap;\nlayout(binding = 4) uniform sampler2D normalMap;\n"
     ],
     "substitution": "sampler2D $reflectionMap = reflectionMap;sampler2D $normalMap = normalMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $normalMapGain = properties.normalMapGain;float $reflectionGain = properties.reflectionGain;float $innerAlpha = properties.innerAlpha;float $outerAlpha = properties.outerAlpha;float $alphaGain = properties.alphaGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;bool $usesNormalMap = properties.usesNormalMap;"
    }
   ]
  }
 }
}