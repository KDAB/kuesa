{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0640c538-f014-47bc-ab81-e261b8847256}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c8d43054-7355-4983-a2a6-e06985c489a4}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{a5c01709-0d88-4255-a4fc-98d50b24d200}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c01ebeb2-08d0-4d16-88ac-037fca30feba}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{736b8262-326d-462f-99b3-7e831f0c767a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7635a8d0-5d6e-414d-8a1d-22e2988d2501}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{353c81e8-b896-4bd2-8dae-a57f56bbfb37}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dffb17d4-8ccc-4202-983d-5fa870c66281}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{014eeaee-14c8-4ddb-85e2-95696a7262b9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e7b7ac1b-6d6a-4631-bdac-463f96bc3890}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{12734c84-0dea-4035-973a-c867626070b8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{f470b9a0-ec0b-43ff-ab59-64b6fd09953e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f74c952d-afd0-45c3-b5e5-607d65df7d70}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3485dd8c-5b39-4acd-beef-d78c55d702b3}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ef859c2f-f76e-4232-a9e6-1aa26e9f4ae0}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{f16bb32f-56b2-4588-8e70-d5cfaa9a07f0}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7bb1983f-4558-44d4-bd9f-135034b5956e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{2bbe8184-093c-462f-a5fd-61f1cbba13cf}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7f89f270-3856-4296-b2ed-8e68cc5ce45a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{a06120e2-0966-4dcc-b87d-763ff991e97d}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{b878349d-8cfa-4efa-b9c9-42f99a142062}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{ba6ba6e9-b555-4b87-8320-8684fd7fc3ee}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{1a2fb9ae-bdd8-45a5-8126-9099f0efae1d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{41500d52-0e4c-4613-a3b5-f6d1c6d2679b}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{67c249ec-cbbf-4266-9ca7-854f9ff2a130}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{37867153-f13c-4afe-b4e1-20fb472edd18}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{6a94b896-0580-460d-b453-8dc4e679d77b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1a559186-baa6-45a0-9f07-9613bf2e654a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5af4422d-5a83-4c00-a13c-652c16e2eb29}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{f0013c03-2ace-4b08-a0c3-2d73c1b85fad}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{9f18befb-433b-4157-9244-cc252598a9fc}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{d9e7e42f-7da6-444b-a148-15bf3bc65f79}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bd34ea1f-baad-4c29-bbb0-a497c1f64574}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{02ba96a5-de85-42ea-b042-4c88743ba9a6}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d25ddb57-91e7-4735-8d7a-23d9aeeb8442}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0bcd784e-8caf-44d0-8d0a-65a4ebda4e71}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{73d52123-95a6-4725-9903-d6e0c39d926d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{e817703e-d616-44e7-9910-245843c33dfb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{9f7aa8f7-7ad7-4a6f-984e-f449515f4ee5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{3eeeff7d-8095-424f-9fed-a4af915d7719}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{6cc9519b-e12e-46a2-a56d-0d19d33febee}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{44072af3-2423-490e-bae7-004e0fe56a12}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e4af947c-b33b-4683-94ba-ebfd2e0a1ae8}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{fb8705c2-174d-4f36-bd19-be35390a15b6}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{1a2fb9ae-bdd8-45a5-8126-9099f0efae1d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{1a2fb9ae-bdd8-45a5-8126-9099f0efae1d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{a5c01709-0d88-4255-a4fc-98d50b24d200}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{a5c01709-0d88-4255-a4fc-98d50b24d200}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{1a2fb9ae-bdd8-45a5-8126-9099f0efae1d}",
   "sourcePort": "mixed",
   "targetUuid": "{ef859c2f-f76e-4232-a9e6-1aa26e9f4ae0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a5c01709-0d88-4255-a4fc-98d50b24d200}",
   "sourcePort": "mixed",
   "targetUuid": "{c01ebeb2-08d0-4d16-88ac-037fca30feba}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ef859c2f-f76e-4232-a9e6-1aa26e9f4ae0}",
   "sourcePort": "output0",
   "targetUuid": "{c8d43054-7355-4983-a2a6-e06985c489a4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c8d43054-7355-4983-a2a6-e06985c489a4}",
   "sourcePort": "output0",
   "targetUuid": "{0640c538-f014-47bc-ab81-e261b8847256}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{736b8262-326d-462f-99b3-7e831f0c767a}",
   "sourcePort": "output0",
   "targetUuid": "{0640c538-f014-47bc-ab81-e261b8847256}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0640c538-f014-47bc-ab81-e261b8847256}",
   "sourcePort": "output0",
   "targetUuid": "{5af4422d-5a83-4c00-a13c-652c16e2eb29}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{c8d43054-7355-4983-a2a6-e06985c489a4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{736b8262-326d-462f-99b3-7e831f0c767a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c01ebeb2-08d0-4d16-88ac-037fca30feba}",
   "sourcePort": "output0",
   "targetUuid": "{736b8262-326d-462f-99b3-7e831f0c767a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f470b9a0-ec0b-43ff-ab59-64b6fd09953e}",
   "sourcePort": "normal",
   "targetUuid": "{12734c84-0dea-4035-973a-c867626070b8}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{12734c84-0dea-4035-973a-c867626070b8}",
   "sourcePort": "transformed",
   "targetUuid": "{e7b7ac1b-6d6a-4631-bdac-463f96bc3890}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e7b7ac1b-6d6a-4631-bdac-463f96bc3890}",
   "sourcePort": "output0",
   "targetUuid": "{014eeaee-14c8-4ddb-85e2-95696a7262b9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{014eeaee-14c8-4ddb-85e2-95696a7262b9}",
   "sourcePort": "output0",
   "targetUuid": "{dffb17d4-8ccc-4202-983d-5fa870c66281}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f74c952d-afd0-45c3-b5e5-607d65df7d70}",
   "sourcePort": "output0",
   "targetUuid": "{dffb17d4-8ccc-4202-983d-5fa870c66281}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{dffb17d4-8ccc-4202-983d-5fa870c66281}",
   "sourcePort": "output0",
   "targetUuid": "{353c81e8-b896-4bd2-8dae-a57f56bbfb37}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "normalScaling",
   "targetUuid": "{014eeaee-14c8-4ddb-85e2-95696a7262b9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{f74c952d-afd0-45c3-b5e5-607d65df7d70}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7635a8d0-5d6e-414d-8a1d-22e2988d2501}",
   "sourcePort": "output0",
   "targetUuid": "{bd34ea1f-baad-4c29-bbb0-a497c1f64574}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{353c81e8-b896-4bd2-8dae-a57f56bbfb37}",
   "sourcePort": "output0",
   "targetUuid": "{7635a8d0-5d6e-414d-8a1d-22e2988d2501}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2bbe8184-093c-462f-a5fd-61f1cbba13cf}",
   "sourcePort": "z",
   "targetUuid": "{7bb1983f-4558-44d4-bd9f-135034b5956e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7bb1983f-4558-44d4-bd9f-135034b5956e}",
   "sourcePort": "output0",
   "targetUuid": "{7f89f270-3856-4296-b2ed-8e68cc5ce45a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7bb1983f-4558-44d4-bd9f-135034b5956e}",
   "sourcePort": "output0",
   "targetUuid": "{7f89f270-3856-4296-b2ed-8e68cc5ce45a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7f89f270-3856-4296-b2ed-8e68cc5ce45a}",
   "sourcePort": "output0",
   "targetUuid": "{1a2fb9ae-bdd8-45a5-8126-9099f0efae1d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{7f89f270-3856-4296-b2ed-8e68cc5ce45a}",
   "sourcePort": "output0",
   "targetUuid": "{a5c01709-0d88-4255-a4fc-98d50b24d200}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{353c81e8-b896-4bd2-8dae-a57f56bbfb37}",
   "sourcePort": "output0",
   "targetUuid": "{2bbe8184-093c-462f-a5fd-61f1cbba13cf}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{ba6ba6e9-b555-4b87-8320-8684fd7fc3ee}",
   "sourcePort": "color",
   "targetUuid": "{b878349d-8cfa-4efa-b9c9-42f99a142062}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b878349d-8cfa-4efa-b9c9-42f99a142062}",
   "sourcePort": "mixed",
   "targetUuid": "{3485dd8c-5b39-4acd-beef-d78c55d702b3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{b878349d-8cfa-4efa-b9c9-42f99a142062}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "postGain",
   "targetUuid": "{3485dd8c-5b39-4acd-beef-d78c55d702b3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3485dd8c-5b39-4acd-beef-d78c55d702b3}",
   "sourcePort": "output0",
   "targetUuid": "{5af4422d-5a83-4c00-a13c-652c16e2eb29}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{f16bb32f-56b2-4588-8e70-d5cfaa9a07f0}",
   "sourcePort": "color",
   "targetUuid": "{c01ebeb2-08d0-4d16-88ac-037fca30feba}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6a94b896-0580-460d-b453-8dc4e679d77b}",
   "sourcePort": "normal",
   "targetUuid": "{37867153-f13c-4afe-b4e1-20fb472edd18}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{37867153-f13c-4afe-b4e1-20fb472edd18}",
   "sourcePort": "z",
   "targetUuid": "{67c249ec-cbbf-4266-9ca7-854f9ff2a130}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{67c249ec-cbbf-4266-9ca7-854f9ff2a130}",
   "sourcePort": "output0",
   "targetUuid": "{41500d52-0e4c-4613-a3b5-f6d1c6d2679b}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{41500d52-0e4c-4613-a3b5-f6d1c6d2679b}",
   "sourcePort": "result",
   "targetUuid": "{f0013c03-2ace-4b08-a0c3-2d73c1b85fad}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{f0013c03-2ace-4b08-a0c3-2d73c1b85fad}",
   "sourcePort": "mixed",
   "targetUuid": "{1a559186-baa6-45a0-9f07-9613bf2e654a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5af4422d-5a83-4c00-a13c-652c16e2eb29}",
   "sourcePort": "output0",
   "targetUuid": "{1a559186-baa6-45a0-9f07-9613bf2e654a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1a559186-baa6-45a0-9f07-9613bf2e654a}",
   "sourcePort": "output0",
   "targetUuid": "{d9e7e42f-7da6-444b-a148-15bf3bc65f79}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{f0013c03-2ace-4b08-a0c3-2d73c1b85fad}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{d9e7e42f-7da6-444b-a148-15bf3bc65f79}",
   "sourcePort": "shader",
   "targetUuid": "{9f18befb-433b-4157-9244-cc252598a9fc}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{a06120e2-0966-4dcc-b87d-763ff991e97d}",
   "sourcePort": "uv",
   "targetUuid": "{f16bb32f-56b2-4588-8e70-d5cfaa9a07f0}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{02ba96a5-de85-42ea-b042-4c88743ba9a6}",
   "sourcePort": "color",
   "targetUuid": "{ef859c2f-f76e-4232-a9e6-1aa26e9f4ae0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{bd34ea1f-baad-4c29-bbb0-a497c1f64574}",
   "sourcePort": "output0",
   "targetUuid": "{02ba96a5-de85-42ea-b042-4c88743ba9a6}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{a06120e2-0966-4dcc-b87d-763ff991e97d}",
   "sourcePort": "reflection",
   "targetUuid": "{02ba96a5-de85-42ea-b042-4c88743ba9a6}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{d25ddb57-91e7-4735-8d7a-23d9aeeb8442}",
   "sourcePort": "value",
   "targetUuid": "{7635a8d0-5d6e-414d-8a1d-22e2988d2501}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0bcd784e-8caf-44d0-8d0a-65a4ebda4e71}",
   "sourcePort": "value",
   "targetUuid": "{e7b7ac1b-6d6a-4631-bdac-463f96bc3890}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{73d52123-95a6-4725-9903-d6e0c39d926d}",
   "sourcePort": "value",
   "targetUuid": "{f74c952d-afd0-45c3-b5e5-607d65df7d70}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e817703e-d616-44e7-9910-245843c33dfb}",
   "sourcePort": "value",
   "targetUuid": "{7bb1983f-4558-44d4-bd9f-135034b5956e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9f7aa8f7-7ad7-4a6f-984e-f449515f4ee5}",
   "sourcePort": "value",
   "targetUuid": "{b878349d-8cfa-4efa-b9c9-42f99a142062}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3eeeff7d-8095-424f-9fed-a4af915d7719}",
   "sourcePort": "value",
   "targetUuid": "{41500d52-0e4c-4613-a3b5-f6d1c6d2679b}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{6cc9519b-e12e-46a2-a56d-0d19d33febee}",
   "sourcePort": "value",
   "targetUuid": "{41500d52-0e4c-4613-a3b5-f6d1c6d2679b}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{44072af3-2423-490e-bae7-004e0fe56a12}",
   "sourcePort": "value",
   "targetUuid": "{67c249ec-cbbf-4266-9ca7-854f9ff2a130}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e4af947c-b33b-4683-94ba-ebfd2e0a1ae8}",
   "sourcePort": "value",
   "targetUuid": "{f0013c03-2ace-4b08-a0c3-2d73c1b85fad}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fb8705c2-174d-4f36-bd19-be35390a15b6}",
   "sourcePort": "value",
   "targetUuid": "{bd34ea1f-baad-4c29-bbb0-a497c1f64574}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{f16bb32f-56b2-4588-8e70-d5cfaa9a07f0}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{f16bb32f-56b2-4588-8e70-d5cfaa9a07f0}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{02ba96a5-de85-42ea-b042-4c88743ba9a6}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{02ba96a5-de85-42ea-b042-4c88743ba9a6}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{3fae77b9-b32f-4299-ae62-bf4cc5764750}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{02ba96a5-de85-42ea-b042-4c88743ba9a6}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}