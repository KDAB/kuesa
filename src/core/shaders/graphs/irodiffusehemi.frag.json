{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0bff9d4b-8ed4-4f73-890c-96dd9abf6364}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c1fb9c69-da17-45cc-b502-850ac5a38f13}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{da9e75fd-2538-491c-85b1-1a1591d45810}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{cc618c0a-59ec-42ff-9ec6-3910cdef9448}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fd22538a-2e8e-4307-a6dd-3b727fc58caf}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{2029301a-3092-4220-b723-c65217a4df7e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{cf1b13a2-13d6-40a2-a5d3-a92252279e53}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e2072e5e-89ec-4123-a304-a66eb8e600d8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b66a83b7-d554-420e-ae27-55f06764b251}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{0c183c90-1cbb-480a-ad86-ac70fc0cf272}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{82131e60-9d67-4fb9-84ea-239e94427238}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{409985cc-0b0c-4d10-b769-6d8105815848}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7be0d4cb-8bff-4008-9ee3-a01436914d8c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{19efd57c-19bd-4a3c-b3a6-f74f9fbccbd8}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b438b26a-70c8-4774-b429-4fa15bf6c877}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{872e072d-4ade-4b69-a4e7-74a64f3c09b6}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{761588cb-37d1-476a-907b-334d20024f6c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{63a96ed8-150f-46b1-b6b7-6685755d690d}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{9fb2b7a7-ef42-4aa0-ba48-f14cc41488aa}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{e88f2b13-fede-4624-8fcf-dac4edd6b3fa}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{be02852f-5fa5-44d3-ace7-56872bdf892a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{6d483ea3-ac1b-42cc-8222-2838a61cae70}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6a83117c-8e90-4dcc-bec6-bd85f1b9bc14}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{cf1230e8-f470-4231-ad88-8d50515ef7c0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fceb526e-c6ca-4883-a15c-602bc5f4b492}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{802fb571-b864-432c-820e-9bf566c85d61}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{1400bbb2-41cb-4677-ad0c-e5ae7ea529ed}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{28e5e650-4ee5-4f9c-95de-48d701a12358}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{78373e93-b08b-4e89-8750-3de1af01c92a}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{f06e1ebe-fb6b-40c5-bd24-58af6bee221d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{377ab887-1467-48bf-aa76-45d6986d13e9}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{a4ab9d6d-1a7f-4869-b31d-658354a05f34}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{4898820a-c976-4f91-8c84-d1650af17b7c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{f1d640eb-95b5-4c2d-994b-c0fed590fbae}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{7b130e70-8cef-4d72-8eab-38c01bdf6e4a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{3b8cbd34-5245-4f11-bdf0-cf04bfc7f4eb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{6e3caea6-91cb-4e30-a037-020ab06ae624}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{58d498ec-156f-4132-9697-587cf15a76df}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d2ea5756-f089-4bb6-83ac-48641bdea774}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{ee84b6b2-8e20-4ef2-952b-24f8e10ceee7}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{3ca9cab2-ab3b-4249-b03a-b27f0077e154}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{f4302638-3de0-4738-9acf-0821140c0454}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{a58604ff-ff7f-4807-8a25-ea359833ee2a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{f8d5c8a5-5b9c-4038-983f-116a94c1ab90}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{2d700eca-9a8c-44ad-a980-6d7b572b47bf}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{f6b83f42-bd2f-4b9e-a4c5-ab192ba58b1e}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{be02852f-5fa5-44d3-ace7-56872bdf892a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{be02852f-5fa5-44d3-ace7-56872bdf892a}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{da9e75fd-2538-491c-85b1-1a1591d45810}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{da9e75fd-2538-491c-85b1-1a1591d45810}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{be02852f-5fa5-44d3-ace7-56872bdf892a}",
   "sourcePort": "mixed",
   "targetUuid": "{19efd57c-19bd-4a3c-b3a6-f74f9fbccbd8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{da9e75fd-2538-491c-85b1-1a1591d45810}",
   "sourcePort": "mixed",
   "targetUuid": "{377ab887-1467-48bf-aa76-45d6986d13e9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{19efd57c-19bd-4a3c-b3a6-f74f9fbccbd8}",
   "sourcePort": "output0",
   "targetUuid": "{c1fb9c69-da17-45cc-b502-850ac5a38f13}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c1fb9c69-da17-45cc-b502-850ac5a38f13}",
   "sourcePort": "output0",
   "targetUuid": "{0bff9d4b-8ed4-4f73-890c-96dd9abf6364}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cc618c0a-59ec-42ff-9ec6-3910cdef9448}",
   "sourcePort": "output0",
   "targetUuid": "{0bff9d4b-8ed4-4f73-890c-96dd9abf6364}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0bff9d4b-8ed4-4f73-890c-96dd9abf6364}",
   "sourcePort": "output0",
   "targetUuid": "{802fb571-b864-432c-820e-9bf566c85d61}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{c1fb9c69-da17-45cc-b502-850ac5a38f13}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{cc618c0a-59ec-42ff-9ec6-3910cdef9448}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{377ab887-1467-48bf-aa76-45d6986d13e9}",
   "sourcePort": "output0",
   "targetUuid": "{cc618c0a-59ec-42ff-9ec6-3910cdef9448}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{82131e60-9d67-4fb9-84ea-239e94427238}",
   "sourcePort": "normal",
   "targetUuid": "{0c183c90-1cbb-480a-ad86-ac70fc0cf272}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{0c183c90-1cbb-480a-ad86-ac70fc0cf272}",
   "sourcePort": "transformed",
   "targetUuid": "{b66a83b7-d554-420e-ae27-55f06764b251}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b66a83b7-d554-420e-ae27-55f06764b251}",
   "sourcePort": "output0",
   "targetUuid": "{e2072e5e-89ec-4123-a304-a66eb8e600d8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e2072e5e-89ec-4123-a304-a66eb8e600d8}",
   "sourcePort": "output0",
   "targetUuid": "{cf1b13a2-13d6-40a2-a5d3-a92252279e53}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{409985cc-0b0c-4d10-b769-6d8105815848}",
   "sourcePort": "output0",
   "targetUuid": "{cf1b13a2-13d6-40a2-a5d3-a92252279e53}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{cf1b13a2-13d6-40a2-a5d3-a92252279e53}",
   "sourcePort": "output0",
   "targetUuid": "{2029301a-3092-4220-b723-c65217a4df7e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "normalScaling",
   "targetUuid": "{f1d640eb-95b5-4c2d-994b-c0fed590fbae}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{409985cc-0b0c-4d10-b769-6d8105815848}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fd22538a-2e8e-4307-a6dd-3b727fc58caf}",
   "sourcePort": "output0",
   "targetUuid": "{28e5e650-4ee5-4f9c-95de-48d701a12358}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2029301a-3092-4220-b723-c65217a4df7e}",
   "sourcePort": "output0",
   "targetUuid": "{fd22538a-2e8e-4307-a6dd-3b727fc58caf}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{872e072d-4ade-4b69-a4e7-74a64f3c09b6}",
   "sourcePort": "z",
   "targetUuid": "{b438b26a-70c8-4774-b429-4fa15bf6c877}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b438b26a-70c8-4774-b429-4fa15bf6c877}",
   "sourcePort": "output0",
   "targetUuid": "{761588cb-37d1-476a-907b-334d20024f6c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b438b26a-70c8-4774-b429-4fa15bf6c877}",
   "sourcePort": "output0",
   "targetUuid": "{761588cb-37d1-476a-907b-334d20024f6c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{761588cb-37d1-476a-907b-334d20024f6c}",
   "sourcePort": "output0",
   "targetUuid": "{be02852f-5fa5-44d3-ace7-56872bdf892a}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{761588cb-37d1-476a-907b-334d20024f6c}",
   "sourcePort": "output0",
   "targetUuid": "{da9e75fd-2538-491c-85b1-1a1591d45810}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{2029301a-3092-4220-b723-c65217a4df7e}",
   "sourcePort": "output0",
   "targetUuid": "{872e072d-4ade-4b69-a4e7-74a64f3c09b6}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{e88f2b13-fede-4624-8fcf-dac4edd6b3fa}",
   "sourcePort": "color",
   "targetUuid": "{9fb2b7a7-ef42-4aa0-ba48-f14cc41488aa}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{9fb2b7a7-ef42-4aa0-ba48-f14cc41488aa}",
   "sourcePort": "mixed",
   "targetUuid": "{7be0d4cb-8bff-4008-9ee3-a01436914d8c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{9fb2b7a7-ef42-4aa0-ba48-f14cc41488aa}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "postGain",
   "targetUuid": "{7be0d4cb-8bff-4008-9ee3-a01436914d8c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7be0d4cb-8bff-4008-9ee3-a01436914d8c}",
   "sourcePort": "output0",
   "targetUuid": "{802fb571-b864-432c-820e-9bf566c85d61}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7b130e70-8cef-4d72-8eab-38c01bdf6e4a}",
   "sourcePort": "normal",
   "targetUuid": "{3b8cbd34-5245-4f11-bdf0-cf04bfc7f4eb}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{cf1230e8-f470-4231-ad88-8d50515ef7c0}",
   "sourcePort": "z",
   "targetUuid": "{6a83117c-8e90-4dcc-bec6-bd85f1b9bc14}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{6a83117c-8e90-4dcc-bec6-bd85f1b9bc14}",
   "sourcePort": "output0",
   "targetUuid": "{6d483ea3-ac1b-42cc-8222-2838a61cae70}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{6d483ea3-ac1b-42cc-8222-2838a61cae70}",
   "sourcePort": "result",
   "targetUuid": "{1400bbb2-41cb-4677-ad0c-e5ae7ea529ed}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{1400bbb2-41cb-4677-ad0c-e5ae7ea529ed}",
   "sourcePort": "mixed",
   "targetUuid": "{fceb526e-c6ca-4883-a15c-602bc5f4b492}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{802fb571-b864-432c-820e-9bf566c85d61}",
   "sourcePort": "output0",
   "targetUuid": "{fceb526e-c6ca-4883-a15c-602bc5f4b492}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{1400bbb2-41cb-4677-ad0c-e5ae7ea529ed}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{78373e93-b08b-4e89-8750-3de1af01c92a}",
   "sourcePort": "color",
   "targetUuid": "{19efd57c-19bd-4a3c-b3a6-f74f9fbccbd8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{28e5e650-4ee5-4f9c-95de-48d701a12358}",
   "sourcePort": "output0",
   "targetUuid": "{78373e93-b08b-4e89-8750-3de1af01c92a}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{63a96ed8-150f-46b1-b6b7-6685755d690d}",
   "sourcePort": "reflection",
   "targetUuid": "{78373e93-b08b-4e89-8750-3de1af01c92a}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{63a96ed8-150f-46b1-b6b7-6685755d690d}",
   "sourcePort": "uv",
   "targetUuid": "{f06e1ebe-fb6b-40c5-bd24-58af6bee221d}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{f06e1ebe-fb6b-40c5-bd24-58af6bee221d}",
   "sourcePort": "color",
   "targetUuid": "{377ab887-1467-48bf-aa76-45d6986d13e9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fceb526e-c6ca-4883-a15c-602bc5f4b492}",
   "sourcePort": "output0",
   "targetUuid": "{4898820a-c976-4f91-8c84-d1650af17b7c}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{4898820a-c976-4f91-8c84-d1650af17b7c}",
   "sourcePort": "shader",
   "targetUuid": "{a4ab9d6d-1a7f-4869-b31d-658354a05f34}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{f1d640eb-95b5-4c2d-994b-c0fed590fbae}",
   "sourcePort": "output",
   "targetUuid": "{e2072e5e-89ec-4123-a304-a66eb8e600d8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3b8cbd34-5245-4f11-bdf0-cf04bfc7f4eb}",
   "sourcePort": "output",
   "targetUuid": "{cf1230e8-f470-4231-ad88-8d50515ef7c0}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{6e3caea6-91cb-4e30-a037-020ab06ae624}",
   "sourcePort": "value",
   "targetUuid": "{fd22538a-2e8e-4307-a6dd-3b727fc58caf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{58d498ec-156f-4132-9697-587cf15a76df}",
   "sourcePort": "value",
   "targetUuid": "{b66a83b7-d554-420e-ae27-55f06764b251}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d2ea5756-f089-4bb6-83ac-48641bdea774}",
   "sourcePort": "value",
   "targetUuid": "{409985cc-0b0c-4d10-b769-6d8105815848}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ee84b6b2-8e20-4ef2-952b-24f8e10ceee7}",
   "sourcePort": "value",
   "targetUuid": "{b438b26a-70c8-4774-b429-4fa15bf6c877}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3ca9cab2-ab3b-4249-b03a-b27f0077e154}",
   "sourcePort": "value",
   "targetUuid": "{9fb2b7a7-ef42-4aa0-ba48-f14cc41488aa}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f4302638-3de0-4738-9acf-0821140c0454}",
   "sourcePort": "value",
   "targetUuid": "{6d483ea3-ac1b-42cc-8222-2838a61cae70}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{a58604ff-ff7f-4807-8a25-ea359833ee2a}",
   "sourcePort": "value",
   "targetUuid": "{6d483ea3-ac1b-42cc-8222-2838a61cae70}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{f8d5c8a5-5b9c-4038-983f-116a94c1ab90}",
   "sourcePort": "value",
   "targetUuid": "{6a83117c-8e90-4dcc-bec6-bd85f1b9bc14}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2d700eca-9a8c-44ad-a980-6d7b572b47bf}",
   "sourcePort": "value",
   "targetUuid": "{1400bbb2-41cb-4677-ad0c-e5ae7ea529ed}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f6b83f42-bd2f-4b9e-a4c5-ab192ba58b1e}",
   "sourcePort": "value",
   "targetUuid": "{28e5e650-4ee5-4f9c-95de-48d701a12358}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{78373e93-b08b-4e89-8750-3de1af01c92a}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{78373e93-b08b-4e89-8750-3de1af01c92a}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{78373e93-b08b-4e89-8750-3de1af01c92a}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{f06e1ebe-fb6b-40c5-bd24-58af6bee221d}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{f06e1ebe-fb6b-40c5-bd24-58af6bee221d}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{f1d640eb-95b5-4c2d-994b-c0fed590fbae}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{4b896db8-d5b2-4029-bdf2-839d2006a9d9}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{3b8cbd34-5245-4f11-bdf0-cf04bfc7f4eb}",
   "targetPort": "gltfYUp"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "  };",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "layout(location = 0) out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "layout(location = 4) in vec3 worldPosition;",
      "layout(location = 3) in vec3 worldNormal;",
      "layout(location = 2) in vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "layout(location = 0) in vec2 texCoord;",
      "#endif",
      "#ifndef RV_UNIFORMS",
      "#define RV_UNIFORMS",
      "layout(std140, binding = 0) uniform qt3d_render_view_uniforms {",
      "    mat4 viewMatrix;",
      "    mat4 projectionMatrix;",
      "    mat4 viewProjectionMatrix;",
      "    mat4 inverseViewMatrix;",
      "    mat4 inverseProjectionMatrix;",
      "    mat4 inverseViewProjectionMatrix;",
      "    mat4 viewportMatrix;",
      "    mat4 inverseViewportMatrix;",
      "    vec4 textureTransformMatrix;",
      "    vec3 eyePosition;",
      "    float aspectRatio;",
      "    float gamma;",
      "    float exposure;",
      "    float time;",
      "  };",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "layout(location = 1) in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float reflectionGain;\n    highp float diffuseGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;\nuniform highp sampler2D reflectionMap;\nuniform highp sampler2D diffuseMap;\n"
     ],
     "substitution": "highp sampler2D $reflectionMap = reflectionMap;highp sampler2D $diffuseMap = diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $reflectionGain = properties.reflectionGain;highp float $diffuseGain = properties.diffuseGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float reflectionGain;\n    float diffuseGain;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;\nuniform sampler2D reflectionMap;\nuniform sampler2D diffuseMap;\n"
     ],
     "substitution": "sampler2D $reflectionMap = reflectionMap;sampler2D $diffuseMap = diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $reflectionGain = properties.reflectionGain;float $diffuseGain = properties.diffuseGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "RHI",
      "major": 1,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float reflectionGain;\n    float diffuseGain;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    bool gltfYUp;\n};\nlayout(std140, binding = 2) uniform MaterialPropertiesBlock { MaterialProperties properties; };\nlayout(binding = 3) uniform sampler2D reflectionMap;\nlayout(binding = 4) uniform sampler2D diffuseMap;\n"
     ],
     "substitution": "sampler2D $reflectionMap = reflectionMap;sampler2D $diffuseMap = diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $reflectionGain = properties.reflectionGain;float $diffuseGain = properties.diffuseGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;bool $gltfYUp = properties.gltfYUp;"
    }
   ]
  }
 }
}