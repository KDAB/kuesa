{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2bf7cd64-970d-4538-a540-6a1459d02304}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{eaa2a03c-44dc-47f2-b850-da21faf70f52}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{a2ac2bfe-35b9-4b6a-bb10-3f3b09df20c6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c7f7a1ff-1306-4a25-812f-a35f95cb1c9b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2f8d8242-4b7a-4f54-98f4-cee131d1403c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{d69607a1-eb53-4beb-bf45-048abd205ac0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d94342d6-5bd7-4f55-96d4-5275d544f15b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ef970c1f-2e0e-4042-ac6a-8930e7aebd86}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{904b9ccf-ac0b-4de4-8134-3a8228f9944e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{143611db-04c1-4d08-bc44-04345c90151c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a3426a0d-a594-4887-90ac-1c0e1fd12e59}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{796944f0-52dd-426e-a1e0-67dfb212f77c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9075d7b3-b944-4851-bf38-8eef9d364085}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dc9156be-09f2-4c10-87a0-a70d62b4beb4}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{06f46d92-3304-42db-b260-cd0d5a8e84c3}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{cd3c6ea3-2529-490c-806c-fecea53e8856}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{ea588c76-7b3f-4a22-b274-b41b18607aa8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{94756e79-a19b-4dfb-bcc0-6ddde9440a07}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{2420beff-693c-4279-8d01-4aa632c91339}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{1cd9c81c-ab1e-4d67-839d-087658703a56}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{9dfeab92-f684-454d-b4d0-4787d9faafe5}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{f7307ac5-8b3f-4b80-a572-fa06f2cd0113}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{20edef4b-96da-476d-9630-0fd1dec3b09e}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{0286a922-c3ca-4bbc-a239-014cb19d6043}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{80eabd5d-a860-4f5f-a6f5-a530c145260d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{fac0359e-0465-4741-a8be-5966d83302ef}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{c8ad735b-454e-4cc2-949d-25be3a946e4c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{0b8d824b-2845-49c0-bb47-f89352621c1b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{c52b62b4-8b42-4fac-a467-9370071d5c6c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{46507306-324f-446d-89d3-904cebaa7982}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{a1187d0d-346b-416b-941f-c35fc7dd5f53}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dc79a989-8e01-4f82-aa72-2bb7d87367cb}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{08802667-7133-4d89-ab56-50319ab71966}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4a1d3a7c-d864-472f-ba6d-5df8af7a8584}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{7545a2fc-ee54-4328-9d77-b1265c21d71e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{ff3f0191-e01d-473a-9c46-4ca0df7a6b01}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{394fc4dc-3e20-4f01-8b15-7e028ce52aa2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c12f9e24-a63a-412c-81ea-f7477d3ee3f0}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{766ad14f-6bff-4722-bda1-ae7b81d213f3}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{e6d08139-3c15-4f90-848a-2a72bc6f3a99}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{dd3df0bf-5c0b-4394-942f-733140b52ca0}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{ae43129e-2c01-4d2a-85e9-83c270d607b2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{daa0a5ff-004b-4b4a-9ae1-5d075acdc48f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0234e05f-2533-45e7-8d29-1d98933c4019}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{11105656-78eb-40b0-8026-e0cea3ffc6ec}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{3766fc43-f408-4612-b91b-82f3b7a4006d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{2c7cff94-9faf-4419-92d5-15a08b08720d}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{2420beff-693c-4279-8d01-4aa632c91339}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{2420beff-693c-4279-8d01-4aa632c91339}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{a2ac2bfe-35b9-4b6a-bb10-3f3b09df20c6}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{a2ac2bfe-35b9-4b6a-bb10-3f3b09df20c6}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{2420beff-693c-4279-8d01-4aa632c91339}",
   "sourcePort": "mixed",
   "targetUuid": "{9075d7b3-b944-4851-bf38-8eef9d364085}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a2ac2bfe-35b9-4b6a-bb10-3f3b09df20c6}",
   "sourcePort": "mixed",
   "targetUuid": "{80eabd5d-a860-4f5f-a6f5-a530c145260d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{9075d7b3-b944-4851-bf38-8eef9d364085}",
   "sourcePort": "output0",
   "targetUuid": "{eaa2a03c-44dc-47f2-b850-da21faf70f52}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{eaa2a03c-44dc-47f2-b850-da21faf70f52}",
   "sourcePort": "output0",
   "targetUuid": "{2bf7cd64-970d-4538-a540-6a1459d02304}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c7f7a1ff-1306-4a25-812f-a35f95cb1c9b}",
   "sourcePort": "output0",
   "targetUuid": "{2bf7cd64-970d-4538-a540-6a1459d02304}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2bf7cd64-970d-4538-a540-6a1459d02304}",
   "sourcePort": "output0",
   "targetUuid": "{9dfeab92-f684-454d-b4d0-4787d9faafe5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{eaa2a03c-44dc-47f2-b850-da21faf70f52}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{c7f7a1ff-1306-4a25-812f-a35f95cb1c9b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{80eabd5d-a860-4f5f-a6f5-a530c145260d}",
   "sourcePort": "output0",
   "targetUuid": "{c7f7a1ff-1306-4a25-812f-a35f95cb1c9b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{904b9ccf-ac0b-4de4-8134-3a8228f9944e}",
   "sourcePort": "transformed",
   "targetUuid": "{ef970c1f-2e0e-4042-ac6a-8930e7aebd86}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ef970c1f-2e0e-4042-ac6a-8930e7aebd86}",
   "sourcePort": "output0",
   "targetUuid": "{dc79a989-8e01-4f82-aa72-2bb7d87367cb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{dc79a989-8e01-4f82-aa72-2bb7d87367cb}",
   "sourcePort": "output0",
   "targetUuid": "{d94342d6-5bd7-4f55-96d4-5275d544f15b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a3426a0d-a594-4887-90ac-1c0e1fd12e59}",
   "sourcePort": "output0",
   "targetUuid": "{d94342d6-5bd7-4f55-96d4-5275d544f15b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d94342d6-5bd7-4f55-96d4-5275d544f15b}",
   "sourcePort": "output0",
   "targetUuid": "{d69607a1-eb53-4beb-bf45-048abd205ac0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{a3426a0d-a594-4887-90ac-1c0e1fd12e59}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{2f8d8242-4b7a-4f54-98f4-cee131d1403c}",
   "sourcePort": "output0",
   "targetUuid": "{20edef4b-96da-476d-9630-0fd1dec3b09e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d69607a1-eb53-4beb-bf45-048abd205ac0}",
   "sourcePort": "output0",
   "targetUuid": "{2f8d8242-4b7a-4f54-98f4-cee131d1403c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a1187d0d-346b-416b-941f-c35fc7dd5f53}",
   "sourcePort": "z",
   "targetUuid": "{dc9156be-09f2-4c10-87a0-a70d62b4beb4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{dc9156be-09f2-4c10-87a0-a70d62b4beb4}",
   "sourcePort": "output0",
   "targetUuid": "{06f46d92-3304-42db-b260-cd0d5a8e84c3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{dc9156be-09f2-4c10-87a0-a70d62b4beb4}",
   "sourcePort": "output0",
   "targetUuid": "{06f46d92-3304-42db-b260-cd0d5a8e84c3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{06f46d92-3304-42db-b260-cd0d5a8e84c3}",
   "sourcePort": "output0",
   "targetUuid": "{2420beff-693c-4279-8d01-4aa632c91339}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{06f46d92-3304-42db-b260-cd0d5a8e84c3}",
   "sourcePort": "output0",
   "targetUuid": "{a2ac2bfe-35b9-4b6a-bb10-3f3b09df20c6}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{d69607a1-eb53-4beb-bf45-048abd205ac0}",
   "sourcePort": "output0",
   "targetUuid": "{a1187d0d-346b-416b-941f-c35fc7dd5f53}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{94756e79-a19b-4dfb-bcc0-6ddde9440a07}",
   "sourcePort": "color",
   "targetUuid": "{ea588c76-7b3f-4a22-b274-b41b18607aa8}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{ea588c76-7b3f-4a22-b274-b41b18607aa8}",
   "sourcePort": "mixed",
   "targetUuid": "{796944f0-52dd-426e-a1e0-67dfb212f77c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{ea588c76-7b3f-4a22-b274-b41b18607aa8}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "postGain",
   "targetUuid": "{796944f0-52dd-426e-a1e0-67dfb212f77c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{796944f0-52dd-426e-a1e0-67dfb212f77c}",
   "sourcePort": "output0",
   "targetUuid": "{9dfeab92-f684-454d-b4d0-4787d9faafe5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c8ad735b-454e-4cc2-949d-25be3a946e4c}",
   "sourcePort": "normal",
   "targetUuid": "{0b8d824b-2845-49c0-bb47-f89352621c1b}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{46507306-324f-446d-89d3-904cebaa7982}",
   "sourcePort": "output0",
   "targetUuid": "{1cd9c81c-ab1e-4d67-839d-087658703a56}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{1cd9c81c-ab1e-4d67-839d-087658703a56}",
   "sourcePort": "result",
   "targetUuid": "{f7307ac5-8b3f-4b80-a572-fa06f2cd0113}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{f7307ac5-8b3f-4b80-a572-fa06f2cd0113}",
   "sourcePort": "mixed",
   "targetUuid": "{4a1d3a7c-d864-472f-ba6d-5df8af7a8584}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{9dfeab92-f684-454d-b4d0-4787d9faafe5}",
   "sourcePort": "output0",
   "targetUuid": "{4a1d3a7c-d864-472f-ba6d-5df8af7a8584}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{f7307ac5-8b3f-4b80-a572-fa06f2cd0113}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{7545a2fc-ee54-4328-9d77-b1265c21d71e}",
   "sourcePort": "color",
   "targetUuid": "{9075d7b3-b944-4851-bf38-8eef9d364085}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{20edef4b-96da-476d-9630-0fd1dec3b09e}",
   "sourcePort": "output0",
   "targetUuid": "{7545a2fc-ee54-4328-9d77-b1265c21d71e}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{cd3c6ea3-2529-490c-806c-fecea53e8856}",
   "sourcePort": "reflection",
   "targetUuid": "{7545a2fc-ee54-4328-9d77-b1265c21d71e}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{cd3c6ea3-2529-490c-806c-fecea53e8856}",
   "sourcePort": "uv",
   "targetUuid": "{0286a922-c3ca-4bbc-a239-014cb19d6043}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{0286a922-c3ca-4bbc-a239-014cb19d6043}",
   "sourcePort": "color",
   "targetUuid": "{80eabd5d-a860-4f5f-a6f5-a530c145260d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{08802667-7133-4d89-ab56-50319ab71966}",
   "sourcePort": "shader",
   "targetUuid": "{fac0359e-0465-4741-a8be-5966d83302ef}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{0b8d824b-2845-49c0-bb47-f89352621c1b}",
   "sourcePort": "output",
   "targetUuid": "{c52b62b4-8b42-4fac-a467-9370071d5c6c}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{c52b62b4-8b42-4fac-a467-9370071d5c6c}",
   "sourcePort": "z",
   "targetUuid": "{46507306-324f-446d-89d3-904cebaa7982}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "normalScaling",
   "targetUuid": "{dc79a989-8e01-4f82-aa72-2bb7d87367cb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{143611db-04c1-4d08-bc44-04345c90151c}",
   "sourcePort": "normal",
   "targetUuid": "{904b9ccf-ac0b-4de4-8134-3a8228f9944e}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{4a1d3a7c-d864-472f-ba6d-5df8af7a8584}",
   "sourcePort": "output0",
   "targetUuid": "{ff3f0191-e01d-473a-9c46-4ca0df7a6b01}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{ff3f0191-e01d-473a-9c46-4ca0df7a6b01}",
   "sourcePort": "color_out",
   "targetUuid": "{08802667-7133-4d89-ab56-50319ab71966}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{394fc4dc-3e20-4f01-8b15-7e028ce52aa2}",
   "sourcePort": "value",
   "targetUuid": "{2f8d8242-4b7a-4f54-98f4-cee131d1403c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c12f9e24-a63a-412c-81ea-f7477d3ee3f0}",
   "sourcePort": "value",
   "targetUuid": "{ef970c1f-2e0e-4042-ac6a-8930e7aebd86}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{766ad14f-6bff-4722-bda1-ae7b81d213f3}",
   "sourcePort": "value",
   "targetUuid": "{a3426a0d-a594-4887-90ac-1c0e1fd12e59}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e6d08139-3c15-4f90-848a-2a72bc6f3a99}",
   "sourcePort": "value",
   "targetUuid": "{dc9156be-09f2-4c10-87a0-a70d62b4beb4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{dd3df0bf-5c0b-4394-942f-733140b52ca0}",
   "sourcePort": "value",
   "targetUuid": "{ea588c76-7b3f-4a22-b274-b41b18607aa8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ae43129e-2c01-4d2a-85e9-83c270d607b2}",
   "sourcePort": "value",
   "targetUuid": "{1cd9c81c-ab1e-4d67-839d-087658703a56}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{daa0a5ff-004b-4b4a-9ae1-5d075acdc48f}",
   "sourcePort": "value",
   "targetUuid": "{1cd9c81c-ab1e-4d67-839d-087658703a56}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{0234e05f-2533-45e7-8d29-1d98933c4019}",
   "sourcePort": "value",
   "targetUuid": "{f7307ac5-8b3f-4b80-a572-fa06f2cd0113}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{11105656-78eb-40b0-8026-e0cea3ffc6ec}",
   "sourcePort": "value",
   "targetUuid": "{20edef4b-96da-476d-9630-0fd1dec3b09e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3766fc43-f408-4612-b91b-82f3b7a4006d}",
   "sourcePort": "value",
   "targetUuid": "{46507306-324f-446d-89d3-904cebaa7982}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2c7cff94-9faf-4419-92d5-15a08b08720d}",
   "sourcePort": "value",
   "targetUuid": "{ff3f0191-e01d-473a-9c46-4ca0df7a6b01}",
   "targetPort": "alpha"
  },
  {
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{0286a922-c3ca-4bbc-a239-014cb19d6043}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{0286a922-c3ca-4bbc-a239-014cb19d6043}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{0b8d824b-2845-49c0-bb47-f89352621c1b}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{7545a2fc-ee54-4328-9d77-b1265c21d71e}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{7545a2fc-ee54-4328-9d77-b1265c21d71e}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{ca5a0a29-6c65-433e-8500-499514e5552c}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{7545a2fc-ee54-4328-9d77-b1265c21d71e}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}