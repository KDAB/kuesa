{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{591d4f92-6b1f-47c4-9e71-b943b75b148f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{649174d5-e01a-40da-8bcc-06faadc5776f}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{378b7c67-d512-495d-8ebb-c3686bbc5f74}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b910b59d-8723-48d5-9827-2ea42f4f44b0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{aaba0f40-7f1b-4d67-bb6e-5785f1d521be}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{fc81d4c5-8549-4bd4-b4cc-cb88b966775e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{41eaf0be-417b-4a2d-a5a9-84ebe4b7cafb}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{16b664a3-6ab7-4553-a9d0-85e8de14a9b2}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{d57c6a38-2709-424a-9e9a-8a8e19a241e9}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{ce4336a8-1316-4c05-8221-07018e2d8b41}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{011c541f-b7dd-4309-bc12-037700bd63ba}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{31e3ce68-61ba-4b74-8177-1ed25a3fe2d5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d4a8f6d0-747a-4dfc-856e-8fd86a3a86dd}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{93146a2a-8866-42d7-9efd-e36ad180fb8b}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7cf39a5e-81ca-4011-980a-007a01881b1c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{b84f86a2-b0e5-4446-94af-f965368fb0cc}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{be2a6bae-e85d-4b19-84b2-6f5c24e5a62b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{dc7ac6d6-d14c-4fcf-a798-a63c284694ac}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{ea5318bd-1851-4dd7-9c0c-d389e7bc51ef}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{8d6ed4b7-e8d6-4b66-b384-ff5a90912aa6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e7e11927-3117-4d97-a234-179e528a5a75}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{a742b21c-2b69-4997-af75-a589bd06c520}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e17f7d45-243d-458c-b781-34111902d6d4}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{01873b62-3616-41af-aab3-e4df6c43b474}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7cefec85-764f-4c02-b164-311bc67c4812}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{29bccb82-045b-4a1b-a31d-56ae7023b4bd}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{b3130d12-57e6-4b0d-adbe-313c625aac57}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{4d883b8c-6c6f-458e-819a-0da13ea708ee}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{f9c80073-a7f8-4c66-827e-0c1721133ef2}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{abbf9296-5205-46a2-8ec4-e77def5138ae}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{bf4b6557-97c7-4057-8a7c-c5a2ee74755f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7e1bd35a-cc25-4384-9170-84c47654802f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{5edc77c8-e66b-4533-bc16-bbd0f387d46c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{091210ae-17f0-415e-960e-192ab51fc8a2}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{642027c0-2d4e-4c0d-b801-790c8419bdf2}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP_COLOR",
   "uuid": "{63ea53f6-5cca-46ee-a423-c57e6e1bd053}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{211bd23e-3309-4e46-8aca-539e8124cebb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d22a4eb7-3693-4f50-a0d1-9a089464e56a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{bc4ea2fa-a050-4675-9653-bdfa65da33a2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{c95e7583-b467-4066-8d45-77e7d40284eb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{5d2ac81e-5848-49d2-8ba9-c3e77011e96b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{7f4368f7-4923-4095-88e3-497d580114e7}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{d6ae67a5-366c-46c0-83e9-f99e9e5c3121}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{84f6ec8f-9f70-453f-ba99-aae370a74235}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c85741e1-b151-4e93-ba98-a9d1da8a8429}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{e47a1999-e389-4079-b2e6-227d306df4ca}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{04b8ac24-f9e8-4064-8aa7-94b19e80d2c3}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{ea5318bd-1851-4dd7-9c0c-d389e7bc51ef}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{ea5318bd-1851-4dd7-9c0c-d389e7bc51ef}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{378b7c67-d512-495d-8ebb-c3686bbc5f74}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{378b7c67-d512-495d-8ebb-c3686bbc5f74}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{ea5318bd-1851-4dd7-9c0c-d389e7bc51ef}",
   "sourcePort": "mixed",
   "targetUuid": "{d4a8f6d0-747a-4dfc-856e-8fd86a3a86dd}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{378b7c67-d512-495d-8ebb-c3686bbc5f74}",
   "sourcePort": "mixed",
   "targetUuid": "{7cefec85-764f-4c02-b164-311bc67c4812}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d4a8f6d0-747a-4dfc-856e-8fd86a3a86dd}",
   "sourcePort": "output0",
   "targetUuid": "{649174d5-e01a-40da-8bcc-06faadc5776f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{649174d5-e01a-40da-8bcc-06faadc5776f}",
   "sourcePort": "output0",
   "targetUuid": "{591d4f92-6b1f-47c4-9e71-b943b75b148f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b910b59d-8723-48d5-9827-2ea42f4f44b0}",
   "sourcePort": "output0",
   "targetUuid": "{591d4f92-6b1f-47c4-9e71-b943b75b148f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{591d4f92-6b1f-47c4-9e71-b943b75b148f}",
   "sourcePort": "output0",
   "targetUuid": "{e7e11927-3117-4d97-a234-179e528a5a75}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{649174d5-e01a-40da-8bcc-06faadc5776f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{b910b59d-8723-48d5-9827-2ea42f4f44b0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7cefec85-764f-4c02-b164-311bc67c4812}",
   "sourcePort": "output0",
   "targetUuid": "{b910b59d-8723-48d5-9827-2ea42f4f44b0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d57c6a38-2709-424a-9e9a-8a8e19a241e9}",
   "sourcePort": "transformed",
   "targetUuid": "{16b664a3-6ab7-4553-a9d0-85e8de14a9b2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{16b664a3-6ab7-4553-a9d0-85e8de14a9b2}",
   "sourcePort": "output0",
   "targetUuid": "{7e1bd35a-cc25-4384-9170-84c47654802f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7e1bd35a-cc25-4384-9170-84c47654802f}",
   "sourcePort": "output0",
   "targetUuid": "{41eaf0be-417b-4a2d-a5a9-84ebe4b7cafb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{011c541f-b7dd-4309-bc12-037700bd63ba}",
   "sourcePort": "output0",
   "targetUuid": "{41eaf0be-417b-4a2d-a5a9-84ebe4b7cafb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{41eaf0be-417b-4a2d-a5a9-84ebe4b7cafb}",
   "sourcePort": "output0",
   "targetUuid": "{fc81d4c5-8549-4bd4-b4cc-cb88b966775e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{011c541f-b7dd-4309-bc12-037700bd63ba}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{aaba0f40-7f1b-4d67-bb6e-5785f1d521be}",
   "sourcePort": "output0",
   "targetUuid": "{e17f7d45-243d-458c-b781-34111902d6d4}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fc81d4c5-8549-4bd4-b4cc-cb88b966775e}",
   "sourcePort": "output0",
   "targetUuid": "{aaba0f40-7f1b-4d67-bb6e-5785f1d521be}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bf4b6557-97c7-4057-8a7c-c5a2ee74755f}",
   "sourcePort": "z",
   "targetUuid": "{93146a2a-8866-42d7-9efd-e36ad180fb8b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{93146a2a-8866-42d7-9efd-e36ad180fb8b}",
   "sourcePort": "output0",
   "targetUuid": "{7cf39a5e-81ca-4011-980a-007a01881b1c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{93146a2a-8866-42d7-9efd-e36ad180fb8b}",
   "sourcePort": "output0",
   "targetUuid": "{7cf39a5e-81ca-4011-980a-007a01881b1c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7cf39a5e-81ca-4011-980a-007a01881b1c}",
   "sourcePort": "output0",
   "targetUuid": "{ea5318bd-1851-4dd7-9c0c-d389e7bc51ef}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{7cf39a5e-81ca-4011-980a-007a01881b1c}",
   "sourcePort": "output0",
   "targetUuid": "{378b7c67-d512-495d-8ebb-c3686bbc5f74}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{fc81d4c5-8549-4bd4-b4cc-cb88b966775e}",
   "sourcePort": "output0",
   "targetUuid": "{bf4b6557-97c7-4057-8a7c-c5a2ee74755f}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{dc7ac6d6-d14c-4fcf-a798-a63c284694ac}",
   "sourcePort": "color",
   "targetUuid": "{be2a6bae-e85d-4b19-84b2-6f5c24e5a62b}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{be2a6bae-e85d-4b19-84b2-6f5c24e5a62b}",
   "sourcePort": "mixed",
   "targetUuid": "{31e3ce68-61ba-4b74-8177-1ed25a3fe2d5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{be2a6bae-e85d-4b19-84b2-6f5c24e5a62b}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "postGain",
   "targetUuid": "{31e3ce68-61ba-4b74-8177-1ed25a3fe2d5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{31e3ce68-61ba-4b74-8177-1ed25a3fe2d5}",
   "sourcePort": "output0",
   "targetUuid": "{e7e11927-3117-4d97-a234-179e528a5a75}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b3130d12-57e6-4b0d-adbe-313c625aac57}",
   "sourcePort": "normal",
   "targetUuid": "{4d883b8c-6c6f-458e-819a-0da13ea708ee}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{abbf9296-5205-46a2-8ec4-e77def5138ae}",
   "sourcePort": "output0",
   "targetUuid": "{8d6ed4b7-e8d6-4b66-b384-ff5a90912aa6}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{8d6ed4b7-e8d6-4b66-b384-ff5a90912aa6}",
   "sourcePort": "result",
   "targetUuid": "{a742b21c-2b69-4997-af75-a589bd06c520}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{a742b21c-2b69-4997-af75-a589bd06c520}",
   "sourcePort": "mixed",
   "targetUuid": "{091210ae-17f0-415e-960e-192ab51fc8a2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e7e11927-3117-4d97-a234-179e528a5a75}",
   "sourcePort": "output0",
   "targetUuid": "{091210ae-17f0-415e-960e-192ab51fc8a2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{a742b21c-2b69-4997-af75-a589bd06c520}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{642027c0-2d4e-4c0d-b801-790c8419bdf2}",
   "sourcePort": "color",
   "targetUuid": "{d4a8f6d0-747a-4dfc-856e-8fd86a3a86dd}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e17f7d45-243d-458c-b781-34111902d6d4}",
   "sourcePort": "output0",
   "targetUuid": "{642027c0-2d4e-4c0d-b801-790c8419bdf2}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{b84f86a2-b0e5-4446-94af-f965368fb0cc}",
   "sourcePort": "reflection",
   "targetUuid": "{642027c0-2d4e-4c0d-b801-790c8419bdf2}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{b84f86a2-b0e5-4446-94af-f965368fb0cc}",
   "sourcePort": "uv",
   "targetUuid": "{01873b62-3616-41af-aab3-e4df6c43b474}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{01873b62-3616-41af-aab3-e4df6c43b474}",
   "sourcePort": "color",
   "targetUuid": "{7cefec85-764f-4c02-b164-311bc67c4812}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5edc77c8-e66b-4533-bc16-bbd0f387d46c}",
   "sourcePort": "shader",
   "targetUuid": "{29bccb82-045b-4a1b-a31d-56ae7023b4bd}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{4d883b8c-6c6f-458e-819a-0da13ea708ee}",
   "sourcePort": "output",
   "targetUuid": "{f9c80073-a7f8-4c66-827e-0c1721133ef2}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{f9c80073-a7f8-4c66-827e-0c1721133ef2}",
   "sourcePort": "z",
   "targetUuid": "{abbf9296-5205-46a2-8ec4-e77def5138ae}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "normalScaling",
   "targetUuid": "{7e1bd35a-cc25-4384-9170-84c47654802f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ce4336a8-1316-4c05-8221-07018e2d8b41}",
   "sourcePort": "normal",
   "targetUuid": "{d57c6a38-2709-424a-9e9a-8a8e19a241e9}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{091210ae-17f0-415e-960e-192ab51fc8a2}",
   "sourcePort": "output0",
   "targetUuid": "{63ea53f6-5cca-46ee-a423-c57e6e1bd053}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{63ea53f6-5cca-46ee-a423-c57e6e1bd053}",
   "sourcePort": "color_out",
   "targetUuid": "{5edc77c8-e66b-4533-bc16-bbd0f387d46c}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{211bd23e-3309-4e46-8aca-539e8124cebb}",
   "sourcePort": "value",
   "targetUuid": "{aaba0f40-7f1b-4d67-bb6e-5785f1d521be}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d22a4eb7-3693-4f50-a0d1-9a089464e56a}",
   "sourcePort": "value",
   "targetUuid": "{16b664a3-6ab7-4553-a9d0-85e8de14a9b2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{bc4ea2fa-a050-4675-9653-bdfa65da33a2}",
   "sourcePort": "value",
   "targetUuid": "{011c541f-b7dd-4309-bc12-037700bd63ba}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c95e7583-b467-4066-8d45-77e7d40284eb}",
   "sourcePort": "value",
   "targetUuid": "{93146a2a-8866-42d7-9efd-e36ad180fb8b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5d2ac81e-5848-49d2-8ba9-c3e77011e96b}",
   "sourcePort": "value",
   "targetUuid": "{be2a6bae-e85d-4b19-84b2-6f5c24e5a62b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7f4368f7-4923-4095-88e3-497d580114e7}",
   "sourcePort": "value",
   "targetUuid": "{8d6ed4b7-e8d6-4b66-b384-ff5a90912aa6}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{d6ae67a5-366c-46c0-83e9-f99e9e5c3121}",
   "sourcePort": "value",
   "targetUuid": "{8d6ed4b7-e8d6-4b66-b384-ff5a90912aa6}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{84f6ec8f-9f70-453f-ba99-aae370a74235}",
   "sourcePort": "value",
   "targetUuid": "{a742b21c-2b69-4997-af75-a589bd06c520}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c85741e1-b151-4e93-ba98-a9d1da8a8429}",
   "sourcePort": "value",
   "targetUuid": "{e17f7d45-243d-458c-b781-34111902d6d4}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e47a1999-e389-4079-b2e6-227d306df4ca}",
   "sourcePort": "value",
   "targetUuid": "{abbf9296-5205-46a2-8ec4-e77def5138ae}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{04b8ac24-f9e8-4064-8aa7-94b19e80d2c3}",
   "sourcePort": "value",
   "targetUuid": "{63ea53f6-5cca-46ee-a423-c57e6e1bd053}",
   "targetPort": "alpha"
  },
  {
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{01873b62-3616-41af-aab3-e4df6c43b474}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{01873b62-3616-41af-aab3-e4df6c43b474}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{4d883b8c-6c6f-458e-819a-0da13ea708ee}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{642027c0-2d4e-4c0d-b801-790c8419bdf2}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{642027c0-2d4e-4c0d-b801-790c8419bdf2}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{daf66d83-c411-4f2a-943b-70788ddb3370}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{642027c0-2d4e-4c0d-b801-790c8419bdf2}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "CLAMP_COLOR": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "color_out",
    "alpha_out"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $color_out = clamp($color, 0.0, 1.0); highp float $alpha_out = clamp($alpha, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $color_out = clamp($color, 0.0, 1.0); float $alpha_out = clamp($alpha, 0.0, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, pow($alpha, 2.4));"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, pow($alpha, 2.4));"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = $color;"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VEC3_TO_VEC2": {
   "inputs": [
    "vector3"
   ],
   "outputs": [
    "vector2"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec2 $vector2 = $vector3.xy;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec2 $vector2 = $vector3.xy;"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}