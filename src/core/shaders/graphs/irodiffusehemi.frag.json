{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0dbd5ece-e019-47e0-82e6-1eb37d334c88}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{57f8d598-cf97-4237-954c-7cd63822cfe5}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{746ce4a5-92f8-4fa2-bfa4-590a75d6f98a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{174dd591-0b6d-475d-afee-4cca69baf3b5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3c278650-90e5-40a1-88aa-8adeb0f4c1a9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{fb7d1186-ccb0-4fdb-9892-4c939f41a2f1}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{71d9db51-9761-4b79-84c2-822c8ee5d023}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b3c92c0b-7ad0-4cea-b13d-1e41e61e3e87}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dbaeccc5-f15d-48d9-abc6-c075aec41335}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{731f9691-d945-48cc-a604-8525cf35aa3d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{d0390086-87f8-4507-9302-542710f325f5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{95f1d20b-f399-433c-a2e9-710fe189452e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{93c285b4-9a3a-440b-912b-da62a32f1646}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{da5dfdb0-18cd-4ba7-978b-377ac4bd56c3}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{500d033d-9759-4396-aefc-d4278fd18dbb}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{c59f9356-4b4a-43e4-a573-b8ba56f0c7ec}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b62e22ff-8cdd-4701-8f52-6d891234fa45}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{f954d256-c5b6-4ee9-b62c-2ddf1409f73b}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{08da6b3c-3109-454f-a1f7-64dff040167b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{e8fa0429-1ba2-4f32-b662-4e944a548267}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{6c34a99b-0bd2-47a5-90dc-9876a59d2186}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{9c478630-9a0f-49ce-8a59-a4c6ca2ce102}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a41aef9c-7813-4940-9fa5-319565a480a0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{7aae24b1-008a-4171-9182-241471d0e39b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b4f5d5f0-b4b1-40df-a5ef-7870cff66ac0}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{109f730a-31d5-4d8e-b017-6c7771c8c769}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{0b5f3966-b8b9-45c8-8fdf-f943dcc1d64c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{2a9be993-ceb9-4671-89e6-63735939855a}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{2b8ed364-3df3-4f56-b86c-d34661497b1d}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{0fdaa3ae-0e71-4cca-b057-343a13da06c6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{85fe0874-8ef9-4d73-9083-0eaac71919aa}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{1a240246-6e18-4deb-b21a-ba53f98fbdf1}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{2aa9f9c5-f1a7-4591-85e6-03b21c97347f}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{28404098-a098-4c29-8113-45354df91273}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{06c4c24b-7c09-4be7-b8cf-3ea24fb189ab}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{3636d051-312c-417e-88fd-24232cac48ba}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{535a9bc2-d4ab-4e1a-a58b-0f7f0fff4e49}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{08c5c5ad-3c90-4677-a1a5-1433d32b408f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{750f9c27-762e-4d23-b982-d15bf3c0a07f}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{7ef5ae22-6f55-40e8-a930-47f6e0a091a0}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{de9df0e1-08c5-4163-94d8-057881b2f378}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{c6712e26-2a0f-44c2-ac81-675213120dbc}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{f4df6edc-f1cd-4759-b244-182be734c174}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{16103aa5-2218-4666-8bd0-b9ece0d0f425}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{81e21598-900b-4b52-978a-517f204863cc}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{5123b92a-3090-44da-b95e-829065110a76}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{6c34a99b-0bd2-47a5-90dc-9876a59d2186}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{6c34a99b-0bd2-47a5-90dc-9876a59d2186}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{746ce4a5-92f8-4fa2-bfa4-590a75d6f98a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{746ce4a5-92f8-4fa2-bfa4-590a75d6f98a}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{6c34a99b-0bd2-47a5-90dc-9876a59d2186}",
   "sourcePort": "mixed",
   "targetUuid": "{da5dfdb0-18cd-4ba7-978b-377ac4bd56c3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{746ce4a5-92f8-4fa2-bfa4-590a75d6f98a}",
   "sourcePort": "mixed",
   "targetUuid": "{85fe0874-8ef9-4d73-9083-0eaac71919aa}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{da5dfdb0-18cd-4ba7-978b-377ac4bd56c3}",
   "sourcePort": "output0",
   "targetUuid": "{57f8d598-cf97-4237-954c-7cd63822cfe5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{57f8d598-cf97-4237-954c-7cd63822cfe5}",
   "sourcePort": "output0",
   "targetUuid": "{0dbd5ece-e019-47e0-82e6-1eb37d334c88}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{174dd591-0b6d-475d-afee-4cca69baf3b5}",
   "sourcePort": "output0",
   "targetUuid": "{0dbd5ece-e019-47e0-82e6-1eb37d334c88}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0dbd5ece-e019-47e0-82e6-1eb37d334c88}",
   "sourcePort": "output0",
   "targetUuid": "{109f730a-31d5-4d8e-b017-6c7771c8c769}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{57f8d598-cf97-4237-954c-7cd63822cfe5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{174dd591-0b6d-475d-afee-4cca69baf3b5}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{85fe0874-8ef9-4d73-9083-0eaac71919aa}",
   "sourcePort": "output0",
   "targetUuid": "{174dd591-0b6d-475d-afee-4cca69baf3b5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d0390086-87f8-4507-9302-542710f325f5}",
   "sourcePort": "normal",
   "targetUuid": "{731f9691-d945-48cc-a604-8525cf35aa3d}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{731f9691-d945-48cc-a604-8525cf35aa3d}",
   "sourcePort": "transformed",
   "targetUuid": "{dbaeccc5-f15d-48d9-abc6-c075aec41335}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{dbaeccc5-f15d-48d9-abc6-c075aec41335}",
   "sourcePort": "output0",
   "targetUuid": "{b3c92c0b-7ad0-4cea-b13d-1e41e61e3e87}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b3c92c0b-7ad0-4cea-b13d-1e41e61e3e87}",
   "sourcePort": "output0",
   "targetUuid": "{71d9db51-9761-4b79-84c2-822c8ee5d023}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{95f1d20b-f399-433c-a2e9-710fe189452e}",
   "sourcePort": "output0",
   "targetUuid": "{71d9db51-9761-4b79-84c2-822c8ee5d023}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{71d9db51-9761-4b79-84c2-822c8ee5d023}",
   "sourcePort": "output0",
   "targetUuid": "{fb7d1186-ccb0-4fdb-9892-4c939f41a2f1}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "normalScaling",
   "targetUuid": "{28404098-a098-4c29-8113-45354df91273}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{95f1d20b-f399-433c-a2e9-710fe189452e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{3c278650-90e5-40a1-88aa-8adeb0f4c1a9}",
   "sourcePort": "output0",
   "targetUuid": "{2a9be993-ceb9-4671-89e6-63735939855a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{fb7d1186-ccb0-4fdb-9892-4c939f41a2f1}",
   "sourcePort": "output0",
   "targetUuid": "{3c278650-90e5-40a1-88aa-8adeb0f4c1a9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c59f9356-4b4a-43e4-a573-b8ba56f0c7ec}",
   "sourcePort": "z",
   "targetUuid": "{500d033d-9759-4396-aefc-d4278fd18dbb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{500d033d-9759-4396-aefc-d4278fd18dbb}",
   "sourcePort": "output0",
   "targetUuid": "{b62e22ff-8cdd-4701-8f52-6d891234fa45}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{500d033d-9759-4396-aefc-d4278fd18dbb}",
   "sourcePort": "output0",
   "targetUuid": "{b62e22ff-8cdd-4701-8f52-6d891234fa45}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b62e22ff-8cdd-4701-8f52-6d891234fa45}",
   "sourcePort": "output0",
   "targetUuid": "{6c34a99b-0bd2-47a5-90dc-9876a59d2186}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b62e22ff-8cdd-4701-8f52-6d891234fa45}",
   "sourcePort": "output0",
   "targetUuid": "{746ce4a5-92f8-4fa2-bfa4-590a75d6f98a}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{fb7d1186-ccb0-4fdb-9892-4c939f41a2f1}",
   "sourcePort": "output0",
   "targetUuid": "{c59f9356-4b4a-43e4-a573-b8ba56f0c7ec}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{e8fa0429-1ba2-4f32-b662-4e944a548267}",
   "sourcePort": "color",
   "targetUuid": "{08da6b3c-3109-454f-a1f7-64dff040167b}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{08da6b3c-3109-454f-a1f7-64dff040167b}",
   "sourcePort": "mixed",
   "targetUuid": "{93c285b4-9a3a-440b-912b-da62a32f1646}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{08da6b3c-3109-454f-a1f7-64dff040167b}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "postGain",
   "targetUuid": "{93c285b4-9a3a-440b-912b-da62a32f1646}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{93c285b4-9a3a-440b-912b-da62a32f1646}",
   "sourcePort": "output0",
   "targetUuid": "{109f730a-31d5-4d8e-b017-6c7771c8c769}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{06c4c24b-7c09-4be7-b8cf-3ea24fb189ab}",
   "sourcePort": "normal",
   "targetUuid": "{3636d051-312c-417e-88fd-24232cac48ba}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{7aae24b1-008a-4171-9182-241471d0e39b}",
   "sourcePort": "z",
   "targetUuid": "{a41aef9c-7813-4940-9fa5-319565a480a0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a41aef9c-7813-4940-9fa5-319565a480a0}",
   "sourcePort": "output0",
   "targetUuid": "{9c478630-9a0f-49ce-8a59-a4c6ca2ce102}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{9c478630-9a0f-49ce-8a59-a4c6ca2ce102}",
   "sourcePort": "result",
   "targetUuid": "{0b5f3966-b8b9-45c8-8fdf-f943dcc1d64c}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{0b5f3966-b8b9-45c8-8fdf-f943dcc1d64c}",
   "sourcePort": "mixed",
   "targetUuid": "{b4f5d5f0-b4b1-40df-a5ef-7870cff66ac0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{109f730a-31d5-4d8e-b017-6c7771c8c769}",
   "sourcePort": "output0",
   "targetUuid": "{b4f5d5f0-b4b1-40df-a5ef-7870cff66ac0}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{0b5f3966-b8b9-45c8-8fdf-f943dcc1d64c}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{2b8ed364-3df3-4f56-b86c-d34661497b1d}",
   "sourcePort": "color",
   "targetUuid": "{da5dfdb0-18cd-4ba7-978b-377ac4bd56c3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2a9be993-ceb9-4671-89e6-63735939855a}",
   "sourcePort": "output0",
   "targetUuid": "{2b8ed364-3df3-4f56-b86c-d34661497b1d}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{f954d256-c5b6-4ee9-b62c-2ddf1409f73b}",
   "sourcePort": "reflection",
   "targetUuid": "{2b8ed364-3df3-4f56-b86c-d34661497b1d}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{f954d256-c5b6-4ee9-b62c-2ddf1409f73b}",
   "sourcePort": "uv",
   "targetUuid": "{0fdaa3ae-0e71-4cca-b057-343a13da06c6}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{0fdaa3ae-0e71-4cca-b057-343a13da06c6}",
   "sourcePort": "color",
   "targetUuid": "{85fe0874-8ef9-4d73-9083-0eaac71919aa}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b4f5d5f0-b4b1-40df-a5ef-7870cff66ac0}",
   "sourcePort": "output0",
   "targetUuid": "{2aa9f9c5-f1a7-4591-85e6-03b21c97347f}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{2aa9f9c5-f1a7-4591-85e6-03b21c97347f}",
   "sourcePort": "shader",
   "targetUuid": "{1a240246-6e18-4deb-b21a-ba53f98fbdf1}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{28404098-a098-4c29-8113-45354df91273}",
   "sourcePort": "output",
   "targetUuid": "{b3c92c0b-7ad0-4cea-b13d-1e41e61e3e87}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3636d051-312c-417e-88fd-24232cac48ba}",
   "sourcePort": "output",
   "targetUuid": "{7aae24b1-008a-4171-9182-241471d0e39b}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{535a9bc2-d4ab-4e1a-a58b-0f7f0fff4e49}",
   "sourcePort": "value",
   "targetUuid": "{3c278650-90e5-40a1-88aa-8adeb0f4c1a9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{08c5c5ad-3c90-4677-a1a5-1433d32b408f}",
   "sourcePort": "value",
   "targetUuid": "{dbaeccc5-f15d-48d9-abc6-c075aec41335}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{750f9c27-762e-4d23-b982-d15bf3c0a07f}",
   "sourcePort": "value",
   "targetUuid": "{95f1d20b-f399-433c-a2e9-710fe189452e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7ef5ae22-6f55-40e8-a930-47f6e0a091a0}",
   "sourcePort": "value",
   "targetUuid": "{500d033d-9759-4396-aefc-d4278fd18dbb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{de9df0e1-08c5-4163-94d8-057881b2f378}",
   "sourcePort": "value",
   "targetUuid": "{08da6b3c-3109-454f-a1f7-64dff040167b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c6712e26-2a0f-44c2-ac81-675213120dbc}",
   "sourcePort": "value",
   "targetUuid": "{9c478630-9a0f-49ce-8a59-a4c6ca2ce102}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{f4df6edc-f1cd-4759-b244-182be734c174}",
   "sourcePort": "value",
   "targetUuid": "{9c478630-9a0f-49ce-8a59-a4c6ca2ce102}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{16103aa5-2218-4666-8bd0-b9ece0d0f425}",
   "sourcePort": "value",
   "targetUuid": "{a41aef9c-7813-4940-9fa5-319565a480a0}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{81e21598-900b-4b52-978a-517f204863cc}",
   "sourcePort": "value",
   "targetUuid": "{0b5f3966-b8b9-45c8-8fdf-f943dcc1d64c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5123b92a-3090-44da-b95e-829065110a76}",
   "sourcePort": "value",
   "targetUuid": "{2a9be993-ceb9-4671-89e6-63735939855a}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{2b8ed364-3df3-4f56-b86c-d34661497b1d}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{2b8ed364-3df3-4f56-b86c-d34661497b1d}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{2b8ed364-3df3-4f56-b86c-d34661497b1d}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{0fdaa3ae-0e71-4cca-b057-343a13da06c6}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{0fdaa3ae-0e71-4cca-b057-343a13da06c6}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{28404098-a098-4c29-8113-45354df91273}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{0c3f572c-987a-46d8-b35c-6bca7fb6ee45}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{3636d051-312c-417e-88fd-24232cac48ba}",
   "targetPort": "gltfYUp"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    }
   ]
  }
 }
}