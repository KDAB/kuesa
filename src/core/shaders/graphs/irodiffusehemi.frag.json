{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{af375d2d-2d9e-4ec8-af60-f49c91797f0e}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8f3386e0-c892-4e6f-b58d-3e47cdfb10ac}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{347a9704-0d74-4744-9f42-57a8f8b96fd1}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{cfebd1a1-3508-4d99-a40d-20bdb3cf39bf}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{78e2ecc1-b7c8-49cf-9e2b-6e2333ec2ec7}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{cbbbf61a-1d6f-4ea4-b1fc-bb326a3a9f98}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{215fba2e-552e-4cf6-9495-63542fb63e6c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{97bea0b0-633d-458e-942c-52f033699a0e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{0931770c-7f13-463b-8bed-4c2ae2532bb6}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{06586389-880c-4457-a0ac-fb3b49a3acc1}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{cbb95bd1-f2fb-4b8e-ac70-0f8fae67485b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b7d31a30-c778-46e6-a53e-62b0120fc190}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{e2d86293-c46d-4c40-9470-d7770ddd06d3}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{848bc17c-c357-4981-9f57-2b6f03502faf}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{f8a10d92-7286-4a86-803a-0508106a6230}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{5f6ab734-906b-40da-899c-3258dfa55272}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{1fc91825-f9fa-4f23-99bf-7558ff3e1bae}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{856299d5-f3a7-4ded-88d9-69cb6aeb3ade}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{bf4e6a92-b97d-4d30-8104-6e7829123100}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{5dfb50a2-3ecf-4166-965d-57ec5a9946b5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dc8e5311-cd4a-4bd5-9599-f1b167165606}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{e1d2671d-697e-4c7e-8a57-87271b994ead}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7b5a4eca-f979-4ca5-8a3a-bf4ad65d6123}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{091e83d7-462d-4e27-8abf-24f0c232f093}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0d02b567-c40f-481a-a7d0-ea95102e6f50}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{b2811286-e771-4ece-83a8-78f3fd900488}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{96257e33-a7b8-42f4-a981-5ef222926136}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{533071c4-7b7b-4ac7-b8db-3c7941f37da5}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{3b73afb1-6fda-4392-86ad-427f15954f34}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{e10f1812-324e-462e-b9d3-3892dd25df68}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{21b3fe0b-fdb4-4a87-85db-c9e005fd7be8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{25daee24-2334-4b1e-920e-8f1fd520748c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a4e0e842-29cc-4578-ac10-cae09e31a275}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{792ef9f0-85a0-4818-8282-87d15d3f6f46}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{156d4232-7563-4743-a55c-cfaace9468eb}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{3c8a911e-2bf0-47bc-bb46-1aa67ef10da1}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c63b8fa3-baad-4a13-9b11-10cca571d148}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b363b43d-20c2-4352-bc34-be9a4438cea5}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{10da114b-e49a-4d15-94f6-f29b72b54602}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{6e24acc4-e2c2-4ee4-a757-b9eb534b197b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b1b6a5c9-a97c-4bd4-a0fa-0cfddc0a0630}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{819f8fc5-22c1-4e60-9f8e-3d9ad34fec23}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{679cf6d4-69cd-4f59-9a6e-889e3c17c179}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{0f0a848d-9490-48fa-89ec-53518899930d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{a8258a3b-7940-456a-ae12-e18a84f66c3d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{568ae4ba-0b03-4235-9d0c-5a56300d78e2}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{bf4e6a92-b97d-4d30-8104-6e7829123100}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{bf4e6a92-b97d-4d30-8104-6e7829123100}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{347a9704-0d74-4744-9f42-57a8f8b96fd1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{347a9704-0d74-4744-9f42-57a8f8b96fd1}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{bf4e6a92-b97d-4d30-8104-6e7829123100}",
   "sourcePort": "mixed",
   "targetUuid": "{e2d86293-c46d-4c40-9470-d7770ddd06d3}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{347a9704-0d74-4744-9f42-57a8f8b96fd1}",
   "sourcePort": "mixed",
   "targetUuid": "{0d02b567-c40f-481a-a7d0-ea95102e6f50}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{e2d86293-c46d-4c40-9470-d7770ddd06d3}",
   "sourcePort": "output0",
   "targetUuid": "{8f3386e0-c892-4e6f-b58d-3e47cdfb10ac}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8f3386e0-c892-4e6f-b58d-3e47cdfb10ac}",
   "sourcePort": "output0",
   "targetUuid": "{af375d2d-2d9e-4ec8-af60-f49c91797f0e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cfebd1a1-3508-4d99-a40d-20bdb3cf39bf}",
   "sourcePort": "output0",
   "targetUuid": "{af375d2d-2d9e-4ec8-af60-f49c91797f0e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{af375d2d-2d9e-4ec8-af60-f49c91797f0e}",
   "sourcePort": "output0",
   "targetUuid": "{dc8e5311-cd4a-4bd5-9599-f1b167165606}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{8f3386e0-c892-4e6f-b58d-3e47cdfb10ac}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{cfebd1a1-3508-4d99-a40d-20bdb3cf39bf}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0d02b567-c40f-481a-a7d0-ea95102e6f50}",
   "sourcePort": "output0",
   "targetUuid": "{cfebd1a1-3508-4d99-a40d-20bdb3cf39bf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0931770c-7f13-463b-8bed-4c2ae2532bb6}",
   "sourcePort": "transformed",
   "targetUuid": "{97bea0b0-633d-458e-942c-52f033699a0e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{97bea0b0-633d-458e-942c-52f033699a0e}",
   "sourcePort": "output0",
   "targetUuid": "{a4e0e842-29cc-4578-ac10-cae09e31a275}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a4e0e842-29cc-4578-ac10-cae09e31a275}",
   "sourcePort": "output0",
   "targetUuid": "{215fba2e-552e-4cf6-9495-63542fb63e6c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cbb95bd1-f2fb-4b8e-ac70-0f8fae67485b}",
   "sourcePort": "output0",
   "targetUuid": "{215fba2e-552e-4cf6-9495-63542fb63e6c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{215fba2e-552e-4cf6-9495-63542fb63e6c}",
   "sourcePort": "output0",
   "targetUuid": "{cbbbf61a-1d6f-4ea4-b1fc-bb326a3a9f98}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{cbb95bd1-f2fb-4b8e-ac70-0f8fae67485b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{78e2ecc1-b7c8-49cf-9e2b-6e2333ec2ec7}",
   "sourcePort": "output0",
   "targetUuid": "{7b5a4eca-f979-4ca5-8a3a-bf4ad65d6123}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{cbbbf61a-1d6f-4ea4-b1fc-bb326a3a9f98}",
   "sourcePort": "output0",
   "targetUuid": "{78e2ecc1-b7c8-49cf-9e2b-6e2333ec2ec7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{25daee24-2334-4b1e-920e-8f1fd520748c}",
   "sourcePort": "z",
   "targetUuid": "{848bc17c-c357-4981-9f57-2b6f03502faf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{848bc17c-c357-4981-9f57-2b6f03502faf}",
   "sourcePort": "output0",
   "targetUuid": "{f8a10d92-7286-4a86-803a-0508106a6230}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{848bc17c-c357-4981-9f57-2b6f03502faf}",
   "sourcePort": "output0",
   "targetUuid": "{f8a10d92-7286-4a86-803a-0508106a6230}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{f8a10d92-7286-4a86-803a-0508106a6230}",
   "sourcePort": "output0",
   "targetUuid": "{bf4e6a92-b97d-4d30-8104-6e7829123100}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{f8a10d92-7286-4a86-803a-0508106a6230}",
   "sourcePort": "output0",
   "targetUuid": "{347a9704-0d74-4744-9f42-57a8f8b96fd1}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{cbbbf61a-1d6f-4ea4-b1fc-bb326a3a9f98}",
   "sourcePort": "output0",
   "targetUuid": "{25daee24-2334-4b1e-920e-8f1fd520748c}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{856299d5-f3a7-4ded-88d9-69cb6aeb3ade}",
   "sourcePort": "color",
   "targetUuid": "{1fc91825-f9fa-4f23-99bf-7558ff3e1bae}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{1fc91825-f9fa-4f23-99bf-7558ff3e1bae}",
   "sourcePort": "mixed",
   "targetUuid": "{b7d31a30-c778-46e6-a53e-62b0120fc190}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{1fc91825-f9fa-4f23-99bf-7558ff3e1bae}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "postGain",
   "targetUuid": "{b7d31a30-c778-46e6-a53e-62b0120fc190}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b7d31a30-c778-46e6-a53e-62b0120fc190}",
   "sourcePort": "output0",
   "targetUuid": "{dc8e5311-cd4a-4bd5-9599-f1b167165606}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{533071c4-7b7b-4ac7-b8db-3c7941f37da5}",
   "sourcePort": "normal",
   "targetUuid": "{3b73afb1-6fda-4392-86ad-427f15954f34}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{21b3fe0b-fdb4-4a87-85db-c9e005fd7be8}",
   "sourcePort": "output0",
   "targetUuid": "{5dfb50a2-3ecf-4166-965d-57ec5a9946b5}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{5dfb50a2-3ecf-4166-965d-57ec5a9946b5}",
   "sourcePort": "result",
   "targetUuid": "{e1d2671d-697e-4c7e-8a57-87271b994ead}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{e1d2671d-697e-4c7e-8a57-87271b994ead}",
   "sourcePort": "mixed",
   "targetUuid": "{156d4232-7563-4743-a55c-cfaace9468eb}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{dc8e5311-cd4a-4bd5-9599-f1b167165606}",
   "sourcePort": "output0",
   "targetUuid": "{156d4232-7563-4743-a55c-cfaace9468eb}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{e1d2671d-697e-4c7e-8a57-87271b994ead}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{3c8a911e-2bf0-47bc-bb46-1aa67ef10da1}",
   "sourcePort": "color",
   "targetUuid": "{e2d86293-c46d-4c40-9470-d7770ddd06d3}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{7b5a4eca-f979-4ca5-8a3a-bf4ad65d6123}",
   "sourcePort": "output0",
   "targetUuid": "{3c8a911e-2bf0-47bc-bb46-1aa67ef10da1}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{5f6ab734-906b-40da-899c-3258dfa55272}",
   "sourcePort": "reflection",
   "targetUuid": "{3c8a911e-2bf0-47bc-bb46-1aa67ef10da1}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{5f6ab734-906b-40da-899c-3258dfa55272}",
   "sourcePort": "uv",
   "targetUuid": "{091e83d7-462d-4e27-8abf-24f0c232f093}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{091e83d7-462d-4e27-8abf-24f0c232f093}",
   "sourcePort": "color",
   "targetUuid": "{0d02b567-c40f-481a-a7d0-ea95102e6f50}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{792ef9f0-85a0-4818-8282-87d15d3f6f46}",
   "sourcePort": "shader",
   "targetUuid": "{b2811286-e771-4ece-83a8-78f3fd900488}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{3b73afb1-6fda-4392-86ad-427f15954f34}",
   "sourcePort": "output",
   "targetUuid": "{e10f1812-324e-462e-b9d3-3892dd25df68}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{e10f1812-324e-462e-b9d3-3892dd25df68}",
   "sourcePort": "z",
   "targetUuid": "{21b3fe0b-fdb4-4a87-85db-c9e005fd7be8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "normalScaling",
   "targetUuid": "{a4e0e842-29cc-4578-ac10-cae09e31a275}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{06586389-880c-4457-a0ac-fb3b49a3acc1}",
   "sourcePort": "normal",
   "targetUuid": "{0931770c-7f13-463b-8bed-4c2ae2532bb6}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{156d4232-7563-4743-a55c-cfaace9468eb}",
   "sourcePort": "output0",
   "targetUuid": "{792ef9f0-85a0-4818-8282-87d15d3f6f46}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{c63b8fa3-baad-4a13-9b11-10cca571d148}",
   "sourcePort": "value",
   "targetUuid": "{78e2ecc1-b7c8-49cf-9e2b-6e2333ec2ec7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b363b43d-20c2-4352-bc34-be9a4438cea5}",
   "sourcePort": "value",
   "targetUuid": "{97bea0b0-633d-458e-942c-52f033699a0e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{10da114b-e49a-4d15-94f6-f29b72b54602}",
   "sourcePort": "value",
   "targetUuid": "{cbb95bd1-f2fb-4b8e-ac70-0f8fae67485b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6e24acc4-e2c2-4ee4-a757-b9eb534b197b}",
   "sourcePort": "value",
   "targetUuid": "{848bc17c-c357-4981-9f57-2b6f03502faf}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b1b6a5c9-a97c-4bd4-a0fa-0cfddc0a0630}",
   "sourcePort": "value",
   "targetUuid": "{1fc91825-f9fa-4f23-99bf-7558ff3e1bae}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{819f8fc5-22c1-4e60-9f8e-3d9ad34fec23}",
   "sourcePort": "value",
   "targetUuid": "{5dfb50a2-3ecf-4166-965d-57ec5a9946b5}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{679cf6d4-69cd-4f59-9a6e-889e3c17c179}",
   "sourcePort": "value",
   "targetUuid": "{5dfb50a2-3ecf-4166-965d-57ec5a9946b5}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{0f0a848d-9490-48fa-89ec-53518899930d}",
   "sourcePort": "value",
   "targetUuid": "{e1d2671d-697e-4c7e-8a57-87271b994ead}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a8258a3b-7940-456a-ae12-e18a84f66c3d}",
   "sourcePort": "value",
   "targetUuid": "{7b5a4eca-f979-4ca5-8a3a-bf4ad65d6123}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{568ae4ba-0b03-4235-9d0c-5a56300d78e2}",
   "sourcePort": "value",
   "targetUuid": "{21b3fe0b-fdb4-4a87-85db-c9e005fd7be8}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{091e83d7-462d-4e27-8abf-24f0c232f093}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{091e83d7-462d-4e27-8abf-24f0c232f093}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{3b73afb1-6fda-4392-86ad-427f15954f34}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{3c8a911e-2bf0-47bc-bb46-1aa67ef10da1}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{3c8a911e-2bf0-47bc-bb46-1aa67ef10da1}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{96257e33-a7b8-42f4-a981-5ef222926136}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{3c8a911e-2bf0-47bc-bb46-1aa67ef10da1}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform highp mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VIEW_MATRIX",
      "#define VIEW_MATRIX",
      "uniform mat4 viewMatrix;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (viewMatrix * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in highp vec3 worldPosition;",
      "in highp vec3 worldNormal;",
      "in highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = vec2(texCoord.x, 1.0 - texCoord.y);vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, vec2($vector.x, 1.0 - $vector.y)) : vec4($defaultColor); vec3 $color = $linearizer($inter.rgb); float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0-$uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : vec2($uv.x, 1.0 - $uv.y)) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}