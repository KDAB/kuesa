{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{64357601-35af-4180-904c-1a837e0d3f64}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4481f2bb-50bf-4f23-b803-d22484b3f1bf}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{8b78cd9a-fede-454b-894c-ce5c2f39e043}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{33b95fab-4fcf-4ffb-a4a6-478182ca6228}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5587a03f-4580-4480-926a-8bd66070b91f}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{db2e5f51-6419-41c5-82d2-c4980892ddf8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{171f191c-407c-489a-b339-6291e88da960}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{c8f0e381-172d-4cad-8831-37f85c5944fc}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{57cb5d5d-8b8f-42de-8b2d-bdd62261eaac}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{cef382e6-c9f6-466c-87e2-ffdf551b15d6}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{562784f1-d00c-4732-9e44-29c980d85bfb}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{4c51f5eb-f4e5-4f21-a803-4921e9a41f63}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3fd47913-bef7-41c7-adb0-df2015442a30}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1f99632e-f753-4262-b0b3-af313c1e3235}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0e594270-0db2-446c-903e-15df309f6589}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{5dc942aa-5e77-475c-8ea8-deabcdeec9b3}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0c5a9d96-04f1-46bf-9426-200dd277f89d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{9a36ce94-2f3a-4fd1-8b69-3a0c9bf5b2a1}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{4b08dc10-4172-4b75-8877-f3207c7e3bc1}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{75daacba-ca44-442b-b79a-a581f12d3012}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{e902cca9-c46f-4ca4-aedb-e1fed286b8b8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{fdddeb3e-fc51-40b8-950a-045fcaa78183}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{90716c40-8008-4e39-8e82-f58a2279b2fc}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{6c8545ea-8441-4f52-b6cf-2198a4a051b6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{48ef38f0-26bc-4fc2-8c43-54bd2db3b78a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{3200f389-669a-4424-8b84-784fa1657e80}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{03b6da57-c746-419b-9097-edbe42b3443d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8eb28e55-81af-4c7c-b877-577f2b1a266d}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{72af769c-bc67-4d76-aae8-af918f485133}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{9b33d2c4-57da-46bb-90b3-725fff86ebff}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ca8374fc-a66b-4a68-a6cd-1eb8904ab75b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{bb10484e-7597-4e6d-b5d5-934cb3ade534}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{1c8e9cd1-e5dc-456d-a79b-b528dc8113bb}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{bb75399f-9eb6-4558-889d-a9278e1ac15a}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{81afae98-fc9c-4e98-a7b8-87e10c64ed71}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "GLTF_YUP_CORRECTION",
   "uuid": "{026f7abb-826c-4991-8690-beaf138457ec}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b691717b-aa49-45fb-8a50-56fca91ef6da}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{fdb81d84-281e-42f7-8046-123d7146e4ee}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{e5da4100-e0a1-46bd-a3fa-8ab59db3fc79}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{36a8152d-100e-499e-b9f2-f1ba4d32e922}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{38918080-999c-4542-a51e-05b3db937133}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{dbddf754-e40d-4141-8e5b-9889749dfccb}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{3608b62e-1826-4e2a-b192-084ebe05bb3a}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{db4f6d64-7bcd-496c-a3b9-35adb4f71701}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{516228a6-e82f-4e9a-960a-4bb2a69601cf}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4c58b6ed-a403-4056-83e4-04283c123422}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{e902cca9-c46f-4ca4-aedb-e1fed286b8b8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{e902cca9-c46f-4ca4-aedb-e1fed286b8b8}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{8b78cd9a-fede-454b-894c-ce5c2f39e043}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{8b78cd9a-fede-454b-894c-ce5c2f39e043}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{e902cca9-c46f-4ca4-aedb-e1fed286b8b8}",
   "sourcePort": "mixed",
   "targetUuid": "{1f99632e-f753-4262-b0b3-af313c1e3235}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8b78cd9a-fede-454b-894c-ce5c2f39e043}",
   "sourcePort": "mixed",
   "targetUuid": "{ca8374fc-a66b-4a68-a6cd-1eb8904ab75b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1f99632e-f753-4262-b0b3-af313c1e3235}",
   "sourcePort": "output0",
   "targetUuid": "{4481f2bb-50bf-4f23-b803-d22484b3f1bf}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4481f2bb-50bf-4f23-b803-d22484b3f1bf}",
   "sourcePort": "output0",
   "targetUuid": "{64357601-35af-4180-904c-1a837e0d3f64}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{33b95fab-4fcf-4ffb-a4a6-478182ca6228}",
   "sourcePort": "output0",
   "targetUuid": "{64357601-35af-4180-904c-1a837e0d3f64}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{64357601-35af-4180-904c-1a837e0d3f64}",
   "sourcePort": "output0",
   "targetUuid": "{3200f389-669a-4424-8b84-784fa1657e80}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{4481f2bb-50bf-4f23-b803-d22484b3f1bf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{33b95fab-4fcf-4ffb-a4a6-478182ca6228}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ca8374fc-a66b-4a68-a6cd-1eb8904ab75b}",
   "sourcePort": "output0",
   "targetUuid": "{33b95fab-4fcf-4ffb-a4a6-478182ca6228}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{562784f1-d00c-4732-9e44-29c980d85bfb}",
   "sourcePort": "normal",
   "targetUuid": "{cef382e6-c9f6-466c-87e2-ffdf551b15d6}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{cef382e6-c9f6-466c-87e2-ffdf551b15d6}",
   "sourcePort": "transformed",
   "targetUuid": "{57cb5d5d-8b8f-42de-8b2d-bdd62261eaac}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{57cb5d5d-8b8f-42de-8b2d-bdd62261eaac}",
   "sourcePort": "output0",
   "targetUuid": "{c8f0e381-172d-4cad-8831-37f85c5944fc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{c8f0e381-172d-4cad-8831-37f85c5944fc}",
   "sourcePort": "output0",
   "targetUuid": "{171f191c-407c-489a-b339-6291e88da960}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4c51f5eb-f4e5-4f21-a803-4921e9a41f63}",
   "sourcePort": "output0",
   "targetUuid": "{171f191c-407c-489a-b339-6291e88da960}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{171f191c-407c-489a-b339-6291e88da960}",
   "sourcePort": "output0",
   "targetUuid": "{db2e5f51-6419-41c5-82d2-c4980892ddf8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "normalScaling",
   "targetUuid": "{bb75399f-9eb6-4558-889d-a9278e1ac15a}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{4c51f5eb-f4e5-4f21-a803-4921e9a41f63}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5587a03f-4580-4480-926a-8bd66070b91f}",
   "sourcePort": "output0",
   "targetUuid": "{8eb28e55-81af-4c7c-b877-577f2b1a266d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{db2e5f51-6419-41c5-82d2-c4980892ddf8}",
   "sourcePort": "output0",
   "targetUuid": "{5587a03f-4580-4480-926a-8bd66070b91f}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5dc942aa-5e77-475c-8ea8-deabcdeec9b3}",
   "sourcePort": "z",
   "targetUuid": "{0e594270-0db2-446c-903e-15df309f6589}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0e594270-0db2-446c-903e-15df309f6589}",
   "sourcePort": "output0",
   "targetUuid": "{0c5a9d96-04f1-46bf-9426-200dd277f89d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{0e594270-0db2-446c-903e-15df309f6589}",
   "sourcePort": "output0",
   "targetUuid": "{0c5a9d96-04f1-46bf-9426-200dd277f89d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0c5a9d96-04f1-46bf-9426-200dd277f89d}",
   "sourcePort": "output0",
   "targetUuid": "{e902cca9-c46f-4ca4-aedb-e1fed286b8b8}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{0c5a9d96-04f1-46bf-9426-200dd277f89d}",
   "sourcePort": "output0",
   "targetUuid": "{8b78cd9a-fede-454b-894c-ce5c2f39e043}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{db2e5f51-6419-41c5-82d2-c4980892ddf8}",
   "sourcePort": "output0",
   "targetUuid": "{5dc942aa-5e77-475c-8ea8-deabcdeec9b3}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{75daacba-ca44-442b-b79a-a581f12d3012}",
   "sourcePort": "color",
   "targetUuid": "{4b08dc10-4172-4b75-8877-f3207c7e3bc1}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{4b08dc10-4172-4b75-8877-f3207c7e3bc1}",
   "sourcePort": "mixed",
   "targetUuid": "{3fd47913-bef7-41c7-adb0-df2015442a30}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{4b08dc10-4172-4b75-8877-f3207c7e3bc1}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "postGain",
   "targetUuid": "{3fd47913-bef7-41c7-adb0-df2015442a30}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3fd47913-bef7-41c7-adb0-df2015442a30}",
   "sourcePort": "output0",
   "targetUuid": "{3200f389-669a-4424-8b84-784fa1657e80}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{81afae98-fc9c-4e98-a7b8-87e10c64ed71}",
   "sourcePort": "normal",
   "targetUuid": "{026f7abb-826c-4991-8690-beaf138457ec}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{6c8545ea-8441-4f52-b6cf-2198a4a051b6}",
   "sourcePort": "z",
   "targetUuid": "{90716c40-8008-4e39-8e82-f58a2279b2fc}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{90716c40-8008-4e39-8e82-f58a2279b2fc}",
   "sourcePort": "output0",
   "targetUuid": "{fdddeb3e-fc51-40b8-950a-045fcaa78183}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{fdddeb3e-fc51-40b8-950a-045fcaa78183}",
   "sourcePort": "result",
   "targetUuid": "{03b6da57-c746-419b-9097-edbe42b3443d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{03b6da57-c746-419b-9097-edbe42b3443d}",
   "sourcePort": "mixed",
   "targetUuid": "{48ef38f0-26bc-4fc2-8c43-54bd2db3b78a}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{3200f389-669a-4424-8b84-784fa1657e80}",
   "sourcePort": "output0",
   "targetUuid": "{48ef38f0-26bc-4fc2-8c43-54bd2db3b78a}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{03b6da57-c746-419b-9097-edbe42b3443d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{72af769c-bc67-4d76-aae8-af918f485133}",
   "sourcePort": "color",
   "targetUuid": "{1f99632e-f753-4262-b0b3-af313c1e3235}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{8eb28e55-81af-4c7c-b877-577f2b1a266d}",
   "sourcePort": "output0",
   "targetUuid": "{72af769c-bc67-4d76-aae8-af918f485133}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{9a36ce94-2f3a-4fd1-8b69-3a0c9bf5b2a1}",
   "sourcePort": "reflection",
   "targetUuid": "{72af769c-bc67-4d76-aae8-af918f485133}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{9a36ce94-2f3a-4fd1-8b69-3a0c9bf5b2a1}",
   "sourcePort": "uv",
   "targetUuid": "{9b33d2c4-57da-46bb-90b3-725fff86ebff}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{9b33d2c4-57da-46bb-90b3-725fff86ebff}",
   "sourcePort": "color",
   "targetUuid": "{ca8374fc-a66b-4a68-a6cd-1eb8904ab75b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{48ef38f0-26bc-4fc2-8c43-54bd2db3b78a}",
   "sourcePort": "output0",
   "targetUuid": "{1c8e9cd1-e5dc-456d-a79b-b528dc8113bb}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{1c8e9cd1-e5dc-456d-a79b-b528dc8113bb}",
   "sourcePort": "shader",
   "targetUuid": "{bb10484e-7597-4e6d-b5d5-934cb3ade534}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{bb75399f-9eb6-4558-889d-a9278e1ac15a}",
   "sourcePort": "output",
   "targetUuid": "{c8f0e381-172d-4cad-8831-37f85c5944fc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{026f7abb-826c-4991-8690-beaf138457ec}",
   "sourcePort": "output",
   "targetUuid": "{6c8545ea-8441-4f52-b6cf-2198a4a051b6}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{b691717b-aa49-45fb-8a50-56fca91ef6da}",
   "sourcePort": "value",
   "targetUuid": "{5587a03f-4580-4480-926a-8bd66070b91f}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fdb81d84-281e-42f7-8046-123d7146e4ee}",
   "sourcePort": "value",
   "targetUuid": "{57cb5d5d-8b8f-42de-8b2d-bdd62261eaac}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{e5da4100-e0a1-46bd-a3fa-8ab59db3fc79}",
   "sourcePort": "value",
   "targetUuid": "{4c51f5eb-f4e5-4f21-a803-4921e9a41f63}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{36a8152d-100e-499e-b9f2-f1ba4d32e922}",
   "sourcePort": "value",
   "targetUuid": "{0e594270-0db2-446c-903e-15df309f6589}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{38918080-999c-4542-a51e-05b3db937133}",
   "sourcePort": "value",
   "targetUuid": "{4b08dc10-4172-4b75-8877-f3207c7e3bc1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{dbddf754-e40d-4141-8e5b-9889749dfccb}",
   "sourcePort": "value",
   "targetUuid": "{fdddeb3e-fc51-40b8-950a-045fcaa78183}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{3608b62e-1826-4e2a-b192-084ebe05bb3a}",
   "sourcePort": "value",
   "targetUuid": "{fdddeb3e-fc51-40b8-950a-045fcaa78183}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{db4f6d64-7bcd-496c-a3b9-35adb4f71701}",
   "sourcePort": "value",
   "targetUuid": "{90716c40-8008-4e39-8e82-f58a2279b2fc}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{516228a6-e82f-4e9a-960a-4bb2a69601cf}",
   "sourcePort": "value",
   "targetUuid": "{03b6da57-c746-419b-9097-edbe42b3443d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4c58b6ed-a403-4056-83e4-04283c123422}",
   "sourcePort": "value",
   "targetUuid": "{8eb28e55-81af-4c7c-b877-577f2b1a266d}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{72af769c-bc67-4d76-aae8-af918f485133}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{72af769c-bc67-4d76-aae8-af918f485133}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{72af769c-bc67-4d76-aae8-af918f485133}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{9b33d2c4-57da-46bb-90b3-725fff86ebff}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{9b33d2c4-57da-46bb-90b3-725fff86ebff}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{bb75399f-9eb6-4558-889d-a9278e1ac15a}",
   "targetPort": "gltfYUp"
  },
  {
   "sourceUuid": "{719a3539-8e98-41ce-9de5-6cbce11e700a}",
   "sourcePort": "gltfYUp",
   "targetUuid": "{026f7abb-826c-4991-8690-beaf138457ec}",
   "targetPort": "gltfYUp"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "GLTF_YUP_CORRECTION": {
   "inputs": [
    "gltfYUp",
    "input"
   ],
   "outputs": [
    "output"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $output = $gltfYUp ? vec3($input.x, -$input.z, $input.y) : $input;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "gltfYUp"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float postVertexColor;\n    float postGain;\n    bool gltfYUp;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $gltfYUp = properties.gltfYUp;"
    }
   ]
  }
 }
}