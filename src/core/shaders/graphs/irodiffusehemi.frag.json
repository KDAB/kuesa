{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5335b630-404c-4334-96b9-6be3cfe57930}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b3b729ee-e2ea-4bc5-bda8-ebdebad882c2}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{a5d94806-2ef1-442d-bb2f-f863d7c949f8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d1083466-e7cb-4a7a-8f9a-5d3da559f0ad}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{ac7f8546-b75d-43a8-b182-80c71a7b7a27}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{985784fa-fb26-4fa5-953d-de658c331656}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{bab07c61-52b2-4806-8a76-ae9918f6d47d}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bcc8d66d-2b63-45ae-bcfe-5790f3d5622c}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{7f8fa8f7-3119-473e-b0d7-50a414ae0b75}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{bfbe08c1-fadf-4bd1-bf0e-c16b584bb32e}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{207a71df-954f-4da1-bc00-ed5c4abcd8ad}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{c0b9594a-3ac5-416d-b7f2-ff3f99fc995a}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1c8ca5a1-e27d-4cda-b455-222fe2588175}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d15fe52d-eea0-46fa-8988-d0a1b02125b9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5b86050d-594e-47e9-9096-3d8e02f0c584}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{63784543-6a8b-4274-91a3-24ed322db0df}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{44eb5eef-bb24-41a8-ad02-e16213530fbf}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{664f84c0-4f2c-4763-94b9-ec87d5ad783c}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{27c47c6a-ce1a-42b5-a261-60938fe49054}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{281b664a-ca3f-4ceb-975a-1dd14bc0fdc1}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{dece744a-36e2-479a-ac8c-53b9e1bd5ff8}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{9a0988ee-75d0-4a18-b9cc-29d4387d9651}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{5df7a18a-4e5d-443e-a5d9-25de29344ba1}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "CLAMP",
   "uuid": "{cb1501d0-3d40-44d2-80c8-2390f7e3aa04}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5d441876-a019-47d2-b85e-965bb9acc5d9}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{e5803309-d7b9-4dec-8305-2b32c6691a2b}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{af434674-e5d3-46ad-bace-042ea23e5bd1}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a897fda1-3704-437f-a6c1-1447b2a8afed}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{fd7d92f1-4c65-41ab-bdca-e34dd0bcb470}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{6ec61d35-07ed-4d71-91ce-11b000454da7}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{31afe9b4-c2c0-4d98-937b-9111c87935b0}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{af281535-018e-469d-b517-5c0316b0f19b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{31dae428-5011-4356-98c6-04e81795f15d}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{c42e4416-861f-4bf4-a6bb-b1483e46251d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{5cbbd654-4edb-4138-9fbd-15896246fefe}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{d0d3af7e-458a-4d57-8234-e0e2b854fb1b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{c1d75863-5940-41ba-a399-59c479f47313}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{fc5c8a25-a8ad-4ee6-8459-33bd214d4283}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4e16fa62-039d-44b6-9d62-49145580449b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{195f4f30-77b3-4be8-acac-667acb91da5d}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{d2428661-95cf-4649-8fd2-eaa2981fad31}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{7cfbd67f-427a-4f3f-af7c-8bb08ce0b053}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{08e023c3-fd88-4578-a581-473904613235}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{822a0890-7a22-4bf8-8bee-64be25ad8216}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{5df7a18a-4e5d-443e-a5d9-25de29344ba1}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{5df7a18a-4e5d-443e-a5d9-25de29344ba1}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{a5d94806-2ef1-442d-bb2f-f863d7c949f8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{a5d94806-2ef1-442d-bb2f-f863d7c949f8}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{5df7a18a-4e5d-443e-a5d9-25de29344ba1}",
   "sourcePort": "mixed",
   "targetUuid": "{5b86050d-594e-47e9-9096-3d8e02f0c584}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a5d94806-2ef1-442d-bb2f-f863d7c949f8}",
   "sourcePort": "mixed",
   "targetUuid": "{d1083466-e7cb-4a7a-8f9a-5d3da559f0ad}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5b86050d-594e-47e9-9096-3d8e02f0c584}",
   "sourcePort": "output0",
   "targetUuid": "{b3b729ee-e2ea-4bc5-bda8-ebdebad882c2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b3b729ee-e2ea-4bc5-bda8-ebdebad882c2}",
   "sourcePort": "output0",
   "targetUuid": "{5335b630-404c-4334-96b9-6be3cfe57930}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{ac7f8546-b75d-43a8-b182-80c71a7b7a27}",
   "sourcePort": "output0",
   "targetUuid": "{5335b630-404c-4334-96b9-6be3cfe57930}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5335b630-404c-4334-96b9-6be3cfe57930}",
   "sourcePort": "output0",
   "targetUuid": "{fd7d92f1-4c65-41ab-bdca-e34dd0bcb470}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{b3b729ee-e2ea-4bc5-bda8-ebdebad882c2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{ac7f8546-b75d-43a8-b182-80c71a7b7a27}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d1083466-e7cb-4a7a-8f9a-5d3da559f0ad}",
   "sourcePort": "output0",
   "targetUuid": "{ac7f8546-b75d-43a8-b182-80c71a7b7a27}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c0b9594a-3ac5-416d-b7f2-ff3f99fc995a}",
   "sourcePort": "normal",
   "targetUuid": "{207a71df-954f-4da1-bc00-ed5c4abcd8ad}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{207a71df-954f-4da1-bc00-ed5c4abcd8ad}",
   "sourcePort": "transformed",
   "targetUuid": "{bfbe08c1-fadf-4bd1-bf0e-c16b584bb32e}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bfbe08c1-fadf-4bd1-bf0e-c16b584bb32e}",
   "sourcePort": "output0",
   "targetUuid": "{7f8fa8f7-3119-473e-b0d7-50a414ae0b75}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{7f8fa8f7-3119-473e-b0d7-50a414ae0b75}",
   "sourcePort": "output0",
   "targetUuid": "{bcc8d66d-2b63-45ae-bcfe-5790f3d5622c}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1c8ca5a1-e27d-4cda-b455-222fe2588175}",
   "sourcePort": "output0",
   "targetUuid": "{bcc8d66d-2b63-45ae-bcfe-5790f3d5622c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{bcc8d66d-2b63-45ae-bcfe-5790f3d5622c}",
   "sourcePort": "output0",
   "targetUuid": "{bab07c61-52b2-4806-8a76-ae9918f6d47d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "normalScaling",
   "targetUuid": "{7f8fa8f7-3119-473e-b0d7-50a414ae0b75}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{1c8ca5a1-e27d-4cda-b455-222fe2588175}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{985784fa-fb26-4fa5-953d-de658c331656}",
   "sourcePort": "output0",
   "targetUuid": "{31dae428-5011-4356-98c6-04e81795f15d}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{bab07c61-52b2-4806-8a76-ae9918f6d47d}",
   "sourcePort": "output0",
   "targetUuid": "{985784fa-fb26-4fa5-953d-de658c331656}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{664f84c0-4f2c-4763-94b9-ec87d5ad783c}",
   "sourcePort": "z",
   "targetUuid": "{44eb5eef-bb24-41a8-ad02-e16213530fbf}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{44eb5eef-bb24-41a8-ad02-e16213530fbf}",
   "sourcePort": "output0",
   "targetUuid": "{27c47c6a-ce1a-42b5-a261-60938fe49054}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{44eb5eef-bb24-41a8-ad02-e16213530fbf}",
   "sourcePort": "output0",
   "targetUuid": "{27c47c6a-ce1a-42b5-a261-60938fe49054}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{27c47c6a-ce1a-42b5-a261-60938fe49054}",
   "sourcePort": "output0",
   "targetUuid": "{5df7a18a-4e5d-443e-a5d9-25de29344ba1}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{27c47c6a-ce1a-42b5-a261-60938fe49054}",
   "sourcePort": "output0",
   "targetUuid": "{a5d94806-2ef1-442d-bb2f-f863d7c949f8}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{bab07c61-52b2-4806-8a76-ae9918f6d47d}",
   "sourcePort": "output0",
   "targetUuid": "{664f84c0-4f2c-4763-94b9-ec87d5ad783c}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{9a0988ee-75d0-4a18-b9cc-29d4387d9651}",
   "sourcePort": "color",
   "targetUuid": "{dece744a-36e2-479a-ac8c-53b9e1bd5ff8}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{dece744a-36e2-479a-ac8c-53b9e1bd5ff8}",
   "sourcePort": "mixed",
   "targetUuid": "{d15fe52d-eea0-46fa-8988-d0a1b02125b9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{dece744a-36e2-479a-ac8c-53b9e1bd5ff8}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "postGain",
   "targetUuid": "{d15fe52d-eea0-46fa-8988-d0a1b02125b9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d15fe52d-eea0-46fa-8988-d0a1b02125b9}",
   "sourcePort": "output0",
   "targetUuid": "{fd7d92f1-4c65-41ab-bdca-e34dd0bcb470}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{63784543-6a8b-4274-91a3-24ed322db0df}",
   "sourcePort": "color",
   "targetUuid": "{d1083466-e7cb-4a7a-8f9a-5d3da559f0ad}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{af434674-e5d3-46ad-bace-042ea23e5bd1}",
   "sourcePort": "normal",
   "targetUuid": "{e5803309-d7b9-4dec-8305-2b32c6691a2b}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{e5803309-d7b9-4dec-8305-2b32c6691a2b}",
   "sourcePort": "z",
   "targetUuid": "{5d441876-a019-47d2-b85e-965bb9acc5d9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{5d441876-a019-47d2-b85e-965bb9acc5d9}",
   "sourcePort": "output0",
   "targetUuid": "{cb1501d0-3d40-44d2-80c8-2390f7e3aa04}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{cb1501d0-3d40-44d2-80c8-2390f7e3aa04}",
   "sourcePort": "result",
   "targetUuid": "{6ec61d35-07ed-4d71-91ce-11b000454da7}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{6ec61d35-07ed-4d71-91ce-11b000454da7}",
   "sourcePort": "mixed",
   "targetUuid": "{a897fda1-3704-437f-a6c1-1447b2a8afed}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fd7d92f1-4c65-41ab-bdca-e34dd0bcb470}",
   "sourcePort": "output0",
   "targetUuid": "{a897fda1-3704-437f-a6c1-1447b2a8afed}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{a897fda1-3704-437f-a6c1-1447b2a8afed}",
   "sourcePort": "output0",
   "targetUuid": "{af281535-018e-469d-b517-5c0316b0f19b}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{6ec61d35-07ed-4d71-91ce-11b000454da7}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{af281535-018e-469d-b517-5c0316b0f19b}",
   "sourcePort": "shader",
   "targetUuid": "{31afe9b4-c2c0-4d98-937b-9111c87935b0}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{281b664a-ca3f-4ceb-975a-1dd14bc0fdc1}",
   "sourcePort": "uv",
   "targetUuid": "{63784543-6a8b-4274-91a3-24ed322db0df}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{c0b9594a-3ac5-416d-b7f2-ff3f99fc995a}",
   "sourcePort": "position",
   "targetUuid": "{c42e4416-861f-4bf4-a6bb-b1483e46251d}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{c42e4416-861f-4bf4-a6bb-b1483e46251d}",
   "sourcePort": "color",
   "targetUuid": "{5b86050d-594e-47e9-9096-3d8e02f0c584}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{31dae428-5011-4356-98c6-04e81795f15d}",
   "sourcePort": "output0",
   "targetUuid": "{c42e4416-861f-4bf4-a6bb-b1483e46251d}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{5cbbd654-4edb-4138-9fbd-15896246fefe}",
   "sourcePort": "value",
   "targetUuid": "{985784fa-fb26-4fa5-953d-de658c331656}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{d0d3af7e-458a-4d57-8234-e0e2b854fb1b}",
   "sourcePort": "value",
   "targetUuid": "{bfbe08c1-fadf-4bd1-bf0e-c16b584bb32e}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{c1d75863-5940-41ba-a399-59c479f47313}",
   "sourcePort": "value",
   "targetUuid": "{1c8ca5a1-e27d-4cda-b455-222fe2588175}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{fc5c8a25-a8ad-4ee6-8459-33bd214d4283}",
   "sourcePort": "value",
   "targetUuid": "{44eb5eef-bb24-41a8-ad02-e16213530fbf}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{4e16fa62-039d-44b6-9d62-49145580449b}",
   "sourcePort": "value",
   "targetUuid": "{dece744a-36e2-479a-ac8c-53b9e1bd5ff8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{195f4f30-77b3-4be8-acac-667acb91da5d}",
   "sourcePort": "value",
   "targetUuid": "{cb1501d0-3d40-44d2-80c8-2390f7e3aa04}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{d2428661-95cf-4649-8fd2-eaa2981fad31}",
   "sourcePort": "value",
   "targetUuid": "{cb1501d0-3d40-44d2-80c8-2390f7e3aa04}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{7cfbd67f-427a-4f3f-af7c-8bb08ce0b053}",
   "sourcePort": "value",
   "targetUuid": "{5d441876-a019-47d2-b85e-965bb9acc5d9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{08e023c3-fd88-4578-a581-473904613235}",
   "sourcePort": "value",
   "targetUuid": "{6ec61d35-07ed-4d71-91ce-11b000454da7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{822a0890-7a22-4bf8-8bee-64be25ad8216}",
   "sourcePort": "value",
   "targetUuid": "{31dae428-5011-4356-98c6-04e81795f15d}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{63784543-6a8b-4274-91a3-24ed322db0df}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{63784543-6a8b-4274-91a3-24ed322db0df}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{c42e4416-861f-4bf4-a6bb-b1483e46251d}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{c42e4416-861f-4bf4-a6bb-b1483e46251d}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{b3ec3bff-0518-474a-9e3b-3bf41aebd044}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{c42e4416-861f-4bf4-a6bb-b1483e46251d}",
   "targetPort": "projectTexture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "usesDiffuseMap",
    "diffuseMap",
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "MaterialProperties $properties = properties;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;"
    }
   ]
  }
 }
}