{
 "nodes": [
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{669553b6-5d69-4b94-a1ce-caf35bc188ec}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{369c46a5-7122-4729-92b7-e04082ff7fe2}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{d0f24bde-49a1-4eed-99ce-be0c05937ed5}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{14829814-7b8a-48f9-aa07-98fb4bda87c8}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{8d456922-7640-4557-956b-10db31ba9750}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "normalize",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "UNARY_MATH_FUNCTION",
   "uuid": "{28bbf5d8-5246-4afd-85b8-a3d5ac4b5cf6}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{6516e751-536c-42ef-9e12-72f89141a409}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{970be5ef-8164-4b46-b2fe-ac6945bfbdd9}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{d03ed4e6-1bc0-4c78-8cdb-7641bd1f2d46}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VECT_TRANSFORM",
   "uuid": "{fd071ae2-3c1b-4222-b4e7-b4c176f0910c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{2fa91257-a0e2-421a-a443-513455781ace}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{dca9fd06-bb83-494e-835b-d7da6b1a2115}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{1f0a9933-8403-4b3d-973e-bf448d70a337}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{86408717-757d-48b9-96bf-e3080a6ae650}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "-",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{b4be8b33-8982-4a1c-a7d8-052114edef61}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{d2760af5-ab2f-4dc4-87d9-65d5882ff270}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{0f837ce9-1d69-4614-a90b-acc64e37d729}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "TEX_COORD",
   "uuid": "{23e8e4d0-674f-477f-a4f6-df3ae5a73d3d}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{89de41bd-cc2c-47b4-b5c3-91d7f411ad5d}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "VERTEX_COLOR",
   "uuid": "{e74ce67d-bcfc-417e-b9aa-c7563312e620}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{795e8958-a135-4588-89a9-b205d69f726c}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "CLAMP",
   "uuid": "{790ff4cb-6aeb-4f77-9f20-0f278bd32131}"
  },
  {
   "layers": [],
   "parameters": {
    "clamp": {
     "type": "QShaderLanguage::Bool",
     "value": "false"
    },
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{76166cb4-720a-4fca-9530-e7f8b6906370}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "SEPXYZ",
   "uuid": "{e9dbc484-115d-4050-8b7a-1bcd1ebdf565}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "NEW_GEOMETRY",
   "uuid": "{92215957-551c-4b9f-8e38-ac7e6a371419}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{77cdd1da-0273-4708-9b0c-c9b68558ca9b}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{5f3e5a98-5fdd-4e44-9b7e-ab8a6ee74bd7}"
  },
  {
   "layers": [],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "MIX",
   "uuid": "{18fcbe48-dcbb-4871-b5a1-b9b6109076d9}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_PROPERTIES",
   "uuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "+",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{a0bc3cab-835b-4d73-85e3-4c83a585dbda}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "reflectionMap",
    "condition": "usesReflectionMap",
    "linearizer": "sRGBtoLinear",
    "projection": "equiRectangular"
   },
   "type": "ENV_TEX_IMAGE",
   "uuid": "{f3dcfda0-ae18-4840-9e59-83e1aa364388}"
  },
  {
   "layers": [],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "name": "diffuseMap",
    "condition": "usesDiffuseMap",
    "linearizer": "sRGBtoLinear"
   },
   "type": "TEX_IMAGE",
   "uuid": "{24ab2d9f-15cf-4a5e-987f-d60ba8d17b41}"
  },
  {
   "layers": [],
   "parameters": {
    "operation": "*",
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "BINARY_MATH_OPERATION",
   "uuid": "{39ce3349-774b-4d94-8928-cf8f2dcf6636}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "MATERIAL_OUTPUT",
   "uuid": "{d352c7a2-3302-450e-85e7-2e8beffa63e1}"
  },
  {
   "layers": [],
   "parameters": {},
   "type": "COLOR_TO_SHADER",
   "uuid": "{6a0a2ead-492d-489c-8bb5-5dc7218141c2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{b7683ac0-55ce-4e10-8522-97374d0f9322}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{6a48d65f-07f2-43cb-bc3a-fce4dcda4acf}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{90179b60-e42f-45be-8452-f10b202aad97}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{6de3c5b0-e0a8-42cc-ba41-76e730d5977e}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{790e3a8f-7285-4593-94f2-707fdfcddbb2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{996adc59-a286-4076-ae5b-a885db2c80d2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{95219bac-aeb8-4f95-aeee-22ee568c24d2}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "-1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "type": "constant",
   "uuid": "{d8b84771-c5fa-4a78-aee8-6f7b31946dc9}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "1.0,1.0,1.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{ffe68929-c533-4340-8b7b-57857a4f282b}"
  },
  {
   "layers": [],
   "parameters": {
    "constant": "0.5,0.5,0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "type": "constant",
   "uuid": "{4c775ecc-c3f3-43e8-b1da-22d08631fab3}"
  }
 ],
 "edges": [
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "reflectionInnerFilter",
   "targetUuid": "{795e8958-a135-4588-89a9-b205d69f726c}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "reflectionOuterFilter",
   "targetUuid": "{795e8958-a135-4588-89a9-b205d69f726c}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "diffuseInnerFilter",
   "targetUuid": "{d0f24bde-49a1-4eed-99ce-be0c05937ed5}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "diffuseOuterFilter",
   "targetUuid": "{d0f24bde-49a1-4eed-99ce-be0c05937ed5}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{795e8958-a135-4588-89a9-b205d69f726c}",
   "sourcePort": "mixed",
   "targetUuid": "{86408717-757d-48b9-96bf-e3080a6ae650}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d0f24bde-49a1-4eed-99ce-be0c05937ed5}",
   "sourcePort": "mixed",
   "targetUuid": "{39ce3349-774b-4d94-8928-cf8f2dcf6636}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{86408717-757d-48b9-96bf-e3080a6ae650}",
   "sourcePort": "output0",
   "targetUuid": "{369c46a5-7122-4729-92b7-e04082ff7fe2}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{369c46a5-7122-4729-92b7-e04082ff7fe2}",
   "sourcePort": "output0",
   "targetUuid": "{669553b6-5d69-4b94-a1ce-caf35bc188ec}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{14829814-7b8a-48f9-aa07-98fb4bda87c8}",
   "sourcePort": "output0",
   "targetUuid": "{669553b6-5d69-4b94-a1ce-caf35bc188ec}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{669553b6-5d69-4b94-a1ce-caf35bc188ec}",
   "sourcePort": "output0",
   "targetUuid": "{5f3e5a98-5fdd-4e44-9b7e-ab8a6ee74bd7}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "reflectionGain",
   "targetUuid": "{369c46a5-7122-4729-92b7-e04082ff7fe2}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "diffuseGain",
   "targetUuid": "{14829814-7b8a-48f9-aa07-98fb4bda87c8}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{39ce3349-774b-4d94-8928-cf8f2dcf6636}",
   "sourcePort": "output0",
   "targetUuid": "{14829814-7b8a-48f9-aa07-98fb4bda87c8}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{2fa91257-a0e2-421a-a443-513455781ace}",
   "sourcePort": "normal",
   "targetUuid": "{fd071ae2-3c1b-4222-b4e7-b4c176f0910c}",
   "targetPort": "input"
  },
  {
   "layers": [],
   "sourceUuid": "{fd071ae2-3c1b-4222-b4e7-b4c176f0910c}",
   "sourcePort": "transformed",
   "targetUuid": "{d03ed4e6-1bc0-4c78-8cdb-7641bd1f2d46}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d03ed4e6-1bc0-4c78-8cdb-7641bd1f2d46}",
   "sourcePort": "output0",
   "targetUuid": "{970be5ef-8164-4b46-b2fe-ac6945bfbdd9}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{970be5ef-8164-4b46-b2fe-ac6945bfbdd9}",
   "sourcePort": "output0",
   "targetUuid": "{6516e751-536c-42ef-9e12-72f89141a409}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{dca9fd06-bb83-494e-835b-d7da6b1a2115}",
   "sourcePort": "output0",
   "targetUuid": "{6516e751-536c-42ef-9e12-72f89141a409}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6516e751-536c-42ef-9e12-72f89141a409}",
   "sourcePort": "output0",
   "targetUuid": "{28bbf5d8-5246-4afd-85b8-a3d5ac4b5cf6}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "normalScaling",
   "targetUuid": "{970be5ef-8164-4b46-b2fe-ac6945bfbdd9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "normalDisturb",
   "targetUuid": "{dca9fd06-bb83-494e-835b-d7da6b1a2115}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{8d456922-7640-4557-956b-10db31ba9750}",
   "sourcePort": "output0",
   "targetUuid": "{a0bc3cab-835b-4d73-85e3-4c83a585dbda}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{28bbf5d8-5246-4afd-85b8-a3d5ac4b5cf6}",
   "sourcePort": "output0",
   "targetUuid": "{8d456922-7640-4557-956b-10db31ba9750}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{d2760af5-ab2f-4dc4-87d9-65d5882ff270}",
   "sourcePort": "z",
   "targetUuid": "{b4be8b33-8982-4a1c-a7d8-052114edef61}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{b4be8b33-8982-4a1c-a7d8-052114edef61}",
   "sourcePort": "output0",
   "targetUuid": "{0f837ce9-1d69-4614-a90b-acc64e37d729}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{b4be8b33-8982-4a1c-a7d8-052114edef61}",
   "sourcePort": "output0",
   "targetUuid": "{0f837ce9-1d69-4614-a90b-acc64e37d729}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{0f837ce9-1d69-4614-a90b-acc64e37d729}",
   "sourcePort": "output0",
   "targetUuid": "{795e8958-a135-4588-89a9-b205d69f726c}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{0f837ce9-1d69-4614-a90b-acc64e37d729}",
   "sourcePort": "output0",
   "targetUuid": "{d0f24bde-49a1-4eed-99ce-be0c05937ed5}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{28bbf5d8-5246-4afd-85b8-a3d5ac4b5cf6}",
   "sourcePort": "output0",
   "targetUuid": "{d2760af5-ab2f-4dc4-87d9-65d5882ff270}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{e74ce67d-bcfc-417e-b9aa-c7563312e620}",
   "sourcePort": "color",
   "targetUuid": "{89de41bd-cc2c-47b4-b5c3-91d7f411ad5d}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{89de41bd-cc2c-47b4-b5c3-91d7f411ad5d}",
   "sourcePort": "mixed",
   "targetUuid": "{1f0a9933-8403-4b3d-973e-bf448d70a337}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "postVertexColor",
   "targetUuid": "{89de41bd-cc2c-47b4-b5c3-91d7f411ad5d}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "postGain",
   "targetUuid": "{1f0a9933-8403-4b3d-973e-bf448d70a337}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{1f0a9933-8403-4b3d-973e-bf448d70a337}",
   "sourcePort": "output0",
   "targetUuid": "{5f3e5a98-5fdd-4e44-9b7e-ab8a6ee74bd7}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{92215957-551c-4b9f-8e38-ac7e6a371419}",
   "sourcePort": "normal",
   "targetUuid": "{e9dbc484-115d-4050-8b7a-1bcd1ebdf565}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{e9dbc484-115d-4050-8b7a-1bcd1ebdf565}",
   "sourcePort": "z",
   "targetUuid": "{76166cb4-720a-4fca-9530-e7f8b6906370}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{76166cb4-720a-4fca-9530-e7f8b6906370}",
   "sourcePort": "output0",
   "targetUuid": "{790ff4cb-6aeb-4f77-9f20-0f278bd32131}",
   "targetPort": "value"
  },
  {
   "layers": [],
   "sourceUuid": "{790ff4cb-6aeb-4f77-9f20-0f278bd32131}",
   "sourcePort": "result",
   "targetUuid": "{18fcbe48-dcbb-4871-b5a1-b9b6109076d9}",
   "targetPort": "fac"
  },
  {
   "layers": [],
   "sourceUuid": "{18fcbe48-dcbb-4871-b5a1-b9b6109076d9}",
   "sourcePort": "mixed",
   "targetUuid": "{77cdd1da-0273-4708-9b0c-c9b68558ca9b}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{5f3e5a98-5fdd-4e44-9b7e-ab8a6ee74bd7}",
   "sourcePort": "output0",
   "targetUuid": "{77cdd1da-0273-4708-9b0c-c9b68558ca9b}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "postHemiFilter",
   "targetUuid": "{18fcbe48-dcbb-4871-b5a1-b9b6109076d9}",
   "targetPort": "input2"
  },
  {
   "layers": [],
   "sourceUuid": "{f3dcfda0-ae18-4840-9e59-83e1aa364388}",
   "sourcePort": "color",
   "targetUuid": "{86408717-757d-48b9-96bf-e3080a6ae650}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{a0bc3cab-835b-4d73-85e3-4c83a585dbda}",
   "sourcePort": "output0",
   "targetUuid": "{f3dcfda0-ae18-4840-9e59-83e1aa364388}",
   "targetPort": "uv"
  },
  {
   "layers": [],
   "sourceUuid": "{23e8e4d0-674f-477f-a4f6-df3ae5a73d3d}",
   "sourcePort": "reflection",
   "targetUuid": "{f3dcfda0-ae18-4840-9e59-83e1aa364388}",
   "targetPort": "position"
  },
  {
   "layers": [],
   "sourceUuid": "{23e8e4d0-674f-477f-a4f6-df3ae5a73d3d}",
   "sourcePort": "uv",
   "targetUuid": "{24ab2d9f-15cf-4a5e-987f-d60ba8d17b41}",
   "targetPort": "vector"
  },
  {
   "layers": [],
   "sourceUuid": "{24ab2d9f-15cf-4a5e-987f-d60ba8d17b41}",
   "sourcePort": "color",
   "targetUuid": "{39ce3349-774b-4d94-8928-cf8f2dcf6636}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{77cdd1da-0273-4708-9b0c-c9b68558ca9b}",
   "sourcePort": "output0",
   "targetUuid": "{6a0a2ead-492d-489c-8bb5-5dc7218141c2}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{6a0a2ead-492d-489c-8bb5-5dc7218141c2}",
   "sourcePort": "shader",
   "targetUuid": "{d352c7a2-3302-450e-85e7-2e8beffa63e1}",
   "targetPort": "color"
  },
  {
   "layers": [],
   "sourceUuid": "{b7683ac0-55ce-4e10-8522-97374d0f9322}",
   "sourcePort": "value",
   "targetUuid": "{8d456922-7640-4557-956b-10db31ba9750}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6a48d65f-07f2-43cb-bc3a-fce4dcda4acf}",
   "sourcePort": "value",
   "targetUuid": "{d03ed4e6-1bc0-4c78-8cdb-7641bd1f2d46}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{90179b60-e42f-45be-8452-f10b202aad97}",
   "sourcePort": "value",
   "targetUuid": "{dca9fd06-bb83-494e-835b-d7da6b1a2115}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{6de3c5b0-e0a8-42cc-ba41-76e730d5977e}",
   "sourcePort": "value",
   "targetUuid": "{b4be8b33-8982-4a1c-a7d8-052114edef61}",
   "targetPort": "input0"
  },
  {
   "layers": [],
   "sourceUuid": "{790e3a8f-7285-4593-94f2-707fdfcddbb2}",
   "sourcePort": "value",
   "targetUuid": "{89de41bd-cc2c-47b4-b5c3-91d7f411ad5d}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{996adc59-a286-4076-ae5b-a885db2c80d2}",
   "sourcePort": "value",
   "targetUuid": "{790ff4cb-6aeb-4f77-9f20-0f278bd32131}",
   "targetPort": "min"
  },
  {
   "layers": [],
   "sourceUuid": "{95219bac-aeb8-4f95-aeee-22ee568c24d2}",
   "sourcePort": "value",
   "targetUuid": "{790ff4cb-6aeb-4f77-9f20-0f278bd32131}",
   "targetPort": "max"
  },
  {
   "layers": [],
   "sourceUuid": "{d8b84771-c5fa-4a78-aee8-6f7b31946dc9}",
   "sourcePort": "value",
   "targetUuid": "{76166cb4-720a-4fca-9530-e7f8b6906370}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{ffe68929-c533-4340-8b7b-57857a4f282b}",
   "sourcePort": "value",
   "targetUuid": "{18fcbe48-dcbb-4871-b5a1-b9b6109076d9}",
   "targetPort": "input1"
  },
  {
   "layers": [],
   "sourceUuid": "{4c775ecc-c3f3-43e8-b1da-22d08631fab3}",
   "sourcePort": "value",
   "targetUuid": "{a0bc3cab-835b-4d73-85e3-4c83a585dbda}",
   "targetPort": "input1"
  },
  {
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "usesReflectionMap",
   "targetUuid": "{f3dcfda0-ae18-4840-9e59-83e1aa364388}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "reflectionMap",
   "targetUuid": "{f3dcfda0-ae18-4840-9e59-83e1aa364388}",
   "targetPort": "texture"
  },
  {
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "projectReflectionMap",
   "targetUuid": "{f3dcfda0-ae18-4840-9e59-83e1aa364388}",
   "targetPort": "projectTexture"
  },
  {
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "usesDiffuseMap",
   "targetUuid": "{24ab2d9f-15cf-4a5e-987f-d60ba8d17b41}",
   "targetPort": "useTexture"
  },
  {
   "sourceUuid": "{1b241c26-2d0d-4df1-920c-430c5bd5ce16}",
   "sourcePort": "diffuseMap",
   "targetUuid": "{24ab2d9f-15cf-4a5e-987f-d60ba8d17b41}",
   "targetPort": "texture"
  }
 ],
 "prototypes": {
  "BINARY_MATH_FUNCTION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "min",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0, $input1);"
    }
   ]
  },
  "BINARY_MATH_OPERATION": {
   "inputs": [
    "input0",
    "input1"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "+",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "secondType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
    }
   ]
  },
  "BSDF_TRANSPARENT": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "bsdf"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
    }
   ]
  },
  "VECT_TRANSFORM": {
   "inputs": [
    "input"
   ],
   "outputs": [
    "transformed"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform highp mat4 modelView;",
      "#endif"
     ],
     "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef MODEL_VIEW",
      "#define MODEL_VIEW",
      "uniform  mat4 modelView;",
      "#endif"
     ],
     "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
    }
   ]
  },
  "COLOR_TO_SHADER": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, 1.0);"
    }
   ]
  },
  "BLEND_ALPHA": {
   "inputs": [
    "color",
    "alpha"
   ],
   "outputs": [
    "shader"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec4 $shader = vec4($color, $alpha);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec4 $shader = vec4($color, $alpha);"
    }
   ]
  },
  "COMBRGB": {
   "inputs": [
    "r",
    "g",
    "b"
   ],
   "outputs": [
    "image"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $image = vec3($r, $g, $b);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $image = vec3($r, $g, $b);"
    }
   ]
  },
  "COMBXYZ": {
   "inputs": [
    "x",
    "y",
    "z"
   ],
   "outputs": [
    "vector"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "vec3 $vector = vec3($x, $y, $z);"
    }
   ]
  },
  "MATERIAL_OUTPUT": {
   "inputs": [
    "color"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLES",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out highp vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "out vec4 fragColor;"
     ],
     "substitution": "fragColor = clamp($color, 0.0, 1.0);"
    }
   ]
  },
  "MIX": {
   "inputs": [
    "fac",
    "input1",
    "input2"
   ],
   "outputs": [
    "mixed"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec4"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $mixed = mix($input1, $input2, $fac);"
    }
   ]
  },
  "CLAMP": {
   "inputs": [
    "value",
    "min",
    "max"
   ],
   "outputs": [
    "result"
   ],
   "parameters": {
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $result = clamp($value, $min, $max);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $result = clamp($value, $min, $max);"
    }
   ]
  },
  "NEW_GEOMETRY": {
   "outputs": [
    "position",
    "normal",
    "tangent"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "varying highp vec3 worldPosition;",
      "varying highp vec3 worldNormal;",
      "varying highp vec4 worldTangent;",
      "#endif"
     ],
     "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef NEW_GEOMETRY",
      "#define NEW_GEOMETRY",
      "in vec3 worldPosition;",
      "in vec3 worldNormal;",
      "in vec4 vertexTan;",
      "#endif"
     ],
     "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
    }
   ]
  },
  "SEPRGB": {
   "inputs": [
    "color"
   ],
   "outputs": [
    "r",
    "g",
    "b"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
    }
   ]
  },
  "SEPXYZ": {
   "inputs": [
    "vector"
   ],
   "outputs": [
    "x",
    "y",
    "z"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
    }
   ]
  },
  "TEX_COORD": {
   "outputs": [
    "uv",
    "reflection"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "varying highp vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform highp vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "highp vec2 $uv = texCoord;highp vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef TEX_COORD",
      "#define TEX_COORD",
      "in vec2 texCoord;",
      "#endif",
      "#ifndef EYE_POSITION",
      "#define EYE_POSITION",
      "uniform vec3 eyePosition;",
      "#endif"
     ],
     "substitution": "vec2 $uv = texCoord;vec3 $reflection = reflect(normalize(worldPosition - eyePosition), worldNormal);"
    }
   ]
  },
  "TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "vector"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "ENV_TEX_IMAGE": {
   "inputs": [
    "texture",
    "useTexture",
    "projectTexture",
    "position",
    "uv"
   ],
   "outputs": [
    "color",
    "alpha",
    "inter"
   ],
   "parameters": {
    "defaultColor": "1.0, 1.0, 1.0, 1.0",
    "condition": "false",
    "name": "",
    "linearizer": "",
    "projection": ""
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef SRGB_TO_LINEAR",
      "#define SRGB_TO_LINEAR",
      "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
      "#endif",
      "#ifndef EQUI_RECTANGULAR",
      "#define EQUI_RECTANGULAR",
      "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
      "#endif"
     ],
     "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
    }
   ]
  },
  "UNARY_MATH_FUNCTION": {
   "inputs": [
    "input0"
   ],
   "outputs": [
    "output0"
   ],
   "parameters": {
    "firstType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    },
    "operation": "round",
    "outputType": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Vec3"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $outputType $output0 = $operation($input0);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$outputType $output0 = $operation($input0);"
    }
   ]
  },
  "VERTEX_COLOR": {
   "outputs": [
    "color",
    "alpha"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "varying highp vec4 color;",
      "#endif"
     ],
     "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "#ifndef VERTEX_COLOR",
      "#define VERTEX_COLOR",
      "in vec4 color;",
      "#endif"
     ],
     "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
    }
   ]
  },
  "constant": {
   "outputs": [
    "value"
   ],
   "parameters": {
    "constant": "0.0",
    "type": {
     "type": "QShaderLanguage::VariableType",
     "value": "QShaderLanguage::Float"
    }
   },
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "substitution": "highp $type $value = $type($constant);"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "substitution": "$type $value = $type($constant);"
    }
   ]
  },
  "MATERIAL_PROPERTIES": {
   "outputs": [
    "normalScaling",
    "normalDisturb",
    "reflectionGain",
    "reflectionInnerFilter",
    "reflectionOuterFilter",
    "diffuseGain",
    "diffuseInnerFilter",
    "diffuseOuterFilter",
    "postHemiFilter",
    "postVertexColor",
    "postGain",
    "usesReflectionMap",
    "reflectionMap",
    "projectReflectionMap",
    "usesDiffuseMap",
    "diffuseMap"
   ],
   "rules": [
    {
     "format": {
      "api": "OpenGLES",
      "major": 2,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    highp vec3 normalScaling;\n    highp vec3 normalDisturb;\n    highp float reflectionGain;\n    highp vec3 reflectionInnerFilter;\n    highp vec3 reflectionOuterFilter;\n    highp float diffuseGain;\n    highp vec3 diffuseInnerFilter;\n    highp vec3 diffuseOuterFilter;\n    highp vec3 postHemiFilter;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesReflectionMap;\n    highp sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    highp sampler2D diffuseMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "highp vec3 $normalScaling = properties.normalScaling;highp vec3 $normalDisturb = properties.normalDisturb;highp float $reflectionGain = properties.reflectionGain;highp vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;highp vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;highp float $diffuseGain = properties.diffuseGain;highp vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;highp vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;highp vec3 $postHemiFilter = properties.postHemiFilter;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;highp sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;highp sampler2D $diffuseMap = properties.diffuseMap;"
    },
    {
     "format": {
      "api": "OpenGLCoreProfile",
      "major": 3,
      "minor": 0
     },
     "headerSnippets": [
      "struct MaterialProperties {\n    vec3 normalScaling;\n    vec3 normalDisturb;\n    float reflectionGain;\n    vec3 reflectionInnerFilter;\n    vec3 reflectionOuterFilter;\n    float diffuseGain;\n    vec3 diffuseInnerFilter;\n    vec3 diffuseOuterFilter;\n    vec3 postHemiFilter;\n    float postVertexColor;\n    float postGain;\n    bool usesReflectionMap;\n    sampler2D reflectionMap;\n    bool projectReflectionMap;\n    bool usesDiffuseMap;\n    sampler2D diffuseMap;\n};\nuniform MaterialProperties properties;"
     ],
     "substitution": "vec3 $normalScaling = properties.normalScaling;vec3 $normalDisturb = properties.normalDisturb;float $reflectionGain = properties.reflectionGain;vec3 $reflectionInnerFilter = properties.reflectionInnerFilter;vec3 $reflectionOuterFilter = properties.reflectionOuterFilter;float $diffuseGain = properties.diffuseGain;vec3 $diffuseInnerFilter = properties.diffuseInnerFilter;vec3 $diffuseOuterFilter = properties.diffuseOuterFilter;vec3 $postHemiFilter = properties.postHemiFilter;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesReflectionMap = properties.usesReflectionMap;sampler2D $reflectionMap = properties.reflectionMap;bool $projectReflectionMap = properties.projectReflectionMap;bool $usesDiffuseMap = properties.usesDiffuseMap;sampler2D $diffuseMap = properties.diffuseMap;"
    }
   ]
  }
 }
}