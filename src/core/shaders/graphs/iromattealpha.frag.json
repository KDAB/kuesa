{
    "nodes": [
        {
            "layers": [],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "type": "MIX",
            "uuid": "{4ecfa8fc-4531-4e29-ad98-6615997032f4}"
        },
        {
            "layers": [],
            "parameters": {},
            "type": "BSDF_TRANSPARENT",
            "uuid": "{60791bbb-2700-450e-b9f1-6fa99167a902}"
        },
        {
            "layers": [],
            "parameters": {},
            "type": "MATERIAL_OUTPUT",
            "uuid": "{93fd83f3-a541-4439-a6d2-470d64c35dd3}"
        },
        {
            "layers": [],
            "parameters": {},
            "type": "TEX_COORD",
            "uuid": "{63697fd4-2b73-467e-bed5-c16d91de2424}"
        },
        {
            "layers": [],
            "parameters": {
                "operation": "*",
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "type": "BINARY_MATH_OPERATION",
            "uuid": "{c4dc7cfc-7896-4ff1-a4f5-0b08c5a00500}"
        },
        {
            "layers": [],
            "parameters": {
                "defaultColor": "1.0, 1.0, 1.0, 1.0",
                "name": "matteMap",
                "condition": "usesMatteMap",
                "linearizer": "sRGBtoLinear"
            },
            "type": "TEX_IMAGE",
            "uuid": "{9bcd5b58-dc92-468f-bef2-ec7b2deead59}"
        },
        {
            "layers": [],
            "parameters": {
                "operation": "*",
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "type": "BINARY_MATH_OPERATION",
            "uuid": "{92c08ed6-2d91-4823-bf62-eb3fd8eb041f}"
        },
        {
            "layers": [],
            "parameters": {
                "clamp": {
                    "type": "QShaderLanguage::Bool",
                    "value": "false"
                },
                "operation": "*",
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "type": "BINARY_MATH_OPERATION",
            "uuid": "{45027e0c-1fdb-4071-9003-767c2526634f}"
        },
        {
            "layers": [],
            "parameters": {
                "operation": "*",
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "type": "BINARY_MATH_OPERATION",
            "uuid": "{9c747004-cb96-462d-a10b-faf56a59e16d}"
        },
        {
            "layers": [],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "type": "MIX",
            "uuid": "{99305dd9-a8f2-47ed-9c55-556ded0e5d05}"
        },
        {
            "layers": [],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "type": "MIX",
            "uuid": "{b21ffbf3-e5b0-48f5-9fa3-ea39d1aba00a}"
        },
        {
            "layers": [],
            "parameters": {},
            "type": "MATERIAL_PROPERTIES",
            "uuid": "{6762b74b-5731-402d-869c-275d10ed71d5}"
        },
        {
            "layers": [],
            "parameters": {},
            "type": "VERTEX_COLOR",
            "uuid": "{27ecee5b-9d78-44e5-8de1-acd5bf96fd95}"
        },
        {
            "layers": [],
            "parameters": {
                "constant": "1.0,1.0,1.0,1.0",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "type": "constant",
            "uuid": "{3450c7c0-aa3b-4632-93d0-b6892b374771}"
        }
    ],
    "edges": [
        {
            "layers": [],
            "sourceUuid": "{27ecee5b-9d78-44e5-8de1-acd5bf96fd95}",
            "sourcePort": "color",
            "targetUuid": "{99305dd9-a8f2-47ed-9c55-556ded0e5d05}",
            "targetPort": "input2"
        },
        {
            "layers": [],
            "sourceUuid": "{c4dc7cfc-7896-4ff1-a4f5-0b08c5a00500}",
            "sourcePort": "output0",
            "targetUuid": "{99305dd9-a8f2-47ed-9c55-556ded0e5d05}",
            "targetPort": "input1"
        },
        {
            "layers": [],
            "sourceUuid": "{99305dd9-a8f2-47ed-9c55-556ded0e5d05}",
            "sourcePort": "mixed",
            "targetUuid": "{92c08ed6-2d91-4823-bf62-eb3fd8eb041f}",
            "targetPort": "input0"
        },
        {
            "layers": [],
            "sourceUuid": "{9c747004-cb96-462d-a10b-faf56a59e16d}",
            "sourcePort": "output0",
            "targetUuid": "{c4dc7cfc-7896-4ff1-a4f5-0b08c5a00500}",
            "targetPort": "input1"
        },
        {
            "layers": [],
            "sourceUuid": "{60791bbb-2700-450e-b9f1-6fa99167a902}",
            "sourcePort": "bsdf",
            "targetUuid": "{4ecfa8fc-4531-4e29-ad98-6615997032f4}",
            "targetPort": "input1"
        },
        {
            "layers": [],
            "sourceUuid": "{92c08ed6-2d91-4823-bf62-eb3fd8eb041f}",
            "sourcePort": "output0",
            "targetUuid": "{4ecfa8fc-4531-4e29-ad98-6615997032f4}",
            "targetPort": "input2"
        },
        {
            "layers": [],
            "sourceUuid": "{45027e0c-1fdb-4071-9003-767c2526634f}",
            "sourcePort": "output0",
            "targetUuid": "{b21ffbf3-e5b0-48f5-9fa3-ea39d1aba00a}",
            "targetPort": "input1"
        },
        {
            "layers": [],
            "sourceUuid": "{b21ffbf3-e5b0-48f5-9fa3-ea39d1aba00a}",
            "sourcePort": "mixed",
            "targetUuid": "{4ecfa8fc-4531-4e29-ad98-6615997032f4}",
            "targetPort": "fac"
        },
        {
            "layers": [],
            "sourceUuid": "{6762b74b-5731-402d-869c-275d10ed71d5}",
            "sourcePort": "matteAlphaGain",
            "targetUuid": "{45027e0c-1fdb-4071-9003-767c2526634f}",
            "targetPort": "input1"
        },
        {
            "layers": [],
            "sourceUuid": "{6762b74b-5731-402d-869c-275d10ed71d5}",
            "sourcePort": "postVertexColor",
            "targetUuid": "{b21ffbf3-e5b0-48f5-9fa3-ea39d1aba00a}",
            "targetPort": "fac"
        },
        {
            "layers": [],
            "sourceUuid": "{9bcd5b58-dc92-468f-bef2-ec7b2deead59}",
            "sourcePort": "color",
            "targetUuid": "{c4dc7cfc-7896-4ff1-a4f5-0b08c5a00500}",
            "targetPort": "input0"
        },
        {
            "layers": [],
            "sourceUuid": "{9bcd5b58-dc92-468f-bef2-ec7b2deead59}",
            "sourcePort": "alpha",
            "targetUuid": "{45027e0c-1fdb-4071-9003-767c2526634f}",
            "targetPort": "input0"
        },
        {
            "layers": [],
            "sourceUuid": "{63697fd4-2b73-467e-bed5-c16d91de2424}",
            "sourcePort": "generated",
            "targetUuid": "{9bcd5b58-dc92-468f-bef2-ec7b2deead59}",
            "targetPort": "vector"
        },
        {
            "layers": [],
            "sourceUuid": "{4ecfa8fc-4531-4e29-ad98-6615997032f4}",
            "sourcePort": "mixed",
            "targetUuid": "{93fd83f3-a541-4439-a6d2-470d64c35dd3}",
            "targetPort": "color"
        },
        {
            "layers": [],
            "sourceUuid": "{6762b74b-5731-402d-869c-275d10ed71d5}",
            "sourcePort": "postVertexColor",
            "targetUuid": "{99305dd9-a8f2-47ed-9c55-556ded0e5d05}",
            "targetPort": "fac"
        },
        {
            "layers": [],
            "sourceUuid": "{6762b74b-5731-402d-869c-275d10ed71d5}",
            "sourcePort": "matteFilter",
            "targetUuid": "{9c747004-cb96-462d-a10b-faf56a59e16d}",
            "targetPort": "input0"
        },
        {
            "layers": [],
            "sourceUuid": "{6762b74b-5731-402d-869c-275d10ed71d5}",
            "sourcePort": "matteGain",
            "targetUuid": "{9c747004-cb96-462d-a10b-faf56a59e16d}",
            "targetPort": "input1"
        },
        {
            "layers": [],
            "sourceUuid": "{6762b74b-5731-402d-869c-275d10ed71d5}",
            "sourcePort": "postGain",
            "targetUuid": "{92c08ed6-2d91-4823-bf62-eb3fd8eb041f}",
            "targetPort": "input1"
        },
        {
            "layers": [],
            "sourceUuid": "{27ecee5b-9d78-44e5-8de1-acd5bf96fd95}",
            "sourcePort": "alpha",
            "targetUuid": "{b21ffbf3-e5b0-48f5-9fa3-ea39d1aba00a}",
            "targetPort": "input2"
        },
        {
            "layers": [],
            "sourceUuid": "{3450c7c0-aa3b-4632-93d0-b6892b374771}",
            "sourcePort": "value",
            "targetUuid": "{60791bbb-2700-450e-b9f1-6fa99167a902}",
            "targetPort": "color"
        },
        {
            "sourceUuid": "{6762b74b-5731-402d-869c-275d10ed71d5}",
            "sourcePort": "usesMatteMap",
            "targetUuid": "{9bcd5b58-dc92-468f-bef2-ec7b2deead59}",
            "targetPort": "useTexture"
        },
        {
            "sourceUuid": "{6762b74b-5731-402d-869c-275d10ed71d5}",
            "sourcePort": "matteMap",
            "targetUuid": "{9bcd5b58-dc92-468f-bef2-ec7b2deead59}",
            "targetPort": "texture"
        }
    ],
    "prototypes": {
        "BINARY_MATH_FUNCTION": {
            "inputs": [
                "input0",
                "input1"
            ],
            "outputs": [
                "output0"
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "operation": "min",
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = $operation($input0, $input1);"
                }
            ]
        },
        "BINARY_MATH_OPERATION": {
            "inputs": [
                "input0",
                "input1"
            ],
            "outputs": [
                "output0"
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "operation": "+",
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "secondType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
                }
            ]
        },
        "BSDF_TRANSPARENT": {
            "inputs": [
                "color"
            ],
            "outputs": [
                "bsdf"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
                }
            ]
        },
        "COMBRGB": {
            "inputs": [
                "r",
                "g",
                "b"
            ],
            "outputs": [
                "image"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $image = vec4($r, $g, $b, 1.0);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $image = vec4($r, $g, $b, 1.0);"
                }
            ]
        },
        "COMBXYZ": {
            "inputs": [
                "x",
                "y",
                "z"
            ],
            "outputs": [
                "vector"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec3 $vector = vec3($x, $y, $z);"
                }
            ]
        },
        "MATERIAL_OUTPUT": {
            "inputs": [
                "color"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp vec4 fragColor;"
                    ],
                    "substitution": "fragColor = clamp($color, 0.0, 1.0);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = clamp($color, 0.0, 1.0);"
                }
            ]
        },
        "MIX": {
            "inputs": [
                "fac",
                "input1",
                "input2"
            ],
            "outputs": [
                "mixed"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $mixed = mix($input1, $input2, $fac);"
                }
            ]
        },
        "NEW_GEOMETRY": {
            "outputs": [
                "position",
                "normal",
                "tangent"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "varying highp vec3 vertexPos;",
                        "varying highp vec3 vertexNorm;",
                        "varying highp vec3 vertexTan;"
                    ],
                    "substitution": "highp vec3 $position = vertexPos;highp vec3 $normal = vertexNorm;highp vec3 $tangent = vertexTan;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "in vec3 vertexPos;",
                        "in vec3 vertexNorm;",
                        "in vec3 vertexTan;"
                    ],
                    "substitution": "vec3 $position = vertexPos;vec3 $normal = vertexNorm;vec3 $tangent = vertexTan;"
                }
            ]
        },
        "SEPRGB": {
            "inputs": [
                "color"
            ],
            "outputs": [
                "r",
                "g",
                "b",
                "a"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;highp float $a = $color.a;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;float $a = $color.a;"
                }
            ]
        },
        "SEPXYZ": {
            "inputs": [
                "vector"
            ],
            "outputs": [
                "x",
                "y",
                "z"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
                }
            ]
        },
        "TEX_COORD": {
            "outputs": [
                "generated"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "varying highp vec3 texCoord;"
                    ],
                    "substitution": "highp vec3 $generated = texCoord;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "in vec3 texCoord;"
                    ],
                    "substitution": "vec3 $generated = texCoord;"
                }
            ]
        },
        "TEX_IMAGE": {
            "inputs": [
                "texture",
                "useTexture",
                "vector"
            ],
            "outputs": [
                "color",
                "alpha",
                "inter"
            ],
            "parameters": {
                "defaultColor": "1.0, 1.0, 1.0, 1.0",
                "condition": "false",
                "name": "",
                "linearizer": ""
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }"
                    ],
                    "substitution": "highp vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);highp vec4 $color = vec4($linearizer($inter.rgb), $inter.a);highp float $alpha = $inter.a;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }"
                    ],
                    "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec4 $color = vec4($linearizer($inter.rgb), $inter.a);float $alpha = $inter.a;"
                }
            ]
        },
        "UNARY_MATH_FUNCTION": {
            "inputs": [
                "input0"
            ],
            "outputs": [
                "output0"
            ],
            "parameters": {
                "firstType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "operation": "round",
                "outputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outputType $output0 = $operation($input0);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = $operation($input0);"
                }
            ]
        },
        "VERTEX_COLOR": {
            "outputs": [
                "color",
                "alpha"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "varying highp vec4 vertexCol;"
                    ],
                    "substitution": "highp vec4 $color = vertexCol;highp float $alpha = vertexCol.a;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "in vec4 vertexCol;"
                    ],
                    "substitution": "vec4 $color = vertexCol;float $alpha = vertexCol.a;"
                }
            ]
        },
        "constant": {
            "outputs": [
                "value"
            ],
            "parameters": {
                "constant": "0.0",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = $type($constant);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = $type($constant);"
                }
            ]
        },
        "MATERIAL_PROPERTIES": {
            "outputs": [
                "usesMatteMap",
                "matteMap",
                "postVertexColor",
                "matteAlphaGain",
                "matteFilter",
                "matteGain",
                "postGain"
            ],
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "struct MaterialProperties {\n    bool usesMatteMap;\n    highp sampler2D matteMap;\n    highp float postVertexColor;\n    highp float matteAlphaGain;\n    highp vec4 matteFilter;\n    highp float matteGain;\n    highp float postGain;\n};\nuniform MaterialProperties properties;"
                    ],
                    "substitution": "MaterialProperties $properties = properties;bool $usesMatteMap = properties.usesMatteMap;highp sampler2D $matteMap = properties.matteMap;highp float $postVertexColor = properties.postVertexColor;highp float $matteAlphaGain = properties.matteAlphaGain;highp vec4 $matteFilter = properties.matteFilter;highp float $matteGain = properties.matteGain;highp float $postGain = properties.postGain;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "struct MaterialProperties {\n    bool usesMatteMap;\n    sampler2D matteMap;\n    float postVertexColor;\n    float matteAlphaGain;\n    vec4 matteFilter;\n    float matteGain;\n    float postGain;\n};\nuniform MaterialProperties properties;"
                    ],
                    "substitution": "MaterialProperties $properties = properties;bool $usesMatteMap = properties.usesMatteMap;sampler2D $matteMap = properties.matteMap;float $postVertexColor = properties.postVertexColor;float $matteAlphaGain = properties.matteAlphaGain;vec4 $matteFilter = properties.matteFilter;float $matteGain = properties.matteGain;float $postGain = properties.postGain;"
                }
            ]
        }
    }
}