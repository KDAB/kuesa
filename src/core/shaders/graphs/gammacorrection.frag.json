{
    "edges": [
        {
            "layers": [
            ],
            "sourcePort": "value",
            "sourceUuid": "{e5f27a50-dbec-4168-a896-3602783501de}",
            "targetPort": "exposure",
            "targetUuid": "{d933bd63-903f-4ff1-9214-0886d09c4723}"
        },
        {
            "layers": [
                "useReinhardToneMap"
            ],
            "sourcePort": "outputColor",
            "sourceUuid": "{d933bd63-903f-4ff1-9214-0886d09c4723}",
            "targetPort": "color",
            "targetUuid": "{e9c5c22b-32f7-4a6b-b659-f9c8fcbcf203}"
        },
        {
            "layers": [
            ],
            "sourcePort": "color",
            "sourceUuid": "{b5232847-0e3f-4407-a2fc-8dda60677978}",
            "targetPort": "input",
            "targetUuid": "{bb7fbe61-45ee-4ba9-bb5e-256586a04699}"
        },
        {
            "layers": [
                "useReinhardToneMap"
            ],
            "sourcePort": "outputColor",
            "sourceUuid": "{e9c5c22b-32f7-4a6b-b659-f9c8fcbcf203}",
            "targetPort": "color",
            "targetUuid": "{0f29d421-d458-4682-bbcc-f4be1e3b07c2}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{e9fd8e73-8e85-472c-9322-a3f00e6310a9}",
            "targetPort": "second",
            "targetUuid": "{e7d81f3f-b8d8-4925-bc5a-5fd8673cc0b1}"
        },
        {
            "layers": [
            ],
            "sourcePort": "value",
            "sourceUuid": "{8a90fa90-bb64-43a7-b9a7-fe603a07883a}",
            "targetPort": "coord",
            "targetUuid": "{b5232847-0e3f-4407-a2fc-8dda60677978}"
        },
        {
            "layers": [
            ],
            "sourcePort": "color",
            "sourceUuid": "{b5232847-0e3f-4407-a2fc-8dda60677978}",
            "targetPort": "input",
            "targetUuid": "{e9fd8e73-8e85-472c-9322-a3f00e6310a9}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{e7d81f3f-b8d8-4925-bc5a-5fd8673cc0b1}",
            "targetPort": "fragColor",
            "targetUuid": "{11403ec0-928f-459a-800b-5d036a4bf3fd}"
        },
        {
            "layers": [
            ],
            "sourcePort": "gamma",
            "sourceUuid": "{86f2bb05-0866-48a9-890b-b35ceab2e40a}",
            "targetPort": "gamma",
            "targetUuid": "{0f29d421-d458-4682-bbcc-f4be1e3b07c2}"
        },
        {
            "layers": [
                "useUnchartedToneMap"
            ],
            "sourcePort": "outputColor",
            "sourceUuid": "{28a88f4d-0b6b-451f-bf47-0fd627ed18e4}",
            "targetPort": "color",
            "targetUuid": "{0f29d421-d458-4682-bbcc-f4be1e3b07c2}"
        },
        {
            "layers": [
                "noToneMap"
            ],
            "sourcePort": "outputColor",
            "sourceUuid": "{d933bd63-903f-4ff1-9214-0886d09c4723}",
            "targetPort": "color",
            "targetUuid": "{0f29d421-d458-4682-bbcc-f4be1e3b07c2}"
        },
        {
            "layers": [
                "useReinhardToneMap",
                "useUnchartedToneMap",
                "noToneMap"
            ],
            "sourcePort": "outputColor",
            "sourceUuid": "{0f29d421-d458-4682-bbcc-f4be1e3b07c2}",
            "targetPort": "first",
            "targetUuid": "{e7d81f3f-b8d8-4925-bc5a-5fd8673cc0b1}"
        },
        {
            "layers": [
                "useFilmicToneMap"
            ],
            "sourcePort": "outputColor",
            "sourceUuid": "{d933bd63-903f-4ff1-9214-0886d09c4723}",
            "targetPort": "color",
            "targetUuid": "{ebf1b974-7778-4e9a-bfcb-821d66d82ed3}"
        },
        {
            "layers": [
                "useFilmicToneMap"
            ],
            "sourcePort": "outputColor",
            "sourceUuid": "{ebf1b974-7778-4e9a-bfcb-821d66d82ed3}",
            "targetPort": "first",
            "targetUuid": "{e7d81f3f-b8d8-4925-bc5a-5fd8673cc0b1}"
        },
        {
            "layers": [
                "useUnchartedToneMap"
            ],
            "sourcePort": "outputColor",
            "sourceUuid": "{d933bd63-903f-4ff1-9214-0886d09c4723}",
            "targetPort": "color",
            "targetUuid": "{28a88f4d-0b6b-451f-bf47-0fd627ed18e4}"
        },
        {
            "layers": [
            ],
            "sourcePort": "output",
            "sourceUuid": "{bb7fbe61-45ee-4ba9-bb5e-256586a04699}",
            "targetPort": "color",
            "targetUuid": "{d933bd63-903f-4ff1-9214-0886d09c4723}"
        }
    ],
    "nodes": [
        {
            "layers": [
                "useReinhardToneMap"
            ],
            "parameters": {
            },
            "type": "kuesa_reinhardToneMap",
            "uuid": "{e9c5c22b-32f7-4a6b-b659-f9c8fcbcf203}"
        },
        {
            "layers": [
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "type": "join2",
            "uuid": "{e7d81f3f-b8d8-4925-bc5a-5fd8673cc0b1}"
        },
        {
            "layers": [
            ],
            "parameters": {
                "fields": "a",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "type": "swizzle",
            "uuid": "{e9fd8e73-8e85-472c-9322-a3f00e6310a9}"
        },
        {
            "layers": [
                "useUnchartedToneMap"
            ],
            "parameters": {
            },
            "type": "kuesa_unchartedToneMap",
            "uuid": "{28a88f4d-0b6b-451f-bf47-0fd627ed18e4}"
        },
        {
            "layers": [
            ],
            "parameters": {
                "name": "finalExposure",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "type": "uniformInput",
            "uuid": "{e5f27a50-dbec-4168-a896-3602783501de}"
        },
        {
            "layers": [
            ],
            "parameters": {
                "name": "texCoord",
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                }
            },
            "type": "input",
            "uuid": "{8a90fa90-bb64-43a7-b9a7-fe603a07883a}"
        },
        {
            "layers": [
            ],
            "parameters": {
            },
            "type": "kuesa_gammaCorrect",
            "uuid": "{0f29d421-d458-4682-bbcc-f4be1e3b07c2}"
        },
        {
            "layers": [
                "useFilmicToneMap"
            ],
            "parameters": {
            },
            "type": "kuesa_filmicToneMap",
            "uuid": "{ebf1b974-7778-4e9a-bfcb-821d66d82ed3}"
        },
        {
            "layers": [
            ],
            "parameters": {
                "fields": "rgb",
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            },
            "type": "swizzle",
            "uuid": "{bb7fbe61-45ee-4ba9-bb5e-256586a04699}"
        },
        {
            "layers": [
            ],
            "parameters": {
            },
            "type": "kuesa_exposureCorrect",
            "uuid": "{d933bd63-903f-4ff1-9214-0886d09c4723}"
        },
        {
            "layers": [
            ],
            "parameters": {
            },
            "type": "qt3d_default_uniforms",
            "uuid": "{86f2bb05-0866-48a9-890b-b35ceab2e40a}"
        },
        {
            "layers": [
            ],
            "parameters": {
            },
            "type": "fragColor",
            "uuid": "{11403ec0-928f-459a-800b-5d036a4bf3fd}"
        },
        {
            "layers": [
            ],
            "parameters": {
                "name": "inputTexture"
            },
            "type": "sampleTexture",
            "uuid": "{b5232847-0e3f-4407-a2fc-8dda60677978}"
        }
    ],
    "prototypes": {
        "fragColor": {
            "inputs": [
                "fragColor"
            ],
            "name": "fragColor",
            "outputs": [
            ],
            "parameters": {
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "gl_FragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "layout(location=0) out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                }
            ]
        },
        "input": {
            "inputs": [
            ],
            "name": "input",
            "outputs": [
                "value"
            ],
            "parameters": {
                "location": {
                    "type": "QString",
                    "value": "0"
                },
                "name": {
                    "type": "QString",
                    "value": "defaultName"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "varying highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "in highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "in $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "layout(location = $location) in $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        "join2": {
            "inputs": [
                "first",
                "second"
            ],
            "name": "join2",
            "outputs": [
                "output"
            ],
            "parameters": {
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                },
                "typeOfFirst": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                "typeOfSecond": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = $type($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($first, $second);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($first, $second);"
                }
            ]
        },
        "kuesa_exposureCorrect": {
            "inputs": [
                "color",
                "exposure"
            ],
            "name": "kuesa_exposureCorrect",
            "outputs": [
                "outputColor"
            ],
            "parameters": {
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "vec3 $outputColor = $color * pow(2.0, $exposure);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp vec3 $outputColor = $color * pow(2.0, $exposure);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp vec3 $outputColor = $color * pow(2.0, $exposure);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "vec3 $outputColor = $color * pow(2.0, $exposure);"
                }
            ]
        },
        "kuesa_filmicToneMap": {
            "inputs": [
                "color"
            ],
            "name": "kuesa_filmicToneMap",
            "outputs": [
                "outputColor"
            ],
            "parameters": {
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "vec3 filmicToneMap(const in vec3 c) {\n                                           vec3 x = max(vec3(0.0), c - vec3(0.004));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "vec3 $outputColor = filmicToneMap($color);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 filmicToneMap(const in highp vec3 c) {\n                                           highp vec3 x = max(vec3(0.0), c - vec3(0.004));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "highp vec3 $outputColor = filmicToneMap($color);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 filmicToneMap(const in highp vec3 c) {\n                                           highp vec3 x = max(vec3(0.0), c - vec3(0.004));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "highp vec3 $outputColor = filmicToneMap($color);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "vec3 filmicToneMap(const in vec3 c) {\n                                           vec3 x = max(vec3(0.0), c - vec3(0.004));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "vec3 $outputColor = filmicToneMap($color);"
                }
            ]
        },
        "kuesa_gammaCorrect": {
            "inputs": [
                "color",
                "gamma"
            ],
            "name": "kuesa_gammaCorrect",
            "outputs": [
                "outputColor"
            ],
            "parameters": {
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                }
            ]
        },
        "kuesa_reinhardToneMap": {
            "inputs": [
                "color"
            ],
            "name": "kuesa_reinhardToneMap",
            "outputs": [
                "outputColor"
            ],
            "parameters": {
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "vec3 $outputColor = $color / ($color + vec3(1.0));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp vec3 $outputColor = $color / ($color + vec3(1.0));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp vec3 $outputColor = $color / ($color + vec3(1.0));"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "vec3 $outputColor = $color / ($color + vec3(1.0));"
                }
            ]
        },
        "kuesa_unchartedToneMap": {
            "inputs": [
                "color"
            ],
            "name": "kuesa_unchartedToneMap",
            "outputs": [
                "outputColor"
            ],
            "parameters": {
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "vec3 unchartedToneMapHelper(const in vec3 c) {\n const vec3 A = vec3(0.15); const vec3 B = vec3(0.50); const vec3 C = vec3(0.10); const vec3 D = vec3(0.20); const vec3 E = vec3(0.02); const vec3 F = vec3(0.30); return ((c * (A * c + C * B) + D * E) / (c * (A * c + B) + D * F)) - E / F; }",
                        "vec3 unchartedToneMap(const in vec3 c) {\n const vec3 W = vec3(11.2); vec3 cur = unchartedToneMapHelper(c); vec3 whiteScale = vec3(1.0) / unchartedToneMapHelper(W); return cur * whiteScale; }"
                    ],
                    "substitution": "vec3 $outputColor = unchartedToneMap($color);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 unchartedToneMapHelper(const in highp vec3 c) {\n const highp vec3 A = vec3(0.15); const highp vec3 B = vec3(0.50); const highp vec3 C = vec3(0.10); const highp vec3 D = vec3(0.20); const highp vec3 E = vec3(0.02); const highp vec3 F = vec3(0.30); return ((c * (A * c + C * B) + D * E) / (c * (A * c + B) + D * F)) - E / F; }",
                        "highp vec3 unchartedToneMap(const in highp vec3 c) {\n const highp vec3 W = vec3(11.2); highp vec3 cur = unchartedToneMapHelper(c); highp vec3 whiteScale = vec3(1.0) / unchartedToneMapHelper(W); return cur * whiteScale; }"
                    ],
                    "substitution": "highp vec3 $outputColor = unchartedToneMap($color);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 unchartedToneMapHelper(const in highp vec3 c) {\n const highp vec3 A = vec3(0.15); const highp vec3 B = vec3(0.50); const highp vec3 C = vec3(0.10); const highp vec3 D = vec3(0.20); const highp vec3 E = vec3(0.02); const highp vec3 F = vec3(0.30); return ((c * (A * c + C * B) + D * E) / (c * (A * c + B) + D * F)) - E / F; }",
                        "highp vec3 unchartedToneMap(const in highp vec3 c) {\n const highp vec3 W = vec3(11.2); highp vec3 cur = unchartedToneMapHelper(c); highp vec3 whiteScale = vec3(1.0) / unchartedToneMapHelper(W); return cur * whiteScale; }"
                    ],
                    "substitution": "highp vec3 $outputColor = unchartedToneMap($color);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "vec3 unchartedToneMapHelper(const in vec3 c) {\n const vec3 A = vec3(0.15); const vec3 B = vec3(0.50); const vec3 C = vec3(0.10); const vec3 D = vec3(0.20); const vec3 E = vec3(0.02); const vec3 F = vec3(0.30); return ((c * (A * c + C * B) + D * E) / (c * (A * c + B) + D * F)) - E / F; }",
                        "vec3 unchartedToneMap(const in vec3 c) {\n const vec3 W = vec3(11.2); vec3 cur = unchartedToneMapHelper(c); vec3 whiteScale = vec3(1.0) / unchartedToneMapHelper(W); return cur * whiteScale; }"
                    ],
                    "substitution": "vec3 $outputColor = unchartedToneMap($color);"
                }
            ]
        },
        "qt3d_default_uniforms": {
            "inputs": [
            ],
            "name": "qt3d_default_uniforms",
            "outputs": [
                "viewMatrix",
                "projectionMatrix",
                "viewProjectionMatrix",
                "inverseViewMatrix",
                "inverseProjectionMatrix",
                "inverseViewProjectionMatrix",
                "textureTransformMatrix",
                "eyePosition",
                "aspectRatio",
                "gamma",
                "exposure",
                "time",
                "modelMatrix",
                "inverseModelMatrix",
                "modelViewMatrix",
                "modelNormalMatrix",
                "mvp",
                "inverseModelViewProjectionMatrix"
            ],
            "parameters": {
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/qt3d_default_uniforms.inc"
                    ],
                    "substitution": "\n                        highp mat4 $viewMatrix = viewMatrix;\n                        highp mat4 $projectionMatrix = projectionMatrix;\n                        highp mat4 $viewProjectionMatrix = viewProjectionMatrix;\n                        highp mat4 $inverseViewMatrix = inverseViewMatrix;\n                        highp mat4 $inverseProjectionMatrix = inverseProjectionMatrix;\n                        highp mat4 $inverseViewProjectionMatrix = inverseViewProjectionMatrix;\n                        highp mat4 $viewportMatrix = viewportMatrix;\n                        highp mat4 $inverseViewportMatrix = inverseViewportMatrix;\n                        highp vec4 $textureTransformMatrix = textureTransformMatrix;\n                        highp vec3 $eyePosition = eyePosition;\n                        highp float $aspectRatio = aspectRatio;\n                        highp float $gamma = gamma;\n                        highp float $exposure = exposure;\n                        highp float $time = time;\n                        highp mat4 $modelMatrix = modelMatrix;\n                        highp mat4 $inverseModelMatrix = inverseModelMatrix;\n                        highp mat4 $modelViewMatrix = modelViewMatrix;\n                        highp mat3 $modelNormalMatrix = modelNormalMatrix;\n                        highp mat4 $inverseModelViewMatrix = inverseModelViewMatrix;\n                        highp mat4 $mvp = mvp;\n                        highp mat4 $inverseModelViewProjectionMatrix = inverseModelViewProjectionMatrix;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/qt3d_default_uniforms.inc"
                    ],
                    "substitution": "\n                        highp mat4 $viewMatrix = viewMatrix;\n                        highp mat4 $projectionMatrix = projectionMatrix;\n                        highp mat4 $viewProjectionMatrix = viewProjectionMatrix;\n                        highp mat4 $inverseViewMatrix = inverseViewMatrix;\n                        highp mat4 $inverseProjectionMatrix = inverseProjectionMatrix;\n                        highp mat4 $inverseViewProjectionMatrix = inverseViewProjectionMatrix;\n                        highp mat4 $viewportMatrix = viewportMatrix;\n                        highp mat4 $inverseViewportMatrix = inverseViewportMatrix;\n                        highp vec4 $textureTransformMatrix = textureTransformMatrix;\n                        highp vec3 $eyePosition = eyePosition;\n                        highp float $aspectRatio = aspectRatio;\n                        highp float $gamma = gamma;\n                        highp float $exposure = exposure;\n                        highp float $time = time;\n                        highp mat4 $modelMatrix = modelMatrix;\n                        highp mat4 $inverseModelMatrix = inverseModelMatrix;\n                        highp mat4 $modelViewMatrix = modelViewMatrix;\n                        highp mat3 $modelNormalMatrix = modelNormalMatrix;\n                        highp mat4 $inverseModelViewMatrix = inverseModelViewMatrix;\n                        highp mat4 $mvp = mvp;\n                        highp mat4 $inverseModelViewProjectionMatrix = inverseModelViewProjectionMatrix;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/qt3d_default_uniforms.inc"
                    ],
                    "substitution": "\n                        mat4 $viewMatrix = viewMatrix;\n                        mat4 $projectionMatrix = projectionMatrix;\n                        mat4 $viewProjectionMatrix = viewProjectionMatrix;\n                        mat4 $inverseViewMatrix = inverseViewMatrix;\n                        mat4 $inverseProjectionMatrix = inverseProjectionMatrix;\n                        mat4 $inverseViewProjectionMatrix = inverseViewProjectionMatrix;\n                        mat4 $viewportMatrix = viewportMatrix;\n                        mat4 $inverseViewportMatrix = inverseViewportMatrix;\n                        vec4 $textureTransformMatrix = textureTransformMatrix;\n                        vec3 $eyePosition = eyePosition;\n                        float $aspectRatio = aspectRatio;\n                        float $gamma = gamma;\n                        float $exposure = exposure;\n                        float $time = time;\n                        mat4 $modelMatrix = modelMatrix;\n                        mat4 $inverseModelMatrix = inverseModelMatrix;\n                        mat4 $modelViewMatrix = modelViewMatrix;\n                        mat3 $modelNormalMatrix = modelNormalMatrix;\n                        mat4 $inverseModelViewMatrix = inverseModelViewMatrix;\n                        mat4 $mvp = mvp;\n                        mat4 $inverseModelViewProjectionMatrix = inverseModelViewProjectionMatrix;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl45/qt3d_default_uniforms.inc"
                    ],
                    "substitution": "\n                        mat4 $viewMatrix = viewMatrix;\n                        mat4 $projectionMatrix = projectionMatrix;\n                        mat4 $viewProjectionMatrix = viewProjectionMatrix;\n                        mat4 $inverseViewMatrix = inverseViewMatrix;\n                        mat4 $inverseProjectionMatrix = inverseProjectionMatrix;\n                        mat4 $inverseViewProjectionMatrix = inverseViewProjectionMatrix;\n                        mat4 $viewportMatrix = viewportMatrix;\n                        mat4 $inverseViewportMatrix = inverseViewportMatrix;\n                        vec4 $textureTransformMatrix = textureTransformMatrix;\n                        vec3 $eyePosition = eyePosition;\n                        float $aspectRatio = aspectRatio;\n                        float $gamma = gamma;\n                        float $exposure = exposure;\n                        float $time = time;\n                        mat4 $modelMatrix = modelMatrix;\n                        mat4 $inverseModelMatrix = inverseModelMatrix;\n                        mat4 $modelViewMatrix = modelViewMatrix;\n                        mat3 $modelNormalMatrix = modelNormalMatrix;\n                        mat4 $inverseModelViewMatrix = inverseModelViewMatrix;\n                        mat4 $mvp = mvp;\n                        mat4 $inverseModelViewProjectionMatrix = inverseModelViewProjectionMatrix;"
                }
            ]
        },
        "sampleTexture": {
            "inputs": [
                "coord"
            ],
            "name": "sampleTexture",
            "outputs": [
                "color"
            ],
            "parameters": {
                "name": {
                    "type": "QString",
                    "value": "defaultName"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "highp vec4 $color = texture2D($name, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "highp vec4 $color = texture($name, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "vec4 $color = texture($name, $coord);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "add-sampler sampler2D $name"
                    ],
                    "substitution": "vec4 $color = texture($name, $coord);"
                }
            ]
        },
        "swizzle": {
            "inputs": [
                "input"
            ],
            "name": "swizzle",
            "outputs": [
                "output"
            ],
            "parameters": {
                "fields": {
                    "type": "QString",
                    "value": "xyz"
                },
                "inputType": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = ($input).$fields;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = ($input).$fields;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = ($input).$fields;"
                }
            ]
        },
        "uniformInput": {
            "inputs": [
            ],
            "name": "uniformInput",
            "outputs": [
                "value"
            ],
            "parameters": {
                "name": {
                    "type": "QString",
                    "value": "defaultName"
                },
                "type": {
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            },
            "rules": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "add-uniform $type $name"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        }
    }
}
