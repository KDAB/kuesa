{
    "edges": [
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{b597ac42-39ab-4ec9-b819-61977916c578}",
            "sourcePort": 12,
            "targetNode": "{6e38b553-3aed-4f06-911b-55f5a79f42b0}",
            "targetPort": 1
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{9083907f-ad8b-4933-8a6d-96764fb14b0c}",
            "sourcePort": 0,
            "targetNode": "{8dae1328-145f-42bb-998c-0bb17be6c636}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{b597ac42-39ab-4ec9-b819-61977916c578}",
            "sourcePort": 1,
            "targetNode": "{82fa83d1-f824-429c-9df8-e48afa59bb00}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{b597ac42-39ab-4ec9-b819-61977916c578}",
            "sourcePort": 0,
            "targetNode": "{78db0604-f1c7-4343-9191-f1a936820e0b}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{6a8287cd-5f77-4357-8006-d40aea9ec762}",
            "sourcePort": 0,
            "targetNode": "{ea6dec60-87b9-45ab-a6e1-fb1e0b55eb7c}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{78db0604-f1c7-4343-9191-f1a936820e0b}",
            "sourcePort": 0,
            "targetNode": "{2606ee2f-e7c7-4c32-9287-304951d0aa40}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{2606ee2f-e7c7-4c32-9287-304951d0aa40}",
            "sourcePort": 0,
            "targetNode": "{82fa83d1-f824-429c-9df8-e48afa59bb00}",
            "targetPort": 1
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{8dae1328-145f-42bb-998c-0bb17be6c636}",
            "sourcePort": 0,
            "targetNode": "{b750802b-b2c6-4ba3-9f59-9ce6d4155802}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{82fa83d1-f824-429c-9df8-e48afa59bb00}",
            "sourcePort": 0,
            "targetNode": "{6e38b553-3aed-4f06-911b-55f5a79f42b0}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{00c30ec0-689d-4f9c-8e85-ba11b102e938}",
            "sourcePort": 0,
            "targetNode": "{9083907f-ad8b-4933-8a6d-96764fb14b0c}",
            "targetPort": 1
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{a52e2790-c970-4c17-97f8-53c4669b104d}",
            "sourcePort": 0,
            "targetNode": "{43a0231d-a27e-4fed-8439-284131d634b8}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{0b59e4be-97be-4a98-9f53-df1081f19791}",
            "sourcePort": 0,
            "targetNode": "{00c30ec0-689d-4f9c-8e85-ba11b102e938}",
            "targetPort": 0
        },
        {
            "comment": "",
            "layers": [
            ],
            "selected": false,
            "sourceNode": "{6e38b553-3aed-4f06-911b-55f5a79f42b0}",
            "sourcePort": 0,
            "targetNode": "{9083907f-ad8b-4933-8a6d-96764fb14b0c}",
            "targetPort": 0
        }
    ],
    "groups": [
    ],
    "inputs": [
    ],
    "layers": [
    ],
    "nodes": [
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
            },
            "position": {
                "x": -98,
                "y": 612
            },
            "prototype": "qt3d_default_uniforms",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{b597ac42-39ab-4ec9-b819-61977916c578}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "vertexPosition",
                "1": "QShaderLanguage::Vec3",
                "2": "0"
            },
            "position": {
                "x": 164,
                "y": 1055
            },
            "prototype": "input",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{0b59e4be-97be-4a98-9f53-df1081f19791}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "color",
                "1": "QShaderLanguage::Vec4",
                "2": "1"
            },
            "position": {
                "x": 1209,
                "y": 1400
            },
            "prototype": "output",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{ea6dec60-87b9-45ab-a6e1-fb1e0b55eb7c}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "QShaderLanguage::Mat4",
                "1": "QShaderLanguage::Mat4",
                "2": "QShaderLanguage::Mat4"
            },
            "position": {
                "x": 1140,
                "y": 422
            },
            "prototype": "multiply",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{82fa83d1-f824-429c-9df8-e48afa59bb00}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "vertexTexCoord",
                "1": "QShaderLanguage::Vec2",
                "2": "2"
            },
            "position": {
                "x": 170,
                "y": 1270
            },
            "prototype": "input",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{a52e2790-c970-4c17-97f8-53c4669b104d}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "vertexColor",
                "1": "QShaderLanguage::Vec4",
                "2": "1"
            },
            "position": {
                "x": 172,
                "y": 1500
            },
            "prototype": "input",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{6a8287cd-5f77-4357-8006-d40aea9ec762}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "QShaderLanguage::Mat4",
                "1": "QShaderLanguage::Mat4",
                "2": "QShaderLanguage::Mat4"
            },
            "position": {
                "x": 1481,
                "y": 666
            },
            "prototype": "multiply",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{6e38b553-3aed-4f06-911b-55f5a79f42b0}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
                "0": "0.0,0.0,0.0"
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "QShaderLanguage::Vec4",
                "1": "xyww",
                "2": "QShaderLanguage::Vec4"
            },
            "position": {
                "x": 2421,
                "y": 907
            },
            "prototype": "swizzle",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{8dae1328-145f-42bb-998c-0bb17be6c636}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "QShaderLanguage::Mat4",
                "1": "QShaderLanguage::Vec4",
                "2": "QShaderLanguage::Vec4"
            },
            "position": {
                "x": 1965,
                "y": 846
            },
            "prototype": "multiply",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{9083907f-ad8b-4933-8a6d-96764fb14b0c}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
                "0": "0.0"
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "QShaderLanguage::Mat4",
                "1": "QShaderLanguage::Mat3"
            },
            "position": {
                "x": 512,
                "y": 694
            },
            "prototype": "cast",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{78db0604-f1c7-4343-9191-f1a936820e0b}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
                "0": "0.0"
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "QShaderLanguage::Mat3",
                "1": "QShaderLanguage::Mat4"
            },
            "position": {
                "x": 832,
                "y": 672
            },
            "prototype": "cast",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{2606ee2f-e7c7-4c32-9287-304951d0aa40}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
                "0": "0.0",
                "1": "1.0"
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "QShaderLanguage::Vec3",
                "1": "QShaderLanguage::Float",
                "2": "QShaderLanguage::Vec4"
            },
            "position": {
                "x": 1485,
                "y": 945
            },
            "prototype": "join2",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{00c30ec0-689d-4f9c-8e85-ba11b102e938}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
            },
            "position": {
                "x": 2840,
                "y": 934
            },
            "prototype": "gl_Position",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{b750802b-b2c6-4ba3-9f59-9ce6d4155802}"
        },
        {
            "collapsed": false,
            "comment": "",
            "group": "{00000000-0000-0000-0000-000000000000}",
            "inputDefaultValues": {
            },
            "layers": [
            ],
            "parameterValues": {
                "0": "texCoord",
                "1": "QShaderLanguage::Vec2",
                "2": "0"
            },
            "position": {
                "x": 1213,
                "y": 1200
            },
            "prototype": "output",
            "selected": false,
            "type": "PrototypeBasedNode",
            "uuid": "{43a0231d-a27e-4fed-8439-284131d634b8}"
        }
    ],
    "outputs": [
    ],
    "prototypes": [
        {
            "inputs": [
            ],
            "name": "VERTEX_COLOR",
            "outputs": [
                {
                    "name": "alpha",
                    "type": "QString"
                },
                {
                    "name": "color",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef VERTEX_COLOR",
                        "#define VERTEX_COLOR",
                        "varying highp vec4 color;",
                        "#endif"
                    ],
                    "substitution": "highp vec3 $color = color.rgb;highp float $alpha = color.a;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef VERTEX_COLOR",
                        "#define VERTEX_COLOR",
                        "in vec4 color;",
                        "#endif"
                    ],
                    "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef VERTEX_COLOR",
                        "#define VERTEX_COLOR",
                        "in vec4 color;",
                        "#endif"
                    ],
                    "substitution": "vec3 $color = color.rgb;float $alpha = color.a;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "condition",
                    "type": "$conditionType"
                },
                {
                    "defaultValue": "",
                    "name": "true",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "false",
                    "type": "$type"
                }
            ],
            "name": "if",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "conditionType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = ($condition) ? $true : $false;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = ($condition) ? $true : $false;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = ($condition) ? $true : $false;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "boolInput",
            "outputs": [
                {
                    "name": "value",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "qualifier",
                    "type": "QShaderLanguage::StorageQualifier",
                    "value": "QShaderLanguage::Input"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "gamma",
                    "type": "QString"
                }
            ],
            "name": "kuesa_gammaCorrect",
            "outputs": [
                {
                    "name": "outputColor",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "substitution": "vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec3 $outputColor = pow($color, vec3(1.0 / $gamma));"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input",
                    "type": "QString"
                }
            ],
            "name": "VECT_TRANSFORM",
            "outputs": [
                {
                    "name": "transformed",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef MODEL_VIEW",
                        "#define MODEL_VIEW",
                        "uniform highp mat4 modelView;",
                        "#endif"
                    ],
                    "substitution": "highp vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef MODEL_VIEW",
                        "#define MODEL_VIEW",
                        "uniform  mat4 modelView;",
                        "#endif"
                    ],
                    "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef MODEL_VIEW",
                        "#define MODEL_VIEW",
                        "uniform  mat4 modelView;",
                        "#endif"
                    ],
                    "substitution": "vec3 $transformed = (modelView * vec4($input, 0.0)).xyz * vec3(1.0, 1.0, -1.0);"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "kuesa_morphWeightsUniform",
            "outputs": [
                {
                    "name": "weights",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "struct MorphWeights {\n float weight0;\n float weight1;\n float weight2;\n float weight3; \n float weight4; \n float weight5;\n float weight6;\n float weight7; };",
                        "uniform MorphWeights morphWeights;"
                    ],
                    "substitution": ""
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "struct MorphWeights {\n highp float weight0;\n highp float weight1;\n highp float weight2;\n highp float weight3; \n highp float weight4; \n highp float weight5;\n highp float weight6;\n highp float weight7; };",
                        "uniform MorphWeights morphWeights;"
                    ],
                    "substitution": ""
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "struct MorphWeights {\n highp float weight0;\n highp float weight1;\n highp float weight2;\n highp float weight3; \n highp float weight4; \n highp float weight5;\n highp float weight6;\n highp float weight7; };",
                        "uniform MorphWeights morphWeights;"
                    ],
                    "substitution": ""
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "struct MorphWeights {\n float weight0;\n float weight1;\n float weight2;\n float weight3; \n float weight4; \n float weight5;\n float weight6;\n float weight7; };",
                        "uniform MorphWeights morphWeights;"
                    ],
                    "substitution": ""
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "texture",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "useTexture",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "vector",
                    "type": "QString"
                }
            ],
            "name": "TEX_IMAGE",
            "outputs": [
                {
                    "name": "alpha",
                    "type": "QString"
                },
                {
                    "name": "color",
                    "type": "QString"
                },
                {
                    "name": "inter",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "condition",
                    "type": "QString",
                    "value": "false"
                },
                {
                    "name": "defaultColor",
                    "type": "QString",
                    "value": "1.0, 1.0, 1.0, 1.0"
                },
                {
                    "name": "linearizer",
                    "type": "QString",
                    "value": ""
                },
                {
                    "name": "name",
                    "type": "QString",
                    "value": ""
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef SRGB_TO_LINEAR",
                        "#define SRGB_TO_LINEAR",
                        "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
                        "#endif"
                    ],
                    "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $vector.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef SRGB_TO_LINEAR",
                        "#define SRGB_TO_LINEAR",
                        "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
                        "#endif"
                    ],
                    "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef SRGB_TO_LINEAR",
                        "#define SRGB_TO_LINEAR",
                        "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
                        "#endif"
                    ],
                    "substitution": "vec4 $inter = $useTexture ? texture($texture, $vector.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "vector",
                    "type": "QString"
                }
            ],
            "name": "SEPXYZ",
            "outputs": [
                {
                    "name": "x",
                    "type": "QString"
                },
                {
                    "name": "y",
                    "type": "QString"
                },
                {
                    "name": "z",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp float $x = $vector.x;highp float $y = $vector.y;highp float $z = $vector.z;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "float $x = $vector.x;float $y = $vector.y;float $z = $vector.z;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "fac",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "input1",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "input2",
                    "type": "QString"
                }
            ],
            "name": "MIX",
            "outputs": [
                {
                    "name": "mixed",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $mixed = mix($input1, $input2, $fac);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $mixed = mix($input1, $input2, $fac);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "$type $mixed = mix($input1, $input2, $fac);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                }
            ],
            "name": "MATERIAL_OUTPUT",
            "outputs": [
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "gl_FragColor = clamp($color, 0.0, 1.0);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp vec4 fragColor;"
                    ],
                    "substitution": "fragColor = clamp($color, 0.0, 1.0);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = clamp($color, 0.0, 1.0);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = clamp($color, 0.0, 1.0);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "position",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "projectTexture",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "texture",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "useTexture",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "uv",
                    "type": "QString"
                }
            ],
            "name": "ENV_TEX_IMAGE",
            "outputs": [
                {
                    "name": "alpha",
                    "type": "QString"
                },
                {
                    "name": "color",
                    "type": "QString"
                },
                {
                    "name": "inter",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "condition",
                    "type": "QString",
                    "value": "false"
                },
                {
                    "name": "defaultColor",
                    "type": "QString",
                    "value": "1.0, 1.0, 1.0, 1.0"
                },
                {
                    "name": "linearizer",
                    "type": "QString",
                    "value": ""
                },
                {
                    "name": "name",
                    "type": "QString",
                    "value": ""
                },
                {
                    "name": "projection",
                    "type": "QString",
                    "value": ""
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef SRGB_TO_LINEAR",
                        "#define SRGB_TO_LINEAR",
                        "highp vec3 sRGBtoLinear(highp vec3 srgb) { return pow(srgb, vec3(2.2)); }",
                        "#endif",
                        "#ifndef EQUI_RECTANGULAR",
                        "#define EQUI_RECTANGULAR",
                        "highp vec2 equiRectangular(highp vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
                        "#endif"
                    ],
                    "substitution": "highp vec4 $inter = $useTexture ? texture2D($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);highp vec3 $color = $linearizer($inter.rgb);highp float $alpha = $inter.a;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef SRGB_TO_LINEAR",
                        "#define SRGB_TO_LINEAR",
                        "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
                        "#endif",
                        "#ifndef EQUI_RECTANGULAR",
                        "#define EQUI_RECTANGULAR",
                        "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
                        "#endif"
                    ],
                    "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef SRGB_TO_LINEAR",
                        "#define SRGB_TO_LINEAR",
                        "vec3 sRGBtoLinear(vec3 srgb) { return pow(srgb, vec3(2.2)); }",
                        "#endif",
                        "#ifndef EQUI_RECTANGULAR",
                        "#define EQUI_RECTANGULAR",
                        "vec2 equiRectangular(vec3 pos) { return vec2(atan(pos.z, pos.x), -asin(pos.y)) * vec2(0.1591, 0.3183) + vec2(0.5); }",
                        "#endif"
                    ],
                    "substitution": "vec4 $inter = $useTexture ? texture($texture, $projectTexture ? $projection($position) : $uv.xy) : vec4($defaultColor);vec3 $color = $linearizer($inter.rgb);float $alpha = $inter.a;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input1",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "input2",
                    "type": "$type"
                }
            ],
            "name": "or",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 || $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 || $input2;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 || $input2;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "MATERIAL_PROPERTIES",
            "outputs": [
                {
                    "name": "matteFilter",
                    "type": "QString"
                },
                {
                    "name": "matteGain",
                    "type": "QString"
                },
                {
                    "name": "matteMap",
                    "type": "QString"
                },
                {
                    "name": "postGain",
                    "type": "QString"
                },
                {
                    "name": "postVertexColor",
                    "type": "QString"
                },
                {
                    "name": "usesMatteMap",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "struct MaterialProperties {\n    highp vec3 matteFilter;\n    highp float matteGain;\n    highp float postVertexColor;\n    highp float postGain;\n    bool usesMatteMap;\n    highp sampler2D matteMap;\n};\nuniform MaterialProperties properties;"
                    ],
                    "substitution": "MaterialProperties $properties = properties;highp vec3 $matteFilter = properties.matteFilter;highp float $matteGain = properties.matteGain;highp float $postVertexColor = properties.postVertexColor;highp float $postGain = properties.postGain;bool $usesMatteMap = properties.usesMatteMap;highp sampler2D $matteMap = properties.matteMap;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "struct MaterialProperties {\n    vec3 matteFilter;\n    float matteGain;\n    float postVertexColor;\n    float postGain;\n    bool usesMatteMap;\n    sampler2D matteMap;\n};\nuniform MaterialProperties properties;"
                    ],
                    "substitution": "MaterialProperties $properties = properties;vec3 $matteFilter = properties.matteFilter;float $matteGain = properties.matteGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesMatteMap = properties.usesMatteMap;sampler2D $matteMap = properties.matteMap;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "struct MaterialProperties {\n    vec3 matteFilter;\n    float matteGain;\n    float postVertexColor;\n    float postGain;\n    bool usesMatteMap;\n    sampler2D matteMap;\n};\nuniform MaterialProperties properties;"
                    ],
                    "substitution": "MaterialProperties $properties = properties;vec3 $matteFilter = properties.matteFilter;float $matteGain = properties.matteGain;float $postVertexColor = properties.postVertexColor;float $postGain = properties.postGain;bool $usesMatteMap = properties.usesMatteMap;sampler2D $matteMap = properties.matteMap;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "fourth",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "third",
                    "type": "QString"
                }
            ],
            "name": "join4d",
            "outputs": [
                {
                    "name": "output",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                },
                {
                    "name": "typeOfFirst",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfFourth",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfSecond",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfThird",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $output = $type($first, $second, $third, $fourth);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($first, $second, $third, $fourth);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "$type $output = $type($first, $second, $third, $fourth);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "b",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "g",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "r",
                    "type": "QString"
                }
            ],
            "name": "COMBRGB",
            "outputs": [
                {
                    "name": "image",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $image = vec3($r, $g, $b);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec3 $image = vec3($r, $g, $b);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec3 $image = vec3($r, $g, $b);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                }
            ],
            "name": "BSDF_TRANSPARENT",
            "outputs": [
                {
                    "name": "bsdf",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec4 $bsdf = vec4($color.rgb, 1 - ($color.r + $color.g + $color.b) / 3);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input0",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "input1",
                    "type": "QString"
                }
            ],
            "name": "BINARY_MATH_OPERATION",
            "outputs": [
                {
                    "name": "output0",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "firstType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "operation",
                    "type": "QString",
                    "value": "+"
                },
                {
                    "name": "outputType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "secondType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outputType $output0 = ($input0) $operation ($input1);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = ($input0) $operation ($input1);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input0",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "input1",
                    "type": "QString"
                }
            ],
            "name": "BINARY_MATH_FUNCTION",
            "outputs": [
                {
                    "name": "output0",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "firstType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "operation",
                    "type": "QString",
                    "value": "min"
                },
                {
                    "name": "outputType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "secondType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outputType $output0 = $operation($input0, $input1);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = $operation($input0, $input1);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = $operation($input0, $input1);"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "qt3d_default_uniforms",
            "outputs": [
                {
                    "name": "viewMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "projectionMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "viewProjectionMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "inverseViewMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "inverseProjectionMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "inverseViewProjectionMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "textureTransformMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "eyePosition",
                    "type": "QShaderLanguage::Vec3"
                },
                {
                    "name": "aspectRatio",
                    "type": "QShaderLanguage::Float"
                },
                {
                    "name": "gamma",
                    "type": "QShaderLanguage::Float"
                },
                {
                    "name": "exposure",
                    "type": "QShaderLanguage::Float"
                },
                {
                    "name": "time",
                    "type": "QShaderLanguage::Float"
                },
                {
                    "name": "modelMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "inverseModelMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "modelViewMatrix",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "modelNormalMatrix",
                    "type": "QShaderLanguage::Mat3"
                },
                {
                    "name": "mvp",
                    "type": "QShaderLanguage::Mat4"
                },
                {
                    "name": "inverseModelViewProjectionMatrix",
                    "type": "QShaderLanguage::Mat4"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/qt3d_default_uniforms.inc"
                    ],
                    "substitution": "\n                        highp mat4 $viewMatrix = viewMatrix;\n                        highp mat4 $projectionMatrix = projectionMatrix;\n                        highp mat4 $viewProjectionMatrix = viewProjectionMatrix;\n                        highp mat4 $inverseViewMatrix = inverseViewMatrix;\n                        highp mat4 $inverseProjectionMatrix = inverseProjectionMatrix;\n                        highp mat4 $inverseViewProjectionMatrix = inverseViewProjectionMatrix;\n                        highp mat4 $viewportMatrix = viewportMatrix;\n                        highp mat4 $inverseViewportMatrix = inverseViewportMatrix;\n                        highp vec4 $textureTransformMatrix = textureTransformMatrix;\n                        highp vec3 $eyePosition = eyePosition;\n                        highp float $aspectRatio = aspectRatio;\n                        highp float $gamma = gamma;\n                        highp float $exposure = exposure;\n                        highp float $time = time;\n                        highp mat4 $modelMatrix = modelMatrix;\n                        highp mat4 $inverseModelMatrix = inverseModelMatrix;\n                        highp mat4 $modelViewMatrix = modelViewMatrix;\n                        highp mat3 $modelNormalMatrix = modelNormalMatrix;\n                        highp mat4 $inverseModelViewMatrix = inverseModelViewMatrix;\n                        highp mat4 $mvp = mvp;\n                        highp mat4 $inverseModelViewProjectionMatrix = inverseModelViewProjectionMatrix;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/qt3d_default_uniforms.inc"
                    ],
                    "substitution": "\n                        highp mat4 $viewMatrix = viewMatrix;\n                        highp mat4 $projectionMatrix = projectionMatrix;\n                        highp mat4 $viewProjectionMatrix = viewProjectionMatrix;\n                        highp mat4 $inverseViewMatrix = inverseViewMatrix;\n                        highp mat4 $inverseProjectionMatrix = inverseProjectionMatrix;\n                        highp mat4 $inverseViewProjectionMatrix = inverseViewProjectionMatrix;\n                        highp mat4 $viewportMatrix = viewportMatrix;\n                        highp mat4 $inverseViewportMatrix = inverseViewportMatrix;\n                        highp vec4 $textureTransformMatrix = textureTransformMatrix;\n                        highp vec3 $eyePosition = eyePosition;\n                        highp float $aspectRatio = aspectRatio;\n                        highp float $gamma = gamma;\n                        highp float $exposure = exposure;\n                        highp float $time = time;\n                        highp mat4 $modelMatrix = modelMatrix;\n                        highp mat4 $inverseModelMatrix = inverseModelMatrix;\n                        highp mat4 $modelViewMatrix = modelViewMatrix;\n                        highp mat3 $modelNormalMatrix = modelNormalMatrix;\n                        highp mat4 $inverseModelViewMatrix = inverseModelViewMatrix;\n                        highp mat4 $mvp = mvp;\n                        highp mat4 $inverseModelViewProjectionMatrix = inverseModelViewProjectionMatrix;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/qt3d_default_uniforms.inc"
                    ],
                    "substitution": "\n                        mat4 $viewMatrix = viewMatrix;\n                        mat4 $projectionMatrix = projectionMatrix;\n                        mat4 $viewProjectionMatrix = viewProjectionMatrix;\n                        mat4 $inverseViewMatrix = inverseViewMatrix;\n                        mat4 $inverseProjectionMatrix = inverseProjectionMatrix;\n                        mat4 $inverseViewProjectionMatrix = inverseViewProjectionMatrix;\n                        mat4 $viewportMatrix = viewportMatrix;\n                        mat4 $inverseViewportMatrix = inverseViewportMatrix;\n                        vec4 $textureTransformMatrix = textureTransformMatrix;\n                        vec3 $eyePosition = eyePosition;\n                        float $aspectRatio = aspectRatio;\n                        float $gamma = gamma;\n                        float $exposure = exposure;\n                        float $time = time;\n                        mat4 $modelMatrix = modelMatrix;\n                        mat4 $inverseModelMatrix = inverseModelMatrix;\n                        mat4 $modelViewMatrix = modelViewMatrix;\n                        mat3 $modelNormalMatrix = modelNormalMatrix;\n                        mat4 $inverseModelViewMatrix = inverseModelViewMatrix;\n                        mat4 $mvp = mvp;\n                        mat4 $inverseModelViewProjectionMatrix = inverseModelViewProjectionMatrix;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl45/qt3d_default_uniforms.inc"
                    ],
                    "substitution": "\n                        mat4 $viewMatrix = viewMatrix;\n                        mat4 $projectionMatrix = projectionMatrix;\n                        mat4 $viewProjectionMatrix = viewProjectionMatrix;\n                        mat4 $inverseViewMatrix = inverseViewMatrix;\n                        mat4 $inverseProjectionMatrix = inverseProjectionMatrix;\n                        mat4 $inverseViewProjectionMatrix = inverseViewProjectionMatrix;\n                        mat4 $viewportMatrix = viewportMatrix;\n                        mat4 $inverseViewportMatrix = inverseViewportMatrix;\n                        vec4 $textureTransformMatrix = textureTransformMatrix;\n                        vec3 $eyePosition = eyePosition;\n                        float $aspectRatio = aspectRatio;\n                        float $gamma = gamma;\n                        float $exposure = exposure;\n                        float $time = time;\n                        mat4 $modelMatrix = modelMatrix;\n                        mat4 $inverseModelMatrix = inverseModelMatrix;\n                        mat4 $modelViewMatrix = modelViewMatrix;\n                        mat3 $modelNormalMatrix = modelNormalMatrix;\n                        mat4 $inverseModelViewMatrix = inverseModelViewMatrix;\n                        mat4 $mvp = mvp;\n                        mat4 $inverseModelViewProjectionMatrix = inverseModelViewProjectionMatrix;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "builtinInput",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "alpha",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                }
            ],
            "name": "BLEND_ALPHA",
            "outputs": [
                {
                    "name": "shader",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $shader = vec4($color, $alpha);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $shader = vec4($color, $alpha);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec4 $shader = vec4($color, $alpha);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input",
                    "type": "$inputType"
                }
            ],
            "name": "swizzle",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "inputType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "fields",
                    "type": "QString",
                    "value": "xyz"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = ($input).$fields;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = ($input).$fields;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = ($input).$fields;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "uniformArrayInput",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "size",
                    "type": "QString",
                    "value": "100"
                },
                {
                    "name": "location",
                    "type": "QString",
                    "value": "0"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp $type $name[$size];"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "unform $type $name[$size];"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "add-uniform $type $name[$size]"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "max",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "min",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "value",
                    "type": "QString"
                }
            ],
            "name": "CLAMP",
            "outputs": [
                {
                    "name": "result",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $result = clamp($value, $min, $max);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $result = clamp($value, $min, $max);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "$type $result = clamp($value, $min, $max);"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "input",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "location",
                    "type": "QString",
                    "value": "0"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "attribute highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "in highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "in $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "layout(location = $location) in $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input1",
                    "type": "$valueType"
                },
                {
                    "defaultValue": "",
                    "name": "input2",
                    "type": "$valueType"
                }
            ],
            "name": "equal",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "valueType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 == $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 == $input2;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 == $input2;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$firstType"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$secondType"
                }
            ],
            "name": "divide",
            "outputs": [
                {
                    "name": "quotient",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "firstType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "secondType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $quotient = $first / $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $quotient = $first / $second;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $quotient = $first / $second;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "condition",
                    "type": "$conditionType"
                },
                {
                    "defaultValue": "",
                    "name": "value",
                    "type": "$type"
                }
            ],
            "name": "discard_if",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "conditionType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp $type discard_if_$type(bool shouldDiscard, highp $type value) { if (shouldDiscard) discard; return value; }"
                    ],
                    "substitution": "highp $type $output = discard_if_$type($condition, $value);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$type discard_if_$type(bool shouldDiscard, $type value) { if (shouldDiscard) discard; return value; }"
                    ],
                    "substitution": "$type $output = discard_if_$type($condition, $value);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$type discard_if_$type(bool shouldDiscard, $type value) { if (shouldDiscard) discard; return value; }"
                    ],
                    "substitution": "$type $output = discard_if_$type($condition, $value);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "base",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "power",
                    "type": "$type"
                }
            ],
            "name": "pow",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $value = pow($base, $power);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $value = pow($base, $power);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $value = pow($base, $power);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$typeOfFirst"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$typeOfSecond"
                },
                {
                    "defaultValue": "",
                    "name": "third",
                    "type": "$typeOfThird"
                }
            ],
            "name": "join3",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "typeOfFirst",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfSecond",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfThird",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = $type($first, $second, $third);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($first, $second, $third);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($first, $second, $third);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$firstType"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$secondType"
                }
            ],
            "name": "multiply",
            "outputs": [
                {
                    "name": "product",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "firstType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "secondType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $product = $first * $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $product = $first * $second;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $product = $first * $second;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "kuesa_morphTargetsWeights",
            "outputs": [
                {
                    "name": "weights",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_morphtargets_weights.inc.vert"
                    ],
                    "substitution": ""
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_morphtargets_weights.inc.vert"
                    ],
                    "substitution": ""
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_morphtargets_weights.inc.vert"
                    ],
                    "substitution": ""
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_morphtargets_weights.inc.vert"
                    ],
                    "substitution": ""
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input",
                    "type": "$inputType"
                }
            ],
            "name": "cast",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "inputType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = $type($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($input);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($input);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "sRGB",
                    "type": "QString"
                }
            ],
            "name": "sRGBtoLinear",
            "outputs": [
                {
                    "name": "linear",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $linear = vec4(pow($sRGB.rgb, vec3(2.2)), $sRGB.a);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $linear = vec4(pow($sRGB.rgb, vec3(2.2)), $sRGB.a);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $linear = vec4(pow($sRGB.rgb, vec3(2.2)), $sRGB.a);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec4 $linear = vec4(pow($sRGB.rgb, vec3(2.2)), $sRGB.a);"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "textureInput",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "add-sampler $type $name"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input1",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "input2",
                    "type": "$type"
                }
            ],
            "name": "and",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 && $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 && $input2;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 && $input2;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$secondType"
                }
            ],
            "name": "min",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "secondType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $value = min($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $value = min($first, $second);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $value = min($first, $second);"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "constant",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "constant",
                    "type": "QString",
                    "value": "0.0"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $value = $type($constant);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $value = $type($constant);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $value = $type($constant);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "coord",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "texture",
                    "type": "QString"
                }
            ],
            "name": "kuesa_sampleTexture",
            "outputs": [
                {
                    "name": "color",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $color = texture2D($texture, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $color = texture($texture, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $color = texture($texture, $coord);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec4 $color = texture($texture, $coord);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "coord",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "texture",
                    "type": "QString"
                }
            ],
            "name": "sampleCubeTexture",
            "outputs": [
                {
                    "name": "color",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform samplerCube $name;"
                    ],
                    "substitution": "highp vec4 $color = textureCube($texture, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform samplerCube $name;"
                    ],
                    "substitution": "highp vec4 $color = texture($texture, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform samplerCube $name;"
                    ],
                    "substitution": "vec4 $color = texture($texture, $coord);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform samplerCube $name;"
                    ],
                    "substitution": "vec4 $color = texture($texture, $coord);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "exposure",
                    "type": "QString"
                }
            ],
            "name": "kuesa_exposureCorrect",
            "outputs": [
                {
                    "name": "outputColor",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "substitution": "vec3 $outputColor = $color * pow(2.0, $exposure);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = $color * pow(2.0, $exposure);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = $color * pow(2.0, $exposure);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec3 $outputColor = $color * pow(2.0, $exposure);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "vTangent",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "weights",
                    "type": "QString"
                }
            ],
            "name": "kuesa_morphTargetsTangent",
            "outputs": [
                {
                    "name": "tangent",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_morphtargets_tangent.inc.vert"
                    ],
                    "substitution": "highp vec4 $tangent = kuesa_morphTangent($vTangent);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_morphtargets_tangent.inc.vert"
                    ],
                    "substitution": "highp vec4 $tangent = kuesa_morphTangent($vTangent);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_morphtargets_tangent.inc.vert"
                    ],
                    "substitution": "vec4 $tangent = kuesa_morphTangent($vTangent);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_morphtargets_tangent.inc.vert"
                    ],
                    "substitution": "vec4 $tangent = kuesa_morphTangent($vTangent);"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "kuesa_unlitShaderData",
            "outputs": [
                {
                    "name": "shaderData",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_unlitShaderData.inc.frag"
                    ],
                    "substitution": "Unlit $shaderData = unlit;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_unlitShaderData.inc.frag"
                    ],
                    "substitution": "Unlit $shaderData = unlit;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_unlitShaderData.inc.frag"
                    ],
                    "substitution": "Unlit $shaderData = unlit;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_unlitShaderData.inc.frag"
                    ],
                    "substitution": "Unlit $shaderData = unlit;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "vNormal",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "weights",
                    "type": "QString"
                }
            ],
            "name": "kuesa_morphTargetsNormal",
            "outputs": [
                {
                    "name": "normal",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_morphtargets_normal.inc.vert"
                    ],
                    "substitution": "highp vec3 $normal = kuesa_morphNormal($vNormal);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_morphtargets_normal.inc.vert"
                    ],
                    "substitution": "highp vec3 $normal = kuesa_morphNormal($vNormal);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_morphtargets_normal.inc.vert"
                    ],
                    "substitution": "vec3 $normal = kuesa_morphNormal($vNormal);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_morphtargets_normal.inc.vert"
                    ],
                    "substitution": "vec3 $normal = kuesa_morphNormal($vNormal);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$typeOfFirst"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$typeOfSecond"
                }
            ],
            "name": "join2",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "typeOfFirst",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfSecond",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec2"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = $type($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($first, $second);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($first, $second);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                }
            ],
            "name": "COLOR_TO_SHADER",
            "outputs": [
                {
                    "name": "shader",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $shader = vec4($color, 1.0);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $shader = vec4($color, 1.0);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec4 $shader = vec4($color, 1.0);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                }
            ],
            "name": "kuesa_reinhardToneMap",
            "outputs": [
                {
                    "name": "outputColor",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "substitution": "vec3 $outputColor = $color / ($color + vec3(1.0));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = $color / ($color + vec3(1.0));"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $outputColor = $color / ($color + vec3(1.0));"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec3 $outputColor = $color / ($color + vec3(1.0));"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "vPosition",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "weights",
                    "type": "QString"
                }
            ],
            "name": "kuesa_morphTargetsPosition",
            "outputs": [
                {
                    "name": "position",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_morphtargets_position.inc.vert"
                    ],
                    "substitution": "highp vec3 $position = kuesa_morphPosition($vPosition);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_morphtargets_position.inc.vert"
                    ],
                    "substitution": "highp vec3 $position = kuesa_morphPosition($vPosition);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_morphtargets_position.inc.vert"
                    ],
                    "substitution": "vec3 $position = kuesa_morphPosition($vPosition);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_morphtargets_position.inc.vert"
                    ],
                    "substitution": "vec3 $position = kuesa_morphPosition($vPosition);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "ambientOcclusion",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "baseColor",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "emissive",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "metalness",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "roughness",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "worldNormal",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "worldPosition",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "worldView",
                    "type": "QString"
                }
            ],
            "name": "kuesa_metalRoughFunction",
            "outputs": [
                {
                    "name": "outputColor",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_metalrough.inc.frag"
                    ],
                    "substitution": "vec3 $outputColor = kuesa_metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $emissive, $worldPosition, $worldView, $worldNormal);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_metalrough.inc.frag"
                    ],
                    "substitution": "highp vec3 $outputColor = kuesa_metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $emissive, $worldPosition, $worldView, $worldNormal);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_metalrough.inc.frag"
                    ],
                    "substitution": "highp vec3 $outputColor = kuesa_metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $emissive, $worldPosition, $worldView, $worldNormal);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_metalrough.inc.frag"
                    ],
                    "substitution": "vec3 $outputColor = kuesa_metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $emissive, $worldPosition, $worldView, $worldNormal);"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "kuesa_iroDiffuseShaderData",
            "outputs": [
                {
                    "name": "shaderData",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_iroDiffuseShaderData.inc.frag"
                    ],
                    "substitution": "MaterialProperties $shaderData = properties;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_iroDiffuseShaderData.inc.frag"
                    ],
                    "substitution": "MaterialProperties $shaderData = properties;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_iroDiffuseShaderData.inc.frag"
                    ],
                    "substitution": "MaterialProperties $shaderData = properties;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_iroDiffuseShaderData.inc.frag"
                    ],
                    "substitution": "MaterialProperties $shaderData = properties;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "discard",
            "outputs": [
                {
                    "name": "output",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "discard;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "discard;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "discard;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "kuesa_iroDiffuseHemiShaderData",
            "outputs": [
                {
                    "name": "shaderData",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_iroDiffuseHemiShaderData.inc.frag"
                    ],
                    "substitution": "MaterialProperties $shaderData = properties;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_iroDiffuseHemiShaderData.inc.frag"
                    ],
                    "substitution": "MaterialProperties $shaderData = properties;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_iroDiffuseHemiShaderData.inc.frag"
                    ],
                    "substitution": "MaterialProperties $shaderData = properties;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_iroDiffuseHemiShaderData.inc.frag"
                    ],
                    "substitution": "MaterialProperties $shaderData = properties;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input",
                    "type": "$type"
                }
            ],
            "name": "normalize",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = normalize($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = normalize($input);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = normalize($input);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$secondType"
                }
            ],
            "name": "max",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "secondType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $value = max($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $value = max($first, $second);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $value = max($first, $second);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "fragColor",
                    "type": "QShaderLanguage::Vec4"
                }
            ],
            "name": "fragColor",
            "outputs": [
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "gl_FragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out vec4 fragColor;"
                    ],
                    "substitution": "fragColor = $fragColor;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input",
                    "type": "$inputType"
                },
                {
                    "defaultValue": "",
                    "name": "index",
                    "type": "$indexType"
                }
            ],
            "name": "atIndex",
            "outputs": [
                {
                    "name": "output",
                    "type": "$outType"
                }
            ],
            "parameters": [
                {
                    "name": "inputType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "indexType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Int"
                },
                {
                    "name": "outType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $outType $output = $input[$index];"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$outType $output = $input[$index];"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$outType $output = $input[$index];"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "worldNormal",
                    "type": "QShaderLanguage::Vec3"
                },
                {
                    "defaultValue": "",
                    "name": "worldTangent",
                    "type": "QShaderLanguage::Vec4"
                }
            ],
            "name": "worldSpaceToTangentSpaceMatrix",
            "outputs": [
                {
                    "name": "matrix",
                    "type": "QShaderLanguage::Mat3"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/es2/coordinatesystems.inc"
                    ],
                    "substitution": "highp mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/es3/coordinatesystems.inc"
                    ],
                    "substitution": "highp mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/gl3/coordinatesystems.inc"
                    ],
                    "substitution": "mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/gl3/coordinatesystems.inc"
                    ],
                    "substitution": "mat3 $matrix = calcWorldSpaceToTangentSpaceMatrix($worldNormal, $worldTangent);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$typeOfFirst"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$typeOfSecond"
                },
                {
                    "defaultValue": "",
                    "name": "third",
                    "type": "$typeOfThird"
                },
                {
                    "defaultValue": "",
                    "name": "fourth",
                    "type": "$typeOfFourth"
                }
            ],
            "name": "join4",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "typeOfFirst",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfSecond",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfThird",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "typeOfFourth",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec4"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = $type($first, $second, $third, $fourth);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($first, $second, $third, $fourth);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $type($first, $second, $third, $fourth);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "x",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "y",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "z",
                    "type": "QString"
                }
            ],
            "name": "COMBXYZ",
            "outputs": [
                {
                    "name": "vector",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec3 $vector = vec3($x, $y, $z);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec3 $vector = vec3($x, $y, $z);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec3 $vector = vec3($x, $y, $z);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "value",
                    "type": "$type"
                }
            ],
            "name": "output",
            "outputs": [
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "location",
                    "type": "QString",
                    "value": "0"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "varying highp $type $name;"
                    ],
                    "substitution": "$name = $value;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out highp $type $name;"
                    ],
                    "substitution": "$name = $value;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "out $type $name;"
                    ],
                    "substitution": "$name = $value;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "layout(location = $location) out $type $name;"
                    ],
                    "substitution": "$name = $value;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input0",
                    "type": "QString"
                }
            ],
            "name": "UNARY_MATH_FUNCTION",
            "outputs": [
                {
                    "name": "output0",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "firstType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "operation",
                    "type": "QString",
                    "value": "round"
                },
                {
                    "name": "outputType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $outputType $output0 = $operation($input0);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = $operation($input0);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "$outputType $output0 = $operation($input0);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "position",
                    "type": "QShaderLanguage::Vec4"
                }
            ],
            "name": "gl_Position",
            "outputs": [
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "gl_Position = $position;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "gl_Position = $position;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "gl_Position = $position;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "gl_Position = $position;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "kuesa_metallicRoughnessShaderData",
            "outputs": [
                {
                    "name": "shaderData",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es2/kuesa_metallicRoughnessShaderData.inc.frag"
                    ],
                    "substitution": "MetallicRoughness $shaderData = metallicRoughness;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/es3/kuesa_metallicRoughnessShaderData.inc.frag"
                    ],
                    "substitution": "MetallicRoughness $shaderData = metallicRoughness;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_metallicRoughnessShaderData.inc.frag"
                    ],
                    "substitution": "MetallicRoughness $shaderData = metallicRoughness;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/kuesa/shaders/gl3/kuesa_metallicRoughnessShaderData.inc.frag"
                    ],
                    "substitution": "MetallicRoughness $shaderData = metallicRoughness;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                }
            ],
            "name": "kuesa_filmicToneMap",
            "outputs": [
                {
                    "name": "outputColor",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "vec3 filmicToneMap(const in vec3 c) {\n                                           vec3 x = max(vec3(0.0), c - vec3(0.4));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "vec3 $outputColor = filmicToneMap($color);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 filmicToneMap(const in highp vec3 c) {\n                                           highp vec3 x = max(vec3(0.0), c - vec3(0.4));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "highp vec3 $outputColor = filmicToneMap($color);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "highp vec3 filmicToneMap(const in highp vec3 c) {\n                                           highp vec3 x = max(vec3(0.0), c - vec3(0.4));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "highp vec3 $outputColor = filmicToneMap($color);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "vec3 filmicToneMap(const in vec3 c) {\n                                           vec3 x = max(vec3(0.0), c - vec3(0.4));    \n                                           return (x * (6.2 * x + vec3(0.5))) / (x * (6.2 * x + vec3(1.7)) + vec3(0.06));\n                                       }"
                    ],
                    "substitution": "vec3 $outputColor = filmicToneMap($color);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "baseColor",
                    "type": "QShaderLanguage::Vec4"
                },
                {
                    "defaultValue": "",
                    "name": "metalness",
                    "type": "QShaderLanguage::Float"
                },
                {
                    "defaultValue": "",
                    "name": "roughness",
                    "type": "QShaderLanguage::Float"
                },
                {
                    "defaultValue": "",
                    "name": "ambientOcclusion",
                    "type": "QShaderLanguage::Float"
                },
                {
                    "defaultValue": "",
                    "name": "worldPosition",
                    "type": "QShaderLanguage::Vec3"
                },
                {
                    "defaultValue": "",
                    "name": "worldView",
                    "type": "QShaderLanguage::Vec3"
                },
                {
                    "defaultValue": "",
                    "name": "worldNormal",
                    "type": "QShaderLanguage::Vec3"
                }
            ],
            "name": "metalRoughFunction",
            "outputs": [
                {
                    "name": "outputColor",
                    "type": "QShaderLanguage::Vec4"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 1
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/gl3/metalrough.inc.frag"
                    ],
                    "substitution": "vec4 $outputColor = metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $worldPosition, $worldView, $worldNormal);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#pragma include :/shaders/gl3/metalrough.inc.frag"
                    ],
                    "substitution": "vec4 $outputColor = metalRoughFunction($baseColor, $metalness, $roughness, $ambientOcclusion, $worldPosition, $worldView, $worldNormal);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "minuend",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "subtrahend",
                    "type": "$type"
                }
            ],
            "name": "subtract",
            "outputs": [
                {
                    "name": "difference",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $difference = $minuend - $subtrahend;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $difference = $minuend - $subtrahend;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $difference = $minuend - $subtrahend;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "arrayInput",
            "outputs": [
                {
                    "name": "value",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "qualifier",
                    "type": "QShaderLanguage::StorageQualifier",
                    "value": "QShaderLanguage::Input"
                },
                {
                    "name": "size",
                    "type": "QString",
                    "value": "1"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier highp $type $name[$size];"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier $type $name[$size];"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "$qualifier $type $name[$size];"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "shaderData",
                    "type": "QString"
                }
            ],
            "name": "kuesa_ShaderDataInput",
            "outputs": [
                {
                    "name": "value",
                    "type": "QString"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp $type $value = $shaderData.$name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "$type $value = $shaderData.$name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "$type $value = $shaderData.$name;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "a",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "x",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "y",
                    "type": "QString"
                }
            ],
            "name": "mix",
            "outputs": [
                {
                    "name": "output",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $output = mix($x, $y, $a);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp vec4 $output = mix($x, $y, $a);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "vec4 $output = mix($x, $y, $a);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "vec4 $output = mix($x, $y, $a);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input",
                    "type": "$type"
                }
            ],
            "name": "not",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = !$input1;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = !$input1;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = !$input1;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "eyePosition",
            "outputs": [
                {
                    "name": "eyePosition",
                    "type": "QShaderLanguage::Vec3"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp vec3 eyePosition;"
                    ],
                    "substitution": "highp vec3 $eyePosition = eyePosition;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform vec3 eyePosition;"
                    ],
                    "substitution": "vec3 $eyePosition = eyePosition;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform vec3 eyePosition;"
                    ],
                    "substitution": "vec3 $eyePosition = eyePosition;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "uniformInput",
            "outputs": [
                {
                    "name": "value",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp $type $name;"
                    ],
                    "substitution": "highp $type $value = $name;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform $type $name;"
                    ],
                    "substitution": "$type $value = $name;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "add-uniform $type $name"
                    ],
                    "substitution": "$type $value = $name;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "color",
                    "type": "QString"
                }
            ],
            "name": "SEPRGB",
            "outputs": [
                {
                    "name": "b",
                    "type": "QString"
                },
                {
                    "name": "g",
                    "type": "QString"
                },
                {
                    "name": "r",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp float $r = $color.r;highp float $g = $color.g;highp float $b = $color.b;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "float $r = $color.r;float $g = $color.g;float $b = $color.b;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "time",
            "outputs": [
                {
                    "name": "time",
                    "type": "QShaderLanguage::Float"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform highp float time;"
                    ],
                    "substitution": "highp float $time = time;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform float time;"
                    ],
                    "substitution": "float $time = time;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform float time;"
                    ],
                    "substitution": "float $time = time;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "coord",
                    "type": "QShaderLanguage::Vec2"
                }
            ],
            "name": "sampleTexture",
            "outputs": [
                {
                    "name": "color",
                    "type": "QShaderLanguage::Vec4"
                }
            ],
            "parameters": [
                {
                    "name": "name",
                    "type": "QString",
                    "value": "defaultName"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "highp vec4 $color = texture2D($name, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "highp vec4 $color = texture($name, $coord);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "uniform sampler2D $name;"
                    ],
                    "substitution": "vec4 $color = texture($name, $coord);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "add-sampler sampler2D $name"
                    ],
                    "substitution": "vec4 $color = texture($name, $coord);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input",
                    "type": "$type"
                }
            ],
            "name": "transpose",
            "outputs": [
                {
                    "name": "output",
                    "type": "QShaderLanguage::Vec3"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Mat3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $output = transpose($input);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = transpose($input);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = transpose($input);"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "TEX_COORD",
            "outputs": [
                {
                    "name": "uv",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef TEX_COORD",
                        "#define TEX_COORD",
                        "varying highp vec2 texCoord;",
                        "#endif"
                    ],
                    "substitution": "highp vec2 $uv = texCoord;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef TEX_COORD",
                        "#define TEX_COORD",
                        "in vec2 texCoord;",
                        "#endif"
                    ],
                    "substitution": "vec2 $uv = texCoord;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef TEX_COORD",
                        "#define TEX_COORD",
                        "in vec2 texCoord;",
                        "#endif"
                    ],
                    "substitution": "vec2 $uv = texCoord;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$type"
                }
            ],
            "name": "dot",
            "outputs": [
                {
                    "name": "value",
                    "type": "QShaderLanguage::Float"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "outputType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Float"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $outputType $value = dot($first, $second);"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$outputType $value = dot($first, $second);"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$outputType $value = dot($first, $second);"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "input1",
                    "type": "$valueType"
                },
                {
                    "defaultValue": "",
                    "name": "input2",
                    "type": "$valueType"
                }
            ],
            "name": "greater",
            "outputs": [
                {
                    "name": "output",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "valueType",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                },
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Bool"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 > $input2;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 > $input2;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $output = $input1 > $input2;"
                }
            ]
        },
        {
            "inputs": [
            ],
            "name": "NEW_GEOMETRY",
            "outputs": [
                {
                    "name": "normal",
                    "type": "QString"
                },
                {
                    "name": "position",
                    "type": "QString"
                },
                {
                    "name": "tangent",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef NEW_GEOMETRY",
                        "#define NEW_GEOMETRY",
                        "varying highp vec3 worldPosition;",
                        "varying highp vec3 worldNormal;",
                        "varying highp vec4 worldTangent;",
                        "#endif"
                    ],
                    "substitution": "highp vec3 $position = worldPosition;highp vec3 $normal = normalize(worldNormal);highp vec3 $tangent = worldTangent.xyz;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef NEW_GEOMETRY",
                        "#define NEW_GEOMETRY",
                        "in vec3 worldPosition;",
                        "in vec3 worldNormal;",
                        "in vec4 vertexTan;",
                        "#endif"
                    ],
                    "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                        "#ifndef NEW_GEOMETRY",
                        "#define NEW_GEOMETRY",
                        "in vec3 worldPosition;",
                        "in vec3 worldNormal;",
                        "in vec4 vertexTan;",
                        "#endif"
                    ],
                    "substitution": "vec3 $position = worldPosition;vec3 $normal = normalize(worldNormal);vec3 $tangent = worldTangent.xyz;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "index",
                    "type": "QString"
                },
                {
                    "defaultValue": "",
                    "name": "weights",
                    "type": "QString"
                }
            ],
            "name": "kuesa_morphWeight",
            "outputs": [
                {
                    "name": "weight",
                    "type": "QString"
                }
            ],
            "parameters": [
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "float $weight = morphWeights.weight$index;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "substitution": "highp float $weight = morphWeights.weight$index;"
                },
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 3,
                        "minor": 0
                    },
                    "substitution": "highp float $weight = morphWeights.weight$index;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "substitution": "float $weight = morphWeights.weight$index;"
                }
            ]
        },
        {
            "inputs": [
                {
                    "defaultValue": "",
                    "name": "first",
                    "type": "$type"
                },
                {
                    "defaultValue": "",
                    "name": "second",
                    "type": "$type"
                }
            ],
            "name": "add",
            "outputs": [
                {
                    "name": "sum",
                    "type": "$type"
                }
            ],
            "parameters": [
                {
                    "name": "type",
                    "type": "QShaderLanguage::VariableType",
                    "value": "QShaderLanguage::Vec3"
                }
            ],
            "rule": [
                {
                    "format": {
                        "api": "OpenGLES",
                        "major": 2,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "highp $type $sum = $first + $second;"
                },
                {
                    "format": {
                        "api": "OpenGLCoreProfile",
                        "major": 3,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $sum = $first + $second;"
                },
                {
                    "format": {
                        "api": "RHI",
                        "major": 1,
                        "minor": 0
                    },
                    "headerSnippets": [
                    ],
                    "substitution": "$type $sum = $first + $second;"
                }
            ]
        }
    ],
    "version": 2,
    "viewport": {
        "topLeft": {
            "x": -286,
            "y": -217
        },
        "zoomLevel": 39
    }
}
