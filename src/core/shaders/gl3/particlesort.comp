#version 430 core

/*
    particlesort.comp

    This file is part of Kuesa.

    Copyright (C) 2020 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com
    Author: Mauro Persano <mauro.persano@kdab.com>

    Licensees holding valid proprietary KDAB Kuesa licenses may use this file in
    accordance with the Kuesa Enterprise License Agreement provided with the Software in the
    LICENSE.KUESA.ENTERPRISE file.

    Contact info@kdab.com if any conditions of this licensing are not clear to you.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#define FLT_MAX 3.402823466e+38
#define MAX_PARTICLE_COUNT 2048

// based on https://www.tools-of-computing.com/tc/CS/Sorts/bitonic_sort.htm

layout(local_size_x=128) in;

layout(std430, binding=0) buffer sortKeyBuffer
{
    vec2 sortKeys[];
};

uniform uint particleCount;

shared vec2 sharedData[MAX_PARTICLE_COUNT];

uint nextPowerOfTwo(uint v)
{
    v--;
    v |= v >> 1;
    v |= v >> 2;
    v |= v >> 4;
    v |= v >> 8;
    v |= v >> 16;
    v++;
    return v;
}

void exchange(uint a, uint b)
{
    vec2 t = sharedData[a];
    sharedData[a] = sharedData[b];
    sharedData[b] = t;
}

void main()
{
    uint threadId = gl_LocalInvocationID.x;
    uint threadCount = gl_WorkGroupSize.x;

    uint sortSize = nextPowerOfTwo(particleCount);
    if (threadId >= sortSize)
        return;

    for (uint i = threadId; i < sortSize; i += threadCount)
        sharedData[i] = i < particleCount ? sortKeys[i] : vec2(-FLT_MAX, -1);
    barrier();

    for (uint k = 2; k <= sortSize; k <<= 1)
    {
        for (uint j = k >> 1; j > 0; j >>= 1)
        {
            for (uint i = threadId; i < sortSize; i += threadCount)
            {
                uint ixj = i ^ j;
                if (ixj > i)
                {
                    if ((i & k) == 0)
                    {
                        if (sharedData[i].x < sharedData[ixj].x)
                            exchange(i, ixj);
                    }
                    else
                    {
                        if (sharedData[i].x > sharedData[ixj].x)
                            exchange(i, ixj);
                    }
                }
            }
            barrier();
        }
    }

    for (uint i = threadId; i < particleCount; i += threadCount)
        sortKeys[i] = sharedData[i];
}
