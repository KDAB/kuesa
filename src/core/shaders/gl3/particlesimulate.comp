#version 430 core

/*
    particlesimulate.comp

    This file is part of Kuesa.

    Copyright (C) 2021 Klar√§lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com
    Author: Mauro Persano <mauro.persano@kdab.com>

    Licensees holding valid proprietary KDAB Kuesa licenses may use this file in
    accordance with the Kuesa Enterprise License Agreement provided with the Software in the
    LICENSE.KUESA.ENTERPRISE file.

    Contact info@kdab.com if any conditions of this licensing are not clear to you.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#pragma include particle.inc

layout (local_size_x=128) in;

#define FLT_MAX 3.402823466e+38

uniform int particleCount;
uniform vec3 eyePosition;
uniform float frameTime;
uniform vec3 gravity;

layout (std430, binding=0) buffer particleBuffer
{
    Particle particles[];
};

layout (std430, binding=1) buffer sortKeyBuffer
{
    vec2 sortKeys[];
};

layout (std430, binding=2) buffer deadListBuffer
{
    uint count;
    uint head;
    uint particles[];
} deadList;

void main(void)
{
    if (gl_GlobalInvocationID.x == 0)
        deadList.count = 0;
    barrier();

    uint particleIndex = gl_GlobalInvocationID.x;
    if (particleIndex >= particleCount)
        return;

    Particle p = particles[particleIndex];
    if (p.age < 0.0)
    {
        // dead
        sortKeys[particleIndex] = vec2(-FLT_MAX, -1.0);
        deadList.particles[atomicAdd(deadList.count, 1)] = particleIndex;
        return;
    }

    vec3 position = p.position.xyz;
    vec3 velocity = p.velocity.xyz;

    position += frameTime * velocity;
    velocity += frameTime * gravity;

    p.position = vec4(position, 1.0);
    p.velocity = vec4(velocity, 0.0);
    p.age -= frameTime;

    p.rotation += frameTime * p.rotationRate;

    particles[particleIndex] = p;

    float dist = distance(eyePosition, position);
    sortKeys[particleIndex] = vec2(dist, float(particleIndex));
}
