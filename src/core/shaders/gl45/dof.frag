#version 450 core

/*
    dof.frag

    This file is part of Kuesa.

    Copyright (C) 2018-2019 Klarälvdalens Datakonsult AB, a KDAB Group company, info@kdab.com
    Author: Jean-Michaël Celerier <jean-michael.celerier@kdab.com>

    Licensees holding valid proprietary KDAB Kuesa licenses may use this file in
    accordance with the Kuesa Enterprise License Agreement provided with the Software in the
    LICENSE.KUESA.ENTERPRISE file.

    Contact info@kdab.com if any conditions of this licensing are not clear to you.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

layout(binding=0) uniform sampler2D textureSampler;
layout(binding=1) uniform sampler2D depthTexture;

layout(location = 0) in vec2 texCoord;
layout(location = 0) out vec4 fragColor;

layout(location = 0) uniform vec2 textureSize;

layout(location = 1) uniform float focusDistance;
layout(location = 2) uniform float focusRange;
layout(location = 3) uniform float bokehRadius;
layout(location = 4) uniform float nearPlane;
layout(location = 5) uniform float farPlane;

/* Evenly spaced points computed with Vogel's method:
* https://www.arl.army.mil/arlreports/2015/ARL-TR-7333.pdf
* here's some python code
import math
N = 37
delta = math.pi * (3 - math.sqrt(5))

def vogel_point(k, n):
    r = math.sqrt(k / n)
    theta = delta * (k - 1)
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return (x, y)

for i in range(N):
    (x,y) = vogel_point(i, N)
    print("vec2({}, {}),".format(x, y))

*/

#define BOKEH_QUALITY_HIGH 1
#if defined(BOKEH_QUALITY_MEDIUM)
const int discN = 37;

const vec2 discPoints[37] = vec2[37](
    vec2(-0.0, -0.0),
    vec2(0.1643989873053573, 0.0),
    vec2(-0.17143478191956768, 0.15704830340453962),
    vec2(0.024894247694867807, -0.28365711257218224),
    vec2(0.20005346516430014, 0.26093431967425107),
    vec2(-0.3619878764884296, -0.06403055841184399),
    vec2(0.3397748851393408, -0.2161369695140328),
    vec2(-0.1129171863326795, 0.4200463048520962),
    vec2(-0.2143174132134733, -0.4126551376266889),
    vec2(0.46327040961012134, 0.16918561056695594),
    vec2(-0.480544372378645, 0.19836173130290136),
    vec2(0.2311019257231851, -0.49385139184205273),
    vec2(0.17044060376253492, 0.5433915024302339),
    vec2(-0.5128530606501511, -0.2972088315193944),
    vec2(0.6007773778240617, -0.13207922120160703),
    vec2(-0.3661932698962001, 0.5208722439218029),
    vec2(-0.0845081090434696, -0.652143244953384),
    vec2(0.518305384943761, 0.4368283271466712),
    vec2(-0.6968902172313068, 0.0288185984008344),
    vec2(0.5079461461413045, -0.5054742586262034),
    vec2(-0.03396062647101076, 0.7344298580465237),
    vec2(-0.4826915633516617, -0.5784258139439287),
    vec2(0.7642132286782974, 0.10282380905066117),
    vec2(-0.6471892119717594, 0.45029739676017977),
    vec2(0.17676749997164926, -0.7857492600075558),
    vec2(0.40868016175943, 0.7132013748303924),
    vec2(-0.7986172462245811, -0.25478068359938427),
    vec2(0.7754734916233659, -0.35828842225111757),
    vec2(-0.3358413580361698, 0.8024757560133378),
    vec2(-0.29963709667172567, -0.8330674607028669),
    vec2(0.7970691279103403, 0.4189171948524677),
    vec2(-0.8851013183801577, 0.23330986699997175),
    vec2(0.5029688802213153, -0.7822321716688603),
    vec2(0.15995890500950075, 0.9307550916326235),
    vec2(-0.75789342047766, -0.5869552641518703),
    vec2(0.9692767606051733, -0.08030259831840664),
    vec2(-0.6698397411409349, 0.724077132742927)
);
#elif defined(BOKEH_QUALITY_HIGH)
const int discN = 113;

const vec2 discPoints[113] = vec2[113](
    vec2(-0.0, -0.0),
    vec2(0.09407208683835973, 0.0),
    vec2(-0.09809809632159025, 0.0898658919853789),
    vec2(0.01424494073419956, -0.16231375243598684),
    vec2(0.11447422673167248, 0.1493113575809999),
    vec2(-0.20713603842463144, -0.03663944863625911),
    vec2(0.19442536127642057, -0.12367750007692066),
    vec2(-0.06461326515656049, 0.24035812576377624),
    vec2(-0.12263631690955974, -0.23612876561708693),
    vec2(0.2650917436707692, 0.09681107961750167),
    vec2(-0.2749762189478879, 0.11350618588588976),
    vec2(0.1322407198577383, -0.2825907372064237),
    vec2(0.09752920952092235, 0.3109384883794715),
    vec2(-0.29346383726311076, -0.17006829218411368),
    vec2(0.3437757286923718, -0.07557812958629828),
    vec2(-0.20954244092339164, 0.2980525595993521),
    vec2(-0.04835707508171361, -0.37316821092306857),
    vec2(0.29658375626520705, 0.24996110376561884),
    vec2(-0.39877324128778574, 0.01649052549385603),
    vec2(0.290656011647207, -0.2892415527093102),
    vec2(-0.019432887360382872, 0.42025410566860205),
    vec2(-0.27620488062630194, -0.3309857578247319),
    vec2(0.4372966913580576, 0.05883765132992098),
    vec2(-0.37033342326113566, 0.257668350063678),
    vec2(0.10114957445964055, -0.4496199996859649),
    vec2(0.23385421222053462, 0.4081067819576275),
    vec2(-0.45698329514589603, -0.14579013523836282),
    vec2(0.44374001835753435, -0.20501914350957612),
    vec2(-0.1921745256155948, 0.4591912045367269),
    vec2(-0.1714577896136348, -0.4766963336573919),
    vec2(0.45609743372496886, 0.23971202851174253),
    vec2(-0.5064710522136626, 0.13350414396349677),
    vec2(0.28780792967591623, -0.44760745785076844),
    vec2(0.09153139109472075, 0.5325949705680235),
    vec2(-0.4336803823065433, -0.3358664641709005),
    vec2(0.554637769298975, -0.04595060545186764),
    vec2(-0.38329446749786045, 0.414330088192967),
    vec2(0.0027914388066686002, -0.5722113562207348),
    vec2(0.3896257308604922, 0.4295055013525849),
    vec2(-0.5849730410105397, -0.054215169959276756),
    vec2(0.4739242851414478, -0.3596916357633625),
    vec2(-0.10781170262066786, 0.592628463023092),
    vec2(-0.3247066230273891, -0.5159913031160046),
    vec2(0.5949342097351745, 0.1630468016801029),
    vec2(-0.555167482416344, 0.2849027859480314),
    vec2(0.21936524216184758, -0.591700075229714),
    vec2(0.24056374635407754, 0.5909388546692375),
    vec2(-0.582790917744187, -0.2761954918797758),
    vec2(0.6228211261600053, -0.19202240981387989),
    vec2(-0.3329546506993675, 0.5681280834122998),
    vec2(-0.13965824508273142, -0.6503640908649604),
    vec2(0.5476903704434235, 0.3890535846793654),
    vec2(-0.6731558279608304, 0.08389411441103181),
    vec2(0.4439021963243018, -0.5215145144394616),
    vec2(0.025192683982580698, 0.6908266315570384),
    vec2(-0.48969518154899583, -0.4969147742666846),
    vec2(0.7030526257987599, 0.035947553413366605),
    vec2(-0.5475153673232132, 0.45238446183085124),
    vec2(0.09899660851895752, -0.7095590234680481),
    vec2(0.40979086061810005, 0.5951431293052005),
    vec2(-0.7101229909635298, -0.16339764084112177),
    vec2(0.639257582389896, -0.36217779087981483),
    vec2(-0.22857187869696938, 0.7045760871904605),
    vec2(-0.30986157458960567, -0.6793437483974188),
    vec2(0.6928062485185825, 0.29392377146045423),
    vec2(-0.7149170990484355, 0.2532089659277937),
    vec2(0.35884632936892613, -0.6747592966077793),
    vec2(0.19263421376162823, 0.7455282782502219),
    vec2(-0.6504399505811592, -0.42272660454767236),
    vec2(0.770767551705554, -0.12859568524789142),
    vec2(-0.48495126557112583, 0.6199123297448083),
    vec2(-0.061592076566230385, -0.7902689416743239),
    vec2(0.583299937804972, 0.5449122169208874),
    vec2(-0.803714007546264, -0.007841759303120015),
    vec2(0.6020122141395635, -0.5407851242997984),
    vec2(-0.07913933422032153, 0.8108352359995564),
    vec2(-0.49260802372180584, -0.6556704253253404),
    vec2(0.8114190079123186, 0.15170735909021826),
    vec2(-0.7053278898723384, 0.4390649775305451),
    vec2(0.22493085078541664, -0.8053081128442307),
    vec2(0.3805064489144166, 0.7504528260353557),
    vec2(-0.7924037857913347, -0.29817846930252345),
    vec2(0.7905457399839649, -0.3173344447225429),
    vec2(-0.3708080403951923, 0.7726672450120818),
    vec2(-0.24999946342033663, -0.8251442905019406),
    vec2(0.7461207139974296, 0.4421722170427452),
    vec2(-0.8538278653738052, 0.17899699219223222),
    vec2(0.5116242316298438, -0.7128479150800335),
    vec2(0.10486358038895509, 0.8762218277667544),
    vec2(-0.6729940267135627, -0.5785236896419118),
    vec2(0.8920013935457305, -0.028172520363383618),
    vec2(-0.6422423550334464, 0.6267651010660747),
    vec2(0.05047082967442442, -0.9008951034317888),
    vec2(0.5744269432256546, 0.7021698772049059),
    vec2(-0.9026878572047056, -0.13043404285240556),
    vec2(0.7577194097335541, -0.5163034579729293),
    vec2(-0.21106289996795483, 0.8972234807343213),
    vec2(-0.45277447469635235, -0.808333071641548),
    vec2(0.8844068004718104, 0.29168690139832637),
    vec2(-0.8534872030470122, 0.3842730655734977),
    vec2(0.37162496875258333, -0.8642052041107082),
    vec2(0.3112823765780369, 0.8926973685221898),
    vec2(-0.8366496704048949, -0.4501912885296849),
    vec2(0.9255230633667655, -0.23433199515849162),
    vec2(-0.5267012485501473, 0.8018352555709937),
    vec2(-0.15399388253791638, -0.9515720802776357),
    vec2(0.7599210282700013, 0.6004774168427957),
    vec2(-0.9705044965425516, 0.07087790246575636),
    vec2(0.6708555120068618, -0.7111294498186612),
    vec2(-0.01437301811707043, 0.9820362448818837),
    vec2(-0.6557452009869466, -0.7371903138377615),
    vec2(0.9859422343867585, 0.1010880576932716),
    vec2(-0.7988614632065086, 0.5941134614544871)
);
#endif

float mapZ(float z) {
    float a = (-1. + (nearPlane / farPlane)) / nearPlane;
    float b =  (1. / nearPlane);
    return 1.0 / (a * z + b);
}

float confusionCircle() {
    float depth = mapZ(texture(depthTexture, texCoord.xy).r);
    float coc = (depth - focusDistance) / focusRange;
    coc = clamp(coc , -1, 1) * bokehRadius;

    return coc;
}

float weigh (float coc, float radius) {
    return clamp((coc - radius + 2) / 2, 0., 1.);
}

vec4 depthOfField() {
    vec3 color = vec3(0, 0, 0);

    float weight = 0.;
    float confCircle = abs(confusionCircle());

    for (int k = 0; k < discN; k++) {
            vec2 sampledPoint = discPoints[k] * bokehRadius;
            float radius = length(sampledPoint);

            sampledPoint = sampledPoint / textureSize;
            vec4 s = texture(textureSampler, texCoord.xy + sampledPoint);

            float sw = weigh(confCircle, radius);
            color += s.rgb * sw;
            weight += sw;
    }
    return vec4(color / weight, 1);
}

void main()
{
    // debug depth: fragColor = vec4(confusionCircle(), confusionCircle(), confusionCircle(), 1.);
    fragColor = depthOfField();
}
